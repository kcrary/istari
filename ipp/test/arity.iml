
type ints = int * int
datatype foo = F of int * int
datatype bar = B of ints
datatype gnurf = G

val x = F (1, 2)
val x' = B (1, 2)
val y = (case x of F (a, b) => (a, b))
val y' = (case x' of B (a, b) => (a, b))
(*
val z = (case x of F c => c)
*)
val z' = (case x' of B c => c)
val p = F y
val f = F
val f' = B
val w = G
