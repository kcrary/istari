
Known differences between the SML and OCaml implementations of IML:

* Treatment of overflow, word lengths
  
  (Rationale: Want to use the built-in ints because of performance,
  and because they're hooked into the REPL.  SML's words aren't a
  substitute because they aren't hooked into the REPL the way we want,
  they don't offer division, and signed comparisons would be
  expensive.)

* Order of evaluation

  (This is moot when function arguments are pure.)

* Treatment of avoidance problem is different.

* In OCaml, the value restriction is more permissive.

* OCaml datatypes are not opaque.

  (This becomes apparent when you try to where-type a definition onto a
  datatype.  Probably other ways as well.)

* Minor basis differences:

  + The argument passed to the Invalid exception.
  + Maximum string/array sizes.
  + The string obtained from an ioerr.

* SML-compatibility mode only: 
  Polymorphic equality is more flexible in OCaml than SML.


Differences SML between SML-compatibility mode (on legal SML programs):

* No transparent ascription.

* No records except as arguments to datatypes.

* A single variable pattern (or "as" pattern) cannot match multiple arguments of a
  datatype constructor.

* No local or module-level let.

* No # terms.

* A lot of the basis is missing.

* Especially: many built-in exceptions cannot be handled (e.g., Bind, Match, Overflow, Size).

* No datatype copying.

* Datatypes cannot be where-typed.

* Obsolete features are not supported (equality types, abstype, loops).
