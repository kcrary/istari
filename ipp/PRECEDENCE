
Parsing priority rules:
1. higher-precedence rules take priority
2. rules from later-activated grammars take priority
3. rules from later in a grammar take priority
4. left-associative parses take priority


It works out this way because:

In FHParseFun
 - prefer the earlier choice in an or
 - prefer a longer match (which results in prefering left-associative parses)
   (see the comment in find)

In Parse
 - prefer a higher precedence match
   (because the fallthrough to higher precedence is placed first in the list)
 - prefer a later rule in the list of rules to be compiled
   (because processed using foldl)
 - prefer a left-associative parse
   (as above)

In Context
 - prefer later activations
   (because new activations are consed onto list, and the list is processed using foldl)
 - prefer later rules within a grammar
   (because within grammar, rules are appended onto the full list, preserving order)

In Traverse
 - prefer later rules within a grammar
   (because the ordering in the code is preserved)
