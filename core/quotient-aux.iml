
functor AfterQuotient () :> sig end =
   struct

      structure T = Term
      structure J = Judgement
      structure R = Reduction
      structure D = Directory
      structure S = Seq
      structure De = DestructInternal
      structure H = ConstantTable

      open Tactic
      open IntroPattern

      val quotient1 = resolveGlobal /Quotient.quotient1/
      val quotient2 = resolveGlobal /Quotient.quotient2/
      val qintro1 = resolveGlobal /Quotient.qintro1/
      val qintro2 = resolveGlobal /Quotient.qintro2/
      val quotient1_refl_left = resolveGlobal /Quotient.quotient1_refl_left/
      val quotient1_refl_right = resolveGlobal /Quotient.quotient1_refl_right/

      
      fun assert2 a b =
         refine (Rule.assert a (T.evar ()))
         >>> [
             idtac,
             refine (Rule.assert (T.Sub (b, T.shift1)) (T.evar ()))
             >>> [
                 refine (Rule.weaken 0 1),
                 idtac
                 ]
             ]


      fun varyAndBindSetPat set p =
         (case p of
             Ident symopt =>
                D.varyAndBindSet set symopt

           | _ =>
                D.freshAndBindSet set)


      fun relationIstype1 lv a r =
         (* A, A[^] |- R[^2] 1 0 : type *)
         refine (Rule.univForgetOf (T.evar ()) (T.Sub (lv, T.Shift 2)))
         >>+
         (* A, A[^] |- R[^2] 1 0 : U lv[^2] *)
         refine (Rule.arrowElimOf 
                    (T.Sub (a, T.Shift 2)) (T.evar ()) (T.app (T.Sub (r, T.Shift 2)) (T.Var 1)) T.zero)
         >>> [
             (* A, A[^] |- R[^2] 1 : A[^2] -> U lv[^2] *)
             refine (Rule.arrowElimOf
                        (T.Sub (a, T.Shift 2)) (T.evar ()) (T.Sub (r, T.Shift 2)) (T.Var 1))
             >>> [
                 (* A, A[^] |- R[^2] : A[^2] -> A[^2] -> U lv[^2] *)
                 refine (Rule.weaken 0 2)
                 >>+
                 (* R : A -> A -> U lv *)
                 idtacM (S.empty, De.Tertiary),

                 (* A, A[^] |- 1 : A[^2] *)
                 refine (Rule.hypothesisOf 1) >> done
                 ],

             (* A, A[^] |- 0 : A[^2] *)
             refine (Rule.hypothesisOf 0) >> done
             ]
         

      fun destQuotient1Eq i p1 p2 p3 p4 p5 set a r hper m n copt jud =
         let
            val lv = T.evar ()

            val tertseq =
               let
                  val (v1, set1) = D.freshAndBindSet set
                  val (v2, set2) = D.freshAndBindSet set1
                  val v3 = D.freshSet set2
               in
                  S.cons v1 (S.cons v2 (S.cons v3 S.empty))
               end
         in
            (* quotient1 A R Hper, ... |- P = Q : C   (but C might be just type) *)
            refine (Rule.reduceHyp i (R.trans [R.unfold, R.beta 3]))
            >>+
            (* quotient A (fn . fn . R[^2] 1 0), ... |- M = N : Q *)
            (if Option.isSome copt then
                refine (Rule.quotientLeftEq i (T.evar ()) (T.evar ()) (T.evar ()) (T.evar ()) (T.evar ()))
             else
                refine (Rule.quotientLeftEqtype i (T.evar ()) (T.evar ()) (T.evar ()) (T.evar ())))
            >>> [
                (* A, A[^] |- R[^2] 1 0 : type *)
                relationIstype1 lv a r,

                (* A, A[^], R[^2] 1 0, ...[^2] |- M[under_i (2 . ^3)] = N[under_i (1 . ^3)] : C[under_i (2 . ^3)] *)
                assert2
                   (T.app2 (T.Sub (r, T.Shift (i+3))) (T.Var (i+2)) (T.Var (i+2)))
                   (T.app2 (T.Sub (r, T.Shift (i+3))) (T.Var (i+1)) (T.Var (i+1)))
                >>> [
                    (* A, A[^], R[^2] 1 0, ...[^2] |- R[^i+3] i+2 i+2 *)
                    refine (Rule.weaken 0 i)
                    >>+
                    (* A, A[^], R[^2] 1 0 |- R[^3] 2 2 *)
                    IntroTactic.exactRaw
                       (ETerm.literal
                           (T.Elim (T.Const quotient1_refl_left,
                                    [T.App (T.Sub (lv, T.Shift 3)),
                                     T.App (T.Sub (a, T.Shift 3)),
                                     T.App (T.Sub (r, T.Shift 3)),
                                     T.App (T.Sub (hper, T.Shift 3)),
                                     T.App (T.Var 2),
                                     T.App (T.Var 1),
                                     T.App (T.Var 0)])))
                    >> idtacM (tertseq, De.Tertiary),

                    (* A, A[^], R[^2] 1 0, ...[^2] |- R[^i+3] i+1 i+1 *)
                    refine (Rule.weaken 0 i)
                    >>+
                    (* A, A[^], R[^2] 1 0 |- R[^3] 1 1 *)
                    IntroTactic.exactRaw
                       (ETerm.literal
                           (T.Elim (T.Const quotient1_refl_right,
                                    [T.App (T.Sub (lv, T.Shift 3)),
                                     T.App (T.Sub (a, T.Shift 3)),
                                     T.App (T.Sub (r, T.Shift 3)),
                                     T.App (T.Sub (hper, T.Shift 3)),
                                     T.App (T.Var 2),
                                     T.App (T.Var 1),
                                     T.App (T.Var 0)])))
                    >> idtacM (tertseq, De.Tertiary),

                    (* A, A[^], R[^2] 1 0, ...[^2], R[^i+3] i+2 i+2, R[^i+3] i+1 i+1 |- M[under_i (2 . ^3)][^2] = N[under_i (1 . ^3)][^2] : C[under_i (2 . ^3)] *)
                    refine (Rule.exchange 1 1 (i+2))
                    >>+
                    refine (Rule.exchange 0 1 (i+1))
                    >>+
                    (* A, R[^] 0 0, A[^2], R[^3] 0 0, R[^4] 3 1, ...[^4] |- M[under_i (4 . ^5)] = N[under_i (2 . ^5)] : C[under_i (4 . ^5)] *)
                    let
                       do (vars1, set1) = De.andthenp S.empty $ De.dest (i+4) p1 set
                       do (vars2, set2) = De.andthenp vars1 $ De.dest (i+3) p2 set1
                       val vars1_2 = S.append vars1 vars2
                       do (vars3, set3) = De.andthenp vars1_2 $ De.dest (i+2) p3 set2
                       val vars1_3 = S.append vars1_2 vars3
                       do (vars4, set4) = De.andthenp vars1_3 $ De.dest (i+1) p4 set3
                       val vars1_4 = S.append vars1_3 vars4
                       do (vars5, set5) = De.andthenp vars1_4 $ De.dest i p5 set4
                       val vars1_5 = S.append vars1_4 vars5

                       val x =
                          T.Elim (T.Const qintro1,
                                  [T.App (T.Sub (a, T.Shift 5)),
                                   T.App (T.Sub (r, T.Shift 5)),
                                   T.App (T.Sub (hper, T.Shift 5)),
                                   T.App (T.Var 4),
                                   T.App (T.Var 3)])

                       val y =
                          T.Elim (T.Const qintro1,
                                  [T.App (T.Sub (a, T.Shift 5)),
                                   T.App (T.Sub (r, T.Shift 5)),
                                   T.App (T.Sub (hper, T.Shift 5)),
                                   T.App (T.Var 2),
                                   T.App (T.Var 1)])
                    in
                       (* ... |- M[under_i (4 . ^5)] = N[under_i (2 . ^5)] : C[under_i (4 . ^5)]
                               = M[under_i ((5 . ^6) o (2 . id))] = N[under_i ((0 . ^6) o (2 . id))] : C[under_i ((5 . ^6) o (2 . id))]
                               = (M[under_i (5 . ^6)] = N[under_i+1 (^5)] : C[under_i (5 . ^6)])[under_i (2 . id)]
                       *)
                       refine (Rule.unreduceAt i
                                  (case copt of
                                      NONE =>
                                         T.apply2 Prim.eqtp
                                            (T.Sub (m, T.under i (T.Idot (5, T.Shift 6))))
                                            (T.Sub (n, T.underShift (i+1) 5))

                                    | SOME c =>
                                         T.apply3 Prim.eq
                                            (T.Sub (c, T.under i (T.Idot (5, T.Shift 6))))
                                            (T.Sub (m, T.under i (T.Idot (5, T.Shift 6))))
                                            (T.Sub (n, T.underShift (i+1) 5)))
                                  y
                                  (R.trans [R.unfold, R.beta 5]))
                       >>+
                       (* ... |- M[under_i (4 . ^5)] = N[under_i (Y . ^5)] : C[under_i (4 . ^5)]
                               = M[under_i ((0 . ^6) o (4 . id))] = N[under_i ((Y[^] . ^6) o (4 . id))] : C[under_i ((0 . ^6) o (4 . id))]
                               = (M[under_i+1 (^5)] = N[under_i (Y[^] . ^6)] : C[under_i+1 (^5)])[under_i (4 . id)]
                       *)
                       refine (Rule.unreduceAt i
                                  (case copt of
                                      NONE =>
                                         T.apply2 Prim.eqtp
                                            (T.Sub (m, T.underShift (i+1) 5))
                                            (T.Sub (n, T.under i (T.Dot (T.Sub (y, T.shift1), T.Shift 6))))

                                    | SOME c =>
                                         T.apply3 Prim.eq
                                            (T.Sub (c, T.underShift (i+1) 5))
                                            (T.Sub (m, T.underShift (i+1) 5))
                                            (T.Sub (n, T.under i (T.Dot (T.Sub (y, T.shift1), T.Shift 6)))))
                                  x
                                  (R.trans [R.unfold, R.beta 5]))
                       >>+
                       (* ... |- M[under_i (X . ^5)] = N[under_i (Y . ^5)] : C[under_i (X . ^5)] *)
                       De.refoldHyps jud i 5
                          x
                          (R.trans [R.unfold, R.beta 5])
                       >>+
                       idtacM (vars1_5, De.Principal set5)
                    end
                    ]
                ]
         end
         

      fun destQuotient1 i pat set =
         (case pat of
             And [p1, p2] =>
                let
                   do (jud, _) = withgoal

                   val lv = T.evar ()
                in
                   (case J.hyp jud i of
                       J.Tm b =>
                          termCase b
                          /| $as (\quotient1\ ? ? ?) =>
                             \(fnc quot a r hper =>
                                  (* quotient1 A R Hper, ... |- C *)
                                  refine (Rule.reduceHyp i (R.trans [R.unfold, R.beta 3]))
                                  >>+
                                  (* quotient A (fn . fn . R[^2] 1 0), ... |- C *)
                                  refine (Rule.quotientLeftRefl i (T.evar ()) (T.evar ()) (T.evar ()))
                                  >>> [
                                      (* A, A[^] |- R[^2] 1 0 : type *)
                                      relationIstype1 lv a r,
                  
                                      (* quotient A (fn . fn . R[^2] 1 0), ... |- C : type *)
                                      refine (Rule.unreduceHyp i quot (R.trans [R.unfold, R.beta 3]))
                                      >>+
                                      (* quotient1 A R Hper, ... |- C : type *)
                                      let
                                         val (v, _) = varyAndBindSetPat set p1
                                      in
                                         idtacM (S.cons v S.empty, De.Auxiliary)
                                      end,
                  
                                      (* A (hidden), R[^] 0 0, ...[^] |- C[under_i (^)] *)
                                      let
                                         do (vars1, set1) = De.andthenp S.empty $ De.dest (i+1) p1 set
                                         do (vars2, set2) = De.andthenp vars1 $ De.dest i p2 set1
                                      in
                                         De.refold jud i 2
                                            (T.Elim (T.Const qintro1,
                                                     [T.App (T.Sub (a, T.Shift 2)),
                                                      T.App (T.Sub (r, T.Shift 2)),
                                                      T.App (T.Sub (hper, T.Shift 2)),
                                                      T.App (T.Var 1),
                                                      T.App (T.Var 0)]))
                                            (R.trans [R.unfold, R.beta 5])
                                         >>+
                                         idtacM (S.append vars1 vars2, De.Principal set2)
                                      end
                                      ])\

                           | _ =>
                             \(fnc =>
                                  fail "unexpected subject in destQuotient1")\
                          /

                     | _ =>
                          fail "this sort of hypothesis cannot be destructed")
                end

           | And [p1, p2, p3, p4, p5] =>
                let
                   do (jud, _) = withgoal
                in
                   (case J.hyp jud i of
                       J.Tm b =>
                          termCase b
                          /| \quotient1\ ? ? ? =>
                             \(fnc a r hper =>
                                  goalCaseT
                                  /| \Prim.istp\ ? =>
                                     \(fnc c =>
                                          (* quotient1 A R Hper, ... |- C : type *)
                                          refine (Rule.reduce (R.trans [R.unfold, R.beta 1]))
                                          >>+
                                          (* quotient1 A R Hper, ... |- C = C : type *)
                                          destQuotient1Eq i p1 p2 p3 p4 p5 set a r hper c c NONE jud)\

                                   | \Prim.eqtp\ ? ? =>
                                     \(fnc c d =>
                                          (* quotient1 A R Hper, ... |- C = D : type *)
                                          destQuotient1Eq i p1 p2 p3 p4 p5 set a r hper c d NONE jud)\

                                   | \Prim.ov\ ? ? =>
                                     \(fnc c m =>
                                          (* quotient1 A R Hper, ... |- M : C *)
                                          refine (Rule.reduce (R.trans [R.unfold, R.beta 1]))
                                          >>+
                                          (* quotient1 A R Hper, ... |- M = M : C *)
                                          destQuotient1Eq i p1 p2 p3 p4 p5 set a r hper m m (SOME c) jud)\
                                          
                                   | \Prim.eq\ ? ? ? =>
                                     \(fnc c m n =>
                                          (* quotient1 A R Hper, ... |- M = N : C *)
                                          destQuotient1Eq i p1 p2 p3 p4 p5 set a r hper m n (SOME c) jud)\
                                          
                                   | _ =>
                                     \(fnc =>
                                          fail "conclusion has improper form for functional quotient elimination")\
                                  /)\

                           | _ =>
                             \(fnc =>
                                  fail "unexpected subject in destQuotient1")\
                          /

                     | _ =>
                          fail "this sort of hypothesis cannot be destructed")
                end

           | _ =>
                fail "quotient1 pattern expected")



      fun relationIstype2 lv a q r =
         (* A, A[^] |- Q[^2] 1 & Q[^2] 0 & R[^2] 1 0 : type *)
         refine (Rule.univForgetOf (T.evar ()) (T.Sub (lv, T.Shift 2)))
         >>+
         (* A, A[^] |- Q[^2] 1 & Q[^2] 0 & R[^2] 1 0 : U lv[^2] *)
         refine (Rule.prodFormUniv (T.evar ()) (T.evar ()) (T.Sub (lv, T.Shift 2)))
         >>> [
             (* A, A[^] |- Q[^2] 1 : U lv[^2] *)
             refine (Rule.arrowElimOf
                        (T.Sub (a, T.Shift 2)) (T.evar ()) (T.Sub (q, T.Shift 2)) (T.Var 1))
             >>> [
                 (* A, A[^] |- Q[^2] : A[^2] -> U lv[^2] *)
                 refine (Rule.weaken 0 2)
                 >>+
                 (* Q : A -> U lv *)
                 idtacM (S.empty, De.Tertiary),

                 (* A, A[^] |- 1 : A[^2] *)
                 refine (Rule.hypothesisOf 1) >> done
                 ],

             (* A, A[^] |- Q[^2] 0 & R[^2] 1 0 : U lv[^2] *)
             refine (Rule.prodFormUniv (T.evar ()) (T.evar ()) (T.Sub (lv, T.Shift 2)))
             >>> [
                 (* A, A[^] |- Q[^2] 0 : U lv[^2] *)
                 refine (Rule.arrowElimOf
                            (T.Sub (a, T.Shift 2)) (T.evar ()) (T.Sub (q, T.Shift 2)) T.zero)
                 >>> [
                     (* A, A[^] |- Q[^2] : A[^2] -> U lv[^2] *)
                     refine (Rule.weaken 0 2)
                     >>+
                     (* Q : A -> U lv *)
                     idtacM (S.empty, De.Tertiary),
    
                     (* A, A[^] |- 0 : A[^2] *)
                     refine (Rule.hypothesisOf 0) >> done
                     ],

                 (* R[^2] 1 0 : U lv[^2] *)
                 refine (Rule.arrowElimOf 
                            (T.Sub (a, T.Shift 2)) (T.evar ()) (T.app (T.Sub (r, T.Shift 2)) (T.Var 1)) T.zero)
                 >>> [
                     (* A, A[^] |- R[^2] 1 : A[^2] -> U lv[^2] *)
                     refine (Rule.arrowElimOf
                                (T.Sub (a, T.Shift 2)) (T.evar ()) (T.Sub (r, T.Shift 2)) (T.Var 1))
                     >>> [
                         (* A, A[^] |- R[^2] : A[^2] -> A[^2] -> U lv[^2] *)
                         refine (Rule.weaken 0 2)
                         >>+
                         (* R : A -> A -> U lv *)
                         idtacM (S.empty, De.Tertiary),
        
                         (* A, A[^] |- 1 : A[^2] *)
                         refine (Rule.hypothesisOf 1) >> done
                         ],
        
                     (* A, A[^] |- 0 : A[^2] *)
                     refine (Rule.hypothesisOf 0) >> done
                     ]
                 ]
             ]
         

      fun destQuotient2Eq i p1 p2 p3 p4 p5 set a q r hper m n copt jud =
         let
            val lv = T.evar ()

            val tertseq =
               let
                  val (v1, set1) = D.freshAndBindSet set
                  val (v2, set2) = D.freshAndBindSet set1
                  val v3 = D.freshSet set2
               in
                  S.cons v1 (S.cons v2 (S.cons v3 S.empty))
               end
         in
            (* quotient2 A Q R Hper, ... |- P = Q : C   (but C might be just type) *)
            refine (Rule.reduceHyp i (R.trans [R.unfold, R.beta 4]))
            >>+
            (* quotient A (fn . fn . Q[^2] 1 & Q[^2] 0 & R[^2] 1 0), ... |- M = N : Q *)
            (if Option.isSome copt then
                refine (Rule.quotientLeftEq i (T.evar ()) (T.evar ()) (T.evar ()) (T.evar ()) (T.evar ()))
             else
                refine (Rule.quotientLeftEqtype i (T.evar ()) (T.evar ()) (T.evar ()) (T.evar ())))
            >>> [
                (* A, A[^] |- Q[^2] 1 & Q[^2] 0 & R[^2] 1 0 : type *)
                relationIstype2 lv a q r,

                (* A, A[^], Q[^2] 1 & Q[^2] 0 & R[^2] 1 0, ...[^2] |- M[under_i (2 . ^3)] = N[under_i (1 . ^3)] : C[under_i (2 . ^3)] *)
                refine (Rule.prodLeft i (T.evar ()) (T.evar ()) (T.evar ()))
                >>+
                (* A, A[^], Q[^2] 1, Q[^3] 1 & R[^3] 2 1, ...[^3] |- M[under_i (3 . ^4)] = N[under_i (2 . ^4)] : C[under_i (3 . ^4)] *)
                refine (Rule.prodLeft i (T.evar ()) (T.evar ()) (T.evar ()))
                >>+
                (* A, A[^], Q[^2] 1, Q[^3] 1, R[^4] 3 2, ...[^4] |- M[under_i (4 . ^5)] = N[under_i (3 . ^5)] : C[under_i (4 . ^5)] *)
                refine (Rule.exchange (i+2) 1 1)
                >>+
                (* A, Q[^1] 0, A[^2], Q[^3] 0, R[^4] 3 1, ...[^4] |- M[under_i (4 . ^5)] = N[under_i (2 . ^5)] : C[under_i (4 . ^5)] *)
                let
                   do (vars1, set1) = De.andthenp S.empty $ De.dest (i+4) p1 set
                   do (vars2, set2) = De.andthenp vars1 $ De.dest (i+3) p2 set1
                   val vars1_2 = S.append vars1 vars2
                   do (vars3, set3) = De.andthenp vars1_2 $ De.dest (i+2) p3 set2
                   val vars1_3 = S.append vars1_2 vars3
                   do (vars4, set4) = De.andthenp vars1_3 $ De.dest (i+1) p4 set3
                   val vars1_4 = S.append vars1_3 vars4
                   do (vars5, set5) = De.andthenp vars1_4 $ De.dest i p5 set4
                   val vars1_5 = S.append vars1_4 vars5

                   val x =
                      T.Elim (T.Const qintro2,
                              [T.App (T.Sub (a, T.Shift 5)),
                               T.App (T.Sub (q, T.Shift 5)),
                               T.App (T.Sub (r, T.Shift 5)),
                               T.App (T.Sub (hper, T.Shift 5)),
                               T.App (T.Var 4),
                               T.App (T.Var 3)])

                   val y =
                      T.Elim (T.Const qintro2,
                              [T.App (T.Sub (a, T.Shift 5)),
                               T.App (T.Sub (q, T.Shift 5)),
                               T.App (T.Sub (r, T.Shift 5)),
                               T.App (T.Sub (hper, T.Shift 5)),
                               T.App (T.Var 2),
                               T.App (T.Var 1)])
                in
                   (* ... |- M[under_i (4 . ^5)] = N[under_i (2 . ^5)] : C[under_i (4 . ^5)]
                           = M[under_i ((5 . ^6) o (2 . id))] = N[under_i ((0 . ^6) o (2 . id))] : C[under_i ((5 . ^6) o (2 . id))]
                           = (M[under_i (5 . ^6)] = N[under_i+1 (^5)] : C[under_i (5 . ^6)])[under_i (2 . id)]
                   *)
                   refine (Rule.unreduceAt i
                              (case copt of
                                  NONE =>
                                     T.apply2 Prim.eqtp
                                        (T.Sub (m, T.under i (T.Idot (5, T.Shift 6))))
                                        (T.Sub (n, T.underShift (i+1) 5))

                                | SOME c =>
                                     T.apply3 Prim.eq
                                        (T.Sub (c, T.under i (T.Idot (5, T.Shift 6))))
                                        (T.Sub (m, T.under i (T.Idot (5, T.Shift 6))))
                                        (T.Sub (n, T.underShift (i+1) 5)))
                              y
                              (R.trans [R.unfold, R.beta 6]))
                   >>+
                   (* ... |- M[under_i (4 . ^5)] = N[under_i (Y . ^5)] : C[under_i (4 . ^5)]
                           = M[under_i ((0 . ^6) o (4 . id))] = N[under_i ((Y[^] . ^6) o (4 . id))] : C[under_i ((0 . ^6) o (4 . id))]
                           = (M[under_i+1 (^5)] = N[under_i (Y[^] . ^6)] : C[under_i+1 (^5)])[under_i (4 . id)]
                   *)
                   refine (Rule.unreduceAt i
                              (case copt of
                                  NONE =>
                                     T.apply2 Prim.eqtp
                                        (T.Sub (m, T.underShift (i+1) 5))
                                        (T.Sub (n, T.under i (T.Dot (T.Sub (y, T.shift1), T.Shift 6))))

                                | SOME c =>
                                     T.apply3 Prim.eq
                                        (T.Sub (c, T.underShift (i+1) 5))
                                        (T.Sub (m, T.underShift (i+1) 5))
                                        (T.Sub (n, T.under i (T.Dot (T.Sub (y, T.shift1), T.Shift 6)))))
                              x
                              (R.trans [R.unfold, R.beta 6]))
                   >>+
                   (* ... |- M[under_i (X . ^5)] = N[under_i (Y . ^5)] : C[under_i (X . ^5)] *)
                   De.refoldHyps jud i 5
                      x
                      (R.trans [R.unfold, R.beta 6])
                   >>+
                   idtacM (vars1_5, De.Principal set5)
                end
                ]

         end
         

      fun destQuotient2 i pat set =
         (case pat of
             And [p1, p2] =>
                let
                   do (jud, _) = withgoal

                   val lv = T.evar ()
                in
                   (case J.hyp jud i of
                       J.Tm b =>
                          termCase b
                          /| $as (\quotient2\ ? ? ? ?) =>
                             \(fnc quot a q r hper =>
                                  (* quotient2 A Q R Hper, ... |- C *)
                                  refine (Rule.reduceHyp i (R.trans [R.unfold, R.beta 4]))
                                  >>+
                                  (* quotient A (fn . fn . Q[^2] 1 & Q[^2] 0 & R[^2] 1 0), ... |- C *)
                                  refine (Rule.quotientLeftRefl i (T.evar ()) (T.evar ()) (T.evar ()))
                                  >>> [
                                      (* A, A[^] |- Q[^2] 1 & Q[^2] 0 & R[^2] 1 0 : type *)
                                      relationIstype2 lv a q r,
                  
                                      (* quotient A (fn . fn . Q[^2] 1 & Q[^2] 0 & R[^2] 1 0), ... |- C : type *)
                                      refine (Rule.unreduceHyp i quot (R.trans [R.unfold, R.beta 4]))
                                      >>+
                                      (* quotient2 A Q R Hper, ... |- C : type *)
                                      let
                                         val (v, _) = varyAndBindSetPat set p1
                                      in
                                         idtacM (S.cons v S.empty, De.Auxiliary)
                                      end,
                  
                                      (* A (hidden), Q[^] 0 & Q[^] 0 & R[^] 0 0 (hidden), ...[^] |- C[under_i (^)] *)
                                      refine (Rule.assert
                                                 (T.apply1 Prim.isquash (T.app (T.Sub (q, T.Shift (i+2))) (T.Var (i+1))))
                                                 (T.evar ()))
                                      >>> [
                                          (* A (hidden), Q[^] 0 & Q[^] 0 & R[^] 0 0 (hidden), ...[^] |- isquash (Q[^i+2] i+1) *)
                                          refine (Rule.isquashIntro (T.evar ()))
                                          >>+
                                          (* A, Q[^] 0 & Q[^] 0 & R[^] 0 0, ...[^] |- Q[^i+2] i+1 *)
                                          refine (Rule.prodElim1 (T.evar ()) (T.evar ()))
                                          >>+
                                          (* A, Q[^] 0 & Q[^] 0 & R[^] 0 0, ...[^] |- Q[^i+2] i+1 & _ *)
                                          refine (Rule.hypothesis i) >> done,

                                          (* A (hidden), Q[^] 0 & Q[^] 0 & R[^] 0 0, ...[^], isquash (Q[^i+2] i+1) |- C[under_i (^) o ^] *)
                                          refine (Rule.weaken (i+1) 1)
                                          >>+
                                          (* A (hidden), ..., isquash (Q[^i+1] i) |- C[^] *)
                                          refine (Rule.isquashLeft 0 (T.evar ()) (T.evar ()))
                                          >>+
                                          (* A (hidden), ..., Q[^i+1] i (hidden) |- C[^] *)
                                          refine (Rule.exchange 0 1 i)
                                          >>+
                                          (* A (hidden), Q[^] 0 (hidden), ...[^] |- C[under_i (^)] *)
                                          let
                                             do (vars1, set1) = De.andthenp S.empty $ De.dest (i+1) p1 set
                                             do (vars2, set2) = De.andthenp vars1 $ De.dest i p2 set1
                                          in
                                             De.refold jud i 2
                                                (T.Elim (T.Const qintro2,
                                                         [T.App (T.Sub (a, T.Shift 2)),
                                                          T.App (T.Sub (q, T.Shift 2)),
                                                          T.App (T.Sub (r, T.Shift 2)),
                                                          T.App (T.Sub (hper, T.Shift 2)),
                                                          T.App (T.Var 1),
                                                          T.App (T.Var 0)]))
                                                (R.trans [R.unfold, R.beta 6])
                                             >>+
                                             idtacM (S.append vars1 vars2, De.Principal set2)
                                          end
                                          ]
                                      ])\

                           | _ =>
                             \(fnc =>
                                  fail "unexpected subject in destQuotient2")\
                          /

                     | _ =>
                          fail "this sort of hypothesis cannot be destructed")
                end

           | And [p1, p2, p3, p4, p5] =>
                let
                   do (jud, _) = withgoal
                in
                   (case J.hyp jud i of
                       J.Tm b =>
                          termCase b
                          /| \quotient2\ ? ? ? ? =>
                             \(fnc a q r hper =>
                                  goalCaseT
                                  /| \Prim.istp\ ? =>
                                     \(fnc c =>
                                          (* quotient2 A Q R Hper, ... |- C : type *)
                                          refine (Rule.reduce (R.trans [R.unfold, R.beta 1]))
                                          >>+
                                          (* quotient2 A Q R Hper, ... |- C = C : type *)
                                          destQuotient2Eq i p1 p2 p3 p4 p5 set a q r hper c c NONE jud)\

                                   | \Prim.eqtp\ ? ? =>
                                     \(fnc c d =>
                                          (* quotient2 A Q R Hper, ... |- C = D : type *)
                                          destQuotient2Eq i p1 p2 p3 p4 p5 set a q r hper c d NONE jud)\

                                   | \Prim.ov\ ? ? =>
                                     \(fnc c m =>
                                          (* quotient2 A Q R Hper, ... |- M : C *)
                                          refine (Rule.reduce (R.trans [R.unfold, R.beta 1]))
                                          >>+
                                          (* quotient2 A Q R Hper, ... |- M = M : C *)
                                          destQuotient2Eq i p1 p2 p3 p4 p5 set a q r hper m m (SOME c) jud)\
                                          
                                   | \Prim.eq\ ? ? ? =>
                                     \(fnc c m n =>
                                          (* quotient2 A R Hper, ... |- M = N : C *)
                                          destQuotient2Eq i p1 p2 p3 p4 p5 set a q r hper m n (SOME c) jud)\
                                          
                                   | _ =>
                                     \(fnc =>
                                          fail "conclusion has improper form for functional quotient elimination")\
                                  /)\

                           | _ =>
                             \(fnc =>
                                  fail "unexpected subject in destQuotient2")\
                          /

                     | _ =>
                          fail "this sort of hypothesis cannot be destructed")
                end

           | _ =>
                fail "quotient2 pattern expected")


      val () = H.insert De.destructTactics quotient1 destQuotient1
      val () = H.insert De.destructTactics quotient2 destQuotient2



      val quotient1Ext =
         goalCaseT
         /| \Prim.eq\ ($as (\quotient1\ _ _ _)) _ _ =>
            \(fnc q =>
                 (* M = N : quotient1 A R Hper *)
                 refine (Rule.reduce (R.within [1] (R.trans [R.unfold, R.beta 3])))
                 >>+
                 (* M = N : quotient A (fn . fn . R[^2] 1 0) *)
                 refine (Rule.quotientIntroEq (T.evar ()) (T.evar ()) (T.evar ()) (T.evar ()))
                 >>> [
                     (* quotient A (fn . fn . R[^2] 1 0) : type *)
                     refine (Rule.unreduce 
                                (T.apply1 Prim.istp q)
                                (R.within [1] (R.trans [R.unfold, R.beta 3])))
                     >>+
                     (* quotient1 A R Hper : type *)
                     idtacM Secondary,
                     
                     (* M : A *)
                     idtacM Secondary,

                     (* N : A *)
                     idtacM Secondary,

                     (* R M N *)
                     idtacM Primary,
                     ])\
         /


      val quotient2Ext =
         goalCaseT
         /| \Prim.eq\ ($as (\quotient2\ _ _ _ _)) _ _ =>
            \(fnc q =>
                 (* M = N : quotient2 A Q R Hper *)
                 refine (Rule.reduce (R.within [1] (R.trans [R.unfold, R.beta 4])))
                 >>+
                 (* M = N : quotient A (fn . fn . Q[^2] 1 & Q[^2] 0 & R[^2] 1 0) *)
                 refine (Rule.quotientIntroEq (T.evar ()) (T.evar ()) (T.evar ()) (T.evar ()))
                 >>> [
                     (* quotient A (fn . fn . Q[^2] 1 & Q[^2] 0 & R[^2] 1 0) : type *)
                     refine (Rule.unreduce 
                                (T.apply1 Prim.istp q)
                                (R.within [1] (R.trans [R.unfold, R.beta 4])))
                     >>+
                     (* quotient2 A Q R Hper : type *)
                     idtacM Secondary,
                     
                     (* M : A *)
                     idtacM Secondary,

                     (* N : A *)
                     idtacM Secondary,

                     (* Q M & Q N & R M N *)
                     refine (Rule.prodIntro (T.evar ()) (T.evar ()))
                     >>> [
                         (* Q M *)
                         idtacM Primary,

                         (* Q N & R M N *)
                         refine (Rule.prodIntro (T.evar ()) (T.evar ()))
                         >>> [
                             (* Q N *)
                             idtacM Primary,

                             (* R M N *)
                             idtacM Primary,
                             ]
                         ]
                     ])\
         /


      val () = H.insert EqualityTacticInternal.extensionalityTactics quotient1 quotient1Ext
      val () = H.insert EqualityTacticInternal.extensionalityTactics quotient2 quotient2Ext

   end
