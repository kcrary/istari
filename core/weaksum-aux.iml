
structure ParseWeaksum =
   struct

      structure R = CheckpointedRef
      structure T = ETerm

      val weaksum : Constant.constant R.dest = R.dest ()
      val unpack : Constant.constant R.dest = R.dest ()
      val unpackt : Constant.constant R.dest = R.dest ()

      fun parseWeaksum x a b = T.apply2 (R.read weaksum) (ParseTerm.instance a) (T.lam x b)
      fun parseWeaksums al b = foldr (fns (x, a) b => parseWeaksum x a b) b al

      fun parseUnpack x y m n = T.apply5 (R.read unpack) T.evar T.evar T.evar m (T.lam (SOME x) (T.lam (SOME y) n))
      fun parseUnpackt x y m b = T.apply4 (R.read unpackt) T.evar T.evar m (T.lam (SOME x) (T.lam (SOME y) b))

   end


grammardef Weaksum

   rule Term(0) ::= "weaksum" Bindings "." Term(0) => ParseWeaksum.parseWeaksums
   rule Term(0) ::= "unpack" "(" Ident "," Ident ")" "=" Term(1) "in" Term(0) => ParseWeaksum.parseUnpack
   rule Term(0) ::= "unpackt" "(" Ident "," Ident ")" "=" Term(1) "in" Term(0) => ParseWeaksum.parseUnpackt

   reserved "weaksum" "unpack" "unpackt" : Indent

end


functor AfterWeaksum () :> sig end =
   struct

      val weaksum = resolveGlobal /Weaksum.weaksum/

      val () = CheckpointedRef.write ParseWeaksum.weaksum weaksum
      val () = UnparseTerm.registerBinder weaksum "weaksum"

   end


functor AfterWeaksumTools () :> sig end =
   struct

      structure U = Show.Unparsing

      val weaksum = resolveGlobal /Weaksum.weaksum/
      val pack = resolveGlobal /Weaksum.pack/
      val unpack = resolveGlobal /Weaksum.unpack/
      val unpackt = resolveGlobal /Weaksum.unpackt/
      val weaksum_subtype = resolveGlobal /Weaksum.weaksum_subtype/
      val weaksum_eeqtp = resolveGlobal /Weaksum.weaksum_eeqtp/

      val () =
         Constant2Table.insert TypecheckTables.subtypeTactics (weaksum, weaksum)
            (TypecheckTables.unhideForSubtype >>+ Backchain.applyRaw /\Term.Const weaksum_subtype\/)


      val () = CheckpointedRef.write ParseWeaksum.unpack unpack
      val () = CheckpointedRef.write ParseWeaksum.unpackt unpackt
      
      val () =
         UnparseTerm.register unpack 5 0
         (U.wrap
             (U.ifNoImplicits (U.apply5 unpack U.wild U.wild U.wild U.show (U.lam $ U.lam $ U.show)))
             (fn ((), (), (), m, (x, (y, b))) => 
                 UnparseTerm.letContent 
                    "unpack " 
                    (U.append [U.string "(", U.string x, U.string ", ", U.string y, U.string ")"])
                    m b))

      val () =
         UnparseTerm.register unpackt 4 0
         (U.wrap
             (U.ifNoImplicits (U.apply4 unpackt U.wild U.wild U.show (U.lam $ U.lam $ U.show)))
             (fn ((), (), m, (x, (y, b))) => 
                 UnparseTerm.letContent 
                    "unpackt " 
                    (U.append [U.string "(", U.string x, U.string ", ", U.string y, U.string ")"])
                    m b))


      structure T = Term
      structure J = Judgement
      structure R = Reduction
      structure D = DestructInternal
      structure S = Seq

      open Tactic
      open RefineTactic



      val unfoldWeaksum =
         R.compat [R.trans [R.unfold, R.beta 2, R.within [2, 0] (R.beta 1)],
                   R.trans [R.unfold, R.beta 2, R.within [2, 0] (R.beta 1)]]

      fun compatWeaksumEeqtp0 a a' tac =
         goalCaseT
         /
         \Prim.eeqtp\ _ (\weaksum\ _ (fn ? . _)) =>
         \(fnc binder =>
              let
                 do (_, dir) = withgoal
                 val dir' = Directory.bindVary dir binder
              in
                 (* tac :: A <:> A'
                    weaksum A . B <:> weaksum A' . B
                 *)
                 refine (Rule.reduce unfoldWeaksum)
                 >>+
                 (* union A . B <:> union A' B *)
                 refine (Rule.unionEeq (T.evar ()) (T.evar ()) (T.evar ()) (T.evar ()))
                 >>> [
                     (* A <:> A' *)
                     tac,
        
                     (* A |- B <:> B *)
                     refine (Rule.eeqtpRefl (T.evar ()))
                     >>+
                     (* A |- B : type *)
                     chdir dir' >>+ idtacM Secondary
                     ]
              end)\
         /


      val () =
         RewriteInternal.CICTable.insert RewriteInternal.compatibilityTable
            (weaksum, 0, Prim.eeqtp)
            (RewriteTypes.General Prim.eeqtp, true, 0, compatWeaksumEeqtp0)


      fun compatWeaksumEeqtp1 b b' tac =
         goalCaseT
         /
         \Prim.eeqtp\ _ (\weaksum\ _ (fn ? . _)) =>
         \(fnc binder =>
              let
                 do (_, dir) = withgoal
                 val dir' = Directory.bindVary dir binder
              in
                 (* tac :: B <:> B'
                    weaksum A . B <:> weaksum A . B'
                 *)
                 refine (Rule.reduce unfoldWeaksum)
                 >>+
                 (* union A . B <:> union A B' *)
                 refine (Rule.unionEeq (T.evar ()) (T.evar ()) (T.evar ()) (T.evar ()))
                 >>> [
                     (* A <:> A *)
                     refine (Rule.eeqtpRefl (T.evar ()))
                     >>+
                     (* A : type *)
                     idtacM Secondary,
        
                     (* A |- B <:> B' *)
                     chdir dir' >>+ tac
                     ]
              end)\
         /


      val () =
         RewriteInternal.CICTable.insert RewriteInternal.compatibilityTable
            (weaksum, 1, Prim.eeqtp)
            (RewriteTypes.General Prim.eeqtp, true, 1, compatWeaksumEeqtp1)


      fun destWeaksum i pat set =
         (case pat of
             IntroPattern.And [p1, p2] =>
                (cut $ setFailure "hypotheses depend on weaksum hypothesis being destructed" $
                 refine (Rule.exchange 0 i 1))
                >>+
                let
                   do (jud, _) = withgoal
                   val c = J.concl jud
                in
                   hypCaseT (J.hyp jud 0)
                   /| $tm \weaksum\ ? (fn . ?) =>
                      \(fnc a b =>
                           (* ..., weaksum A . B |- C *)
                           refine (Rule.reduceHyp 0 (R.trans [R.unfold, R.beta 2]))
                           >>+
                           (* ..., union A . B |- C
                                                = C[0 . ^2][0 . id]
                           *)
                           refine (Rule.unionElimDep (T.Sub (a, T.Shift 1)) (T.Sub (b, T.underShift 1 1)) (T.Sub (c, T.underShift 1 1)) (T.Var 0))
                           >>> 
                              [
                              (* ..., union A . B, A[^], B[0 . ^2] |- C[0 . ^2][0 . ^2]
                                                                    = C[0 . ^3]
                              *)
                              refine (Rule.weaken 2 1)
                              >>+
                              (* ..., A, B |- C[0 . ^2] *)
                              D.refold jud 0 2 
                                 (T.apply4 pack 
                                     (T.Sub (a, T.Shift 2))
                                     (T.Lam (NONE, T.Sub (b, T.Idot (0, T.Shift 3))))
                                     (T.Var 1) T.zero)
                                 (R.trans [R.unfold, R.beta 4])
                              >>+
                              (* ..., A, B |- C[pack A[^2] (fn . B[0 . ^3]) 1 0 . ^2] *)
                              refine (Rule.exchange 0 2 i)
                              >>+
                              let
                                 do (vars1, set1) = D.andthenp S.empty $ D.dest (i+1) p1 set
                                 do (vars2, set2) = D.andthenp vars1 $ D.dest i p2 set1
                              in
                                 idtacM (S.append vars1 vars2, D.Principal set2)
                              end,

                              (* ..., union A . B |- 0 : union A[^] . B[0 . ^2] *)
                              refine (Rule.hypothesisOf 0) >> done
                              ])\
   
                    | _ =>
                      \(fnc =>
                           fail "improper hypothesis for weaksum destruction")\
                   /
                end

           | _ =>
                fail "weaksum pattern expected")

      val () = ConstantTable.insert D.destructTactics weaksum destWeaksum

   end
