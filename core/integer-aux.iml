
structure ParseInteger =
   struct

      structure R = CheckpointedRef
      structure T = ETerm
      type constant = Constant.constant

      val minusz : constant R.dest = R.dest ()
      val leqz : constant R.dest = R.dest ()
      val ltz : constant R.dest = R.dest ()
      val ltzb : constant R.dest = R.dest ()
      val neqzb : constant R.dest = R.dest ()

      fun parsePlus m n = T.apply2 Prim.plusz m n
      fun parseMinus m n = T.apply2 (R.read minusz) m n
      fun parseTimes m n = T.apply2 Prim.timesz m n
      fun parseNeg m = T.apply1 Prim.negz m
      fun parseLeq m n = T.apply2 (R.read leqz) m n
      fun parseLt m n = T.apply2 (R.read ltz) m n
      fun parseEqzb m n = T.apply2 Prim.eqzb m n
      fun parseLeqzb m n = T.apply2 Prim.leqzb m n
      fun parseLtzb m n = T.apply2 (R.read ltzb) m n
      fun parseNeqzb m n = T.apply2 (R.read neqzb) m n

   end


grammardef Integer 

   open ParseInteger

   rule Term(30)  ::= Term(31) "<z=" Term(31) => parseLeq
   rule Term(30)  ::= Term(31) "<z" Term(31) => parseLt

   rule Term(40)  ::= Term(40) "=z?" Term(41) => parseEqzb
   rule Term(40)  ::= Term(40) "<z=?" Term(41) => parseLeqzb
   rule Term(40)  ::= Term(40) "<z?" Term(41) => parseLtzb
   rule Term(40)  ::= Term(40) "!z=?" Term(41) => parseNeqzb

   rule Term(50)  ::= Term(50) "+z" Term(51) => parsePlus
   rule Term(50)  ::= Term(50) "-z" Term(51) => parseMinus

   rule Term(60)  ::= Term(60) "*z" Term(61) => parseTimes

   rule Term(90)  ::= "~z" Term(91) => parseNeg

end


grammardef ArithmeticInteger 

   open ParseInteger

   rule Term(30)  ::= Term(31) "<=" Term(31) => parseLeq
   rule Term(30)  ::= Term(31) "<" Term(31) => parseLt

   rule Term(40)  ::= Term(40) "=?" Term(41) => parseEqzb
   rule Term(40)  ::= Term(40) "<=?" Term(41) => parseLeqzb
   rule Term(40)  ::= Term(40) "<?" Term(41) => parseLtzb
   rule Term(40)  ::= Term(40) "!=?" Term(41) => parseNeqzb

   rule Term(50)  ::= Term(50) "+" Term(51) => parsePlus
   rule Term(50)  ::= Term(50) "-" Term(51) => parseMinus

   rule Term(60)  ::= Term(60) "*" Term(61) => parseTimes

   rule Term(90)  ::= "~" Term(91) => parseNeg

   rule Term(100) ::= NUMBER => ParseTerm.integer
   rule Term(100) ::= NNUMBER => ParseTerm.integer

end


grammaron Integer


structure RegisterInteger =
   struct

      structure CR = CheckpointedRef
      structure U = Show.Unparsing

      val integerSym = Symbol.fromValue "integer"

      fun register const prec lprec rprec strpref str =
         let
            val unp =
               U.wrap
                 (U.apply2 const U.show U.show)
                 (fn (a, b) =>
                     U.append [a lprec,
                               U.break 1, 
                               
                               U.string
                                  (if Symbol.eq (CR.deref Show.arithmetic, integerSym) then
                                      strpref
                                   else
                                      str),

                               b rprec])
         in
            ConstantTable.insert U.unparsingTable const (2, prec, ref true, unp)
         end

   end


functor AfterLtz () :> sig end =
   struct

      structure CR = CheckpointedRef
      structure U = Show.Unparsing

      val leqz = resolveGlobal /Integer.leqz/
      val ltz = resolveGlobal /Integer.ltz/
      val minusz = resolveGlobal /Integer.minusz/
      val plusz = Prim.plusz
      val timesz = Prim.timesz
      val negz = Prim.negz


      val () = CR.write ParseInteger.leqz leqz
      val () = CR.write ParseInteger.ltz ltz
      val () = CR.write ParseInteger.minusz minusz


      val () = RegisterInteger.register leqz 30 31 31 "<= " "<z= "
      val () = RegisterInteger.register ltz 30 31 31 "< " "<z "
      val () = RegisterInteger.register plusz 50 50 51 "+ " "+z "
      val () = RegisterInteger.register minusz 50 50 51 "- " "-z "
      val () = RegisterInteger.register timesz 60 60 61 "* " "*z "

      val integerSym = Symbol.fromValue "integer"

      val () =
         let
            val unp =
               U.wrap
                  (U.apply1 negz U.show)
                  (fn a => 
                      U.append
                         [
                         U.string
                            (if Symbol.eq (CR.deref Show.arithmetic, integerSym) then
                                "~ "
                             else
                                "~z "),

                         a 91
                         ])
         in
            ConstantTable.insert U.unparsingTable negz (1, 90, ref true, unp)
         end
            
   end


functor AfterLeqzInhabitant () :> sig end =
   struct

      structure T = Term

      val leqz = resolveGlobal /Integer.leqz/
      val ltz = resolveGlobal /Integer.ltz/
      val leqz_inhabitant = resolveGlobal /Integer.leqz_inhabitant/
      val ltz_inhabitant = resolveGlobal /Integer.ltz_inhabitant/

      val () =
         ConstantTable.insert TypecheckTables.trivialIntroTactics leqz
            (Backchain.applyPriority /\T.Const leqz_inhabitant\/)

      val () =
         ConstantTable.insert TypecheckTables.trivialIntroTactics ltz
            (Backchain.applyPriority /\T.Const ltz_inhabitant\/)
   
   end


functor AfterIstrueNeqzb () :> sig end =
   struct

      structure CR = CheckpointedRef

      val ltzb = resolveGlobal /Integer.ltzb/
      val neqzb = resolveGlobal /Integer.neqzb/
      val istrue_eqzb = resolveGlobal /Integer.istrue_eqzb/
      val istrue_leqzb = resolveGlobal /Integer.istrue_leqzb/
      val istrue_ltzb = resolveGlobal /Integer.istrue_ltzb/
      val istrue_neqzb = resolveGlobal /Integer.istrue_neqzb/
      val eqzb = Prim.eqzb
      val leqzb = Prim.leqzb


      val () = CR.write ParseInteger.ltzb ltzb
      val () = CR.write ParseInteger.neqzb neqzb

      val () = RegisterInteger.register eqzb 40 40 41 "=? " "=z? "
      val () = RegisterInteger.register leqzb 40 40 41 "<=? " "<z=? "
      val () = RegisterInteger.register ltzb 40 40 41 "<? " "<z? "
      val () = RegisterInteger.register neqzb 40 40 41 "!=? " "!z=? "


      val () =
         ConstantTable.insert BoolTactic.booleanTests eqzb istrue_eqzb

      val () =
         ConstantTable.insert BoolTactic.booleanTests leqzb istrue_leqzb

      val () =
         ConstantTable.insert BoolTactic.booleanTests ltzb istrue_ltzb

      val () =
         ConstantTable.insert BoolTactic.booleanTests neqzb istrue_neqzb

   end


functor AfterIntegerIter () :> sig end =
   struct

      structure J = Judgement
      structure T = Term
      
      open Tactic
      open RefineTactic

      val smaller_well_founded = resolveGlobal /Integer.smaller_well_founded/
      val integer_iter = resolveGlobal /Integer.integer_iter/

      val integerInduction =
         let
            do (jud, dir) = withgoal

            do (b, tac) =
               BackchainInternal.soMain
                  (J.context jud)
                  (T.apply1 smaller_well_founded T.zero)
                  (fn msg => fail msg)
         in
            refine (Rule.assert b (T.evar ()))
            >>> [
                tac,

                chdir (Directory.bind0 dir)
                >>
                InductionInternal.accInduction
                ]
         end

      val () = ConstantTable.insert InductionInternal.inductionTactics Prim.integer integerInduction

      val () =
         ConstantTable.insert InductionInternal.iterators Prim.integer
            (integer_iter, 0, 0)

   end


functor AfterIntegerAll () :> sig end =
   struct

      structure E = ETerm
      structure CR = CheckpointedRef
      structure T = Term
      structure B = BackchainInternal
      structure H = ConstantTable
      structure T = Term
      
      val leqz = resolveGlobal /Integer.leqz/
      val ltz = resolveGlobal /Integer.ltz/
      val minusz = resolveGlobal /Integer.minusz/
      val leqz_refl = resolveGlobal /Integer.leqz_refl/
      val leqz_trans = resolveGlobal /Integer.leqz_trans/
      val plusz_leqz = resolveGlobal /Integer.plusz_leqz/
      val negz_leqz = resolveGlobal /Integer.negz_leqz/
      val leqz_implication = resolveGlobal /Integer.leqz_implication/
      val integer_total = resolveGlobal /Integer.integer_total/
      val plusz = Prim.plusz
      val negz = Prim.negz
      val timesz = Prim.timesz


      val () =
         H.insert EqualityTacticInternal.reflexivityTactics leqz
         (B.witnessPriority /\T.Const leqz_refl\ _/)
      
      val () =
         H.insert EqualityTacticInternal.transitivityTactics leqz
         (fn n => B.witnessPriority /\T.Const leqz_trans\ _ \n\ _ __ __/)

      val () =
         List.app 
            (fn (const, i, rconst, rconst', cov, tacfn) => 
               RewriteInternal.CICTable.insert 
                  RewriteInternal.compatibilityTable 
                  (const, i, rconst)
                  (RewriteTypes.General rconst', cov, 0, (fns _ _ tac => tacfn tac)))
            [
            (plusz, 0, leqz, leqz, true,
             andthenOn 0 (B.witnessPriority /\T.Const plusz_leqz\ _ _ _ _ __ __/)),
          
            (plusz, 1, leqz, leqz, true,
             andthenOn 1 (B.witnessPriority /\T.Const plusz_leqz\ _ _ _ _ __ __/)),
          
            (negz, 0, leqz, leqz, false,
             andthenOn 0 (B.witnessPriority /\T.Const negz_leqz\ _ _ __/)),

            (leqz, 0, leqz, Prim.arrow, false,
             andthenOn 0 (B.witnessPriority /\T.Const leqz_implication\ _ _ _ _ __ __/)),
          
            (leqz, 1, leqz, Prim.arrow, true,
             andthenOn 1 (B.witnessPriority /\T.Const leqz_implication\ _ _ _ _ __ __/)),
            ]

      val () =
         H.insert TypecheckTables.totalityTactics Prim.integer
         (exact /\T.Const integer_total\/)

   end
