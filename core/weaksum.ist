
File.import "kindlike-load.iml";
File.import "irrelevance-load.iml";
File.import "misc-load.iml";

File.import "weaksum-aux.iml";
grammaron Weaksum;

beginModule "Weaksum";


define /weaksum a b/
/
  union (x : a) . b x
//
  intersect i . forall (a : U i) . (a -> U i) -> U i
/;

unfold /weaksum/.
typecheck.
qed ();



structure Nothing = AfterWeaksum ();



define /pack {a} b x y/
/
  y
//
  intersect i . forall (a : U i) (b : a -> U i) .
    forall (x : a) . b x -> weaksum (x : a) . b x
/;

unfold /pack/.
unfold /weaksum/.
typecheck.
qed ();

recordIrrelevance /pack/ [0, 1, 2];



define /unpack {a b c} y f/
/
  f Irrelevance.unavailable y
//
  intersect i . 
  forall (a : U i) (b : a -> U i) (c : U i) .
    (weaksum (x : a) . b x) 
    -> (parametric (x : a) . b x -> c)
    -> c
/;

unfold /unpack/.
unfold /weaksum/.
inference.
introOf /i a b c y f/.
destruct /y/ /x y/.
unhide.
reduce //.
fold /f Ap x/.
typecheck.
qed ();

recordIrrelevance /unpack/ [0, 1, 2];



reductions
/
  unpack _ _ _ (pack _ _ x y) f --> f Ap x y ;

  unfolding unpack pack paramapp
/;



lemma "weaksum_subtype"
/
  forall i (a a' : U i) (b : a -> U i) (b' : a' -> U i) .
    a <: a'
    -> (forall (x : a) . b x <: b' x)
    -> (weaksum (x : a) . b x) <: (weaksum (x : a') . b' x)
/;

inference.
intro /i a a' b b' Ha Hb/.
intro /y/.
destruct /y/ /x y/.  (* weaksum's destructor is not installed yet *)
unhide.
fold /`pack a' (fn x' . b' x') x y/.
typecheck.
qed ();



lemma "weaksum_eeqtp"
/
  forall i (a a' : U i) (b : a -> U i) (b' : a' -> U i) .
    a <:> a'
    -> (forall (x : a) . b x <:> b' x)
    -> (weaksum (x : a) . b x) <:> (weaksum (x : a') . b' x)
/;

inference.
intro /i a a' b b' Ha/.
so /Ha/ /Hsuba Hsuba'/.
intro /Hb/.
unfold /eeqtp/.
split.
  {
  apply /weaksum_subtype/ >> auto.
  intro /x/.
  exact /Hb x #1/.
  }

  {
  apply /weaksum_subtype/ >> auto.
  intro /x/.
  exact /Hb x #2/.
  }
qed ();



define /unpackt {a b} t u/
/
  weaksum (x : a) . exists (y : b x) .
    `pack a b x y = u : (weaksum (x : a) . b x)
    & t x y
//
  intersect i .
  forall (a : U i) (b : a -> U i) .
    (forall (x : a) . b x -> U i)
    -> (weaksum (x : a) . b x)
    -> U i
/;

unfold /unpackt/.
typecheck.
qed ();



define /unpackt_intro {a b c} x y z/
/
  pack
    (fn x' . exists (y' : b x') . `pack a b x' y' = `pack a b x y : (weaksum (x : a) . b x) & c x' y')
    x
    (y, (), z)
//
  intersect i .
  forall 
    (a : U i) (b : a -> U i) (c : forall (x : a) . b x -> U i)
    (x : a) (y : b x) .
      c x y -> `unpackt a b c (`pack a b x y)
/;

unfold /unpackt_intro/.
unfold /unpackt/.
typecheck.
qed ();

recordIrrelevance /unpackt_intro/ [0, 1, 2, 3];



define /unpackt_elim {a b c d} z w f/
/
  `unpack a 
    (fn x . exists (y : b x) . `pack a b x y = z : (weaksum (x : a) . b x) & c x y)
    (d z)
    w
    (fn x w' . f Ap x (w' #1) (w' #2 #2))
//
  intersect i .
  forall 
    (a : U i) (b : a -> U i) (c : forall (x : a) . b x -> U i)
    (d : (weaksum (x : a) . b x) -> U i)
    (z : weaksum (x : a) . b x) .
      `unpackt a b c z
      -> (parametric (x : a) . forall (y : b x) . c x y -> d (`pack a b x y))
      -> d z
/;

unfold /unpackt_elim/.
unfold /unpackt/.
inference.
introOf /i a b c d z w f/.
reduce //.
typecheck.
reintro /x y/.
reduce /y/.
exact /y #2 #1/.
qed ();



reductions
/
  unpackt_elim _ _ _ _ _ (unpackt_intro _ _ _ x y z) f --> f Ap x y z ;

  unfolding unpackt_elim unpackt_intro paramapp
/;



lemma "iexists_weaksum"
/
  forall i (a : Kind i) (b : a -> U i) .
    (iexists (x : a) . b x) <:> (weaksum (x : a) . b x)
/;

inference.
intro /i a b/.
unfold /weaksum/.
reduce //.
unfold /eeqtp/.
split.
  {
  intro /(x y)/.
  typecheck.
  }

  {
  intro /(x y)/.
  typecheck.
  }
qed ();



lemma "weaksum_kindlike"
/
  forall i (A : U (1 + i)) .
    Kindlike.kindlike i A
    -> exists (Q : (A -> U i) -> U i) .
         forall (B : A -> U i) . Q B <:> (weaksum (x : A) . B x)
/;

inference.
intro /i A Hkindlike/.
so /Kindlike.exists_kindlike _ _ Hkindlike/ /Q HQ/.
exists /Q/.
unfold /weaksum/.
hyp /HQ/.
qed ();


endModule ();
