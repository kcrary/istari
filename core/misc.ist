
beginModule "Misc";


(* Miscellaneous nonpervasive constants *)

(* used for placeholder terms *)
aliasExport /bogus/ Prim.bogus;

(* used in the rewriter *)
aliasExport /entailment/ Prim.entailment;

(* the extract for trustme *)
aliasExport /magic/ Prim.magic;

(* substituted for variables going out of scope *)
aliasExport /orphan/ Prim.orphan;

(* arises in determining whether mu types are well-formed *)
aliasExport /positive/ Prim.positive;
aliasExport /negative/ Prim.negative;



(* Nonsense *)

aliasExport /nonsense/ Prim.nonsense;


lemma "nonsense_type"
/
  nonsense : U 0
/;

unfold /nonsense/.
typecheck.
qed ();
recordTyping "nonsense_type";



lemma "nonsense_subtype"
/
  forall i (a : U i) . a <: nonsense
/;

inference.
intro /i a x/.
unfold /nonsense/.
RuleTactic.guardIntroOf >> auto.
destruct /0/ /0/.
qed ();



(* Extensional equality from subtyping *)

lemma "eeqtp_compat_covariant"
/
  forall i (t : U i -> U i) .
    (forall (a a' : U i) . a <: a' -> t a <: t a')
    -> forall (a a' : U i) . a <:> a' -> t a <:> t a'
/;

inference.
intro /i t Hcov a a' Ha/.
unfold /eeqtp in Ha in concl/.
split.
  {
  apply /Hcov/.
  apply /Ha/.
  }

  {
  apply /Hcov/.
  apply /Ha/.
  }
qed ();



lemma "eeqtp_compat_contravariant"
/
  forall i (t : U i -> U i) .
    (forall (a a' : U i) . a <: a' -> t a' <: t a)
    -> forall (a a' : U i) . a <:> a' -> t a <:> t a'
/;

inference.
intro /i t Hcontra a a' Ha/.
unfold /eeqtp in Ha in concl/.
split.
  {
  apply /Hcontra/.
  apply /Ha/.
  }

  {
  apply /Hcontra/.
  apply /Ha/.
  }
qed ();



endModule ();
