
structure ParseNat =
   struct

      structure T = ETerm
      structure R = CheckpointedRef
      type constant = Constant.constant

      val leq : constant R.dest = R.dest ()
      val lt : constant R.dest = R.dest ()
      val minus : constant R.dest = R.dest ()
      val ltb : constant R.dest = R.dest ()
      val neqb : constant R.dest = R.dest ()

      fun parseLeq m n = T.apply2 (R.read leq) m n
      fun parseLt m n = T.apply2 (R.read lt) m n
      fun parsePlus m n = T.apply2 Prim.plus m n
      fun parseMinus m n = T.apply2 (R.read minus) m n
      fun parseTimes m n = T.apply2 Prim.times m n
      fun parseEqb m n = T.apply2 Prim.eqb m n
      fun parseLeqb m n = T.apply2 Prim.leqb m n
      fun parseLtb m n = T.apply2 (R.read ltb) m n
      fun parseNeqb m n = T.apply2 (R.read neqb) m n

   end


grammardef Nat 

   open ParseNat

   rule Term(30)  ::= Term(31) "<n=" Term(31) => parseLeq
   rule Term(30)  ::= Term(31) "<n" Term(31) => parseLt

   rule Term(40)  ::= Term(40) "=n?" Term(41) => parseEqb
   rule Term(40)  ::= Term(40) "<n=?" Term(41) => parseLeqb
   rule Term(40)  ::= Term(40) "<n?" Term(41) => parseLtb
   rule Term(40)  ::= Term(40) "!=n?" Term(41) => parseNeqb

   rule Term(50)  ::= Term(50) "+n" Term(51) => parsePlus
   rule Term(50)  ::= Term(50) "-n" Term(51) => parseMinus

   rule Term(60)  ::= Term(60) "*n" Term(61) => parseTimes

end


grammardef ArithmeticNat 

   open ParseNat

   rule Term(30)  ::= Term(31) "<=" Term(31) => parseLeq
   rule Term(30)  ::= Term(31) "<" Term(31) => parseLt

   rule Term(40)  ::= Term(40) "=?" Term(41) => parseEqb
   rule Term(40)  ::= Term(40) "<=?" Term(41) => parseLeqb
   rule Term(40)  ::= Term(40) "<?" Term(41) => parseLtb
   rule Term(40)  ::= Term(40) "!=?" Term(41) => parseNeqb

   rule Term(50)  ::= Term(50) "+" Term(51) => parsePlus
   rule Term(50)  ::= Term(50) "-" Term(51) => parseMinus

   rule Term(60)  ::= Term(60) "*" Term(61) => parseTimes

   rule Term(100) ::= NUMBER => ParseTerm.nat

end


grammaron Nat
grammaron ArithmeticNat


structure RegisterNat =
   struct

      structure CR = CheckpointedRef
      structure U = Show.Unparsing

      val natSym = Symbol.fromValue "nat"

      fun register const prec lprec rprec strpref str =
         let
            val unp =
               U.wrap
                 (U.apply2 const U.show U.show)
                 (fn (a, b) =>
                     U.append [a lprec,
                               U.break 1, 
                               
                               U.string
                                  (if Symbol.eq (CR.deref Show.arithmetic, natSym) then
                                      strpref
                                   else
                                      str),

                               b rprec])
         in
            ConstantTable.insert U.unparsingTable const (2, prec, ref true, unp)
         end

   end



functor AfterNat () :>
   sig
      val natPrimInduction : Tactic.tactic
   end
   =
   struct

      structure D = Directory
      structure J = Judgement
      structure R = Reduction
      structure T = Term
      structure TC = Typecheck

      open Tactic
      open RefineTactic
      open CasePervasive


      val nat_iter = resolveGlobal /Nat.nat_iter/;

      val () = Constant.setOpacity Prim.nat Constant.HARD

      val unrollNat =
         R.user $
         R.new Prim.nat [] 0
            (T.apply1 Prim.mu (T.Lam (NONE, T.apply2 Prim.sum (T.Const Prim.unit) (T.Var 0))))
            R.unfold
            R.refl

      val () = Constant.setOpacity Prim.nat Constant.OPAQUE



      val natPrimInductionPriority =
         let
            do (jud, dir) = withgoal

            val c = J.concl jud
            val dir' = D.tl dir
         in
            goalHypnCaseT 0
            /| $tm \Prim.nat\ =>
               \fnc =>
                   (* nat |- C *)
                   refine (Rule.reduceHyp 0 unrollNat)
                   >>
                   (* mu . unit % 0 |- C = C[0 . ^2][0 . id] *)
                   refine (Rule.muInd
                              (T.apply2 Prim.sum (T.Const Prim.unit) T.zero)
                              (T.Sub (c, T.Idot (0, T.Shift 2)))
                              T.zero)
                   >>> [
                       (* blahblah, Type |- unit & 0 : Type *)
                       refine (Rule.sumForm (T.evar ()) (T.evar ()))
                       >>> [
                           (* blah, Type |- unit : Type *)
                           refine Rule.unitForm >> done,
       
                           (* blah, Type |- 0 : Type *)
                           refine (Rule.hypothesisOfTp 0) >> done
                           ],
                       
                       refine Rule.checkPositive >> done,
       
                       (* blahblah,
                          Type,
                          (unit % 0),
                          1 <: mu . unit % 0,
                          forall 2 . C[0 . ^5] |- C[2 . ^5]
                       *)
                       refine (Rule.weaken 4 1)
                       >>
                       (* Type,
                          (unit % 0),
                          1 <: mu . unit % 0,
                          forall 2 . C[0 . ^4] |- C[2 . ^4]
                       *)
                       refine (Rule.sumLeft 2 (T.evar ()) (T.evar ()) (T.evar ()))
                       >>> [
                           (* Type, unit, <sub>, <ih> |- C[inl 2 . ^4] *)
                           refine (Rule.unitLeft 2 (T.evar ()))
                           >>
                           (* Type, <sub>, <ih> |- C[inl () . ^3] *)
                           refine (Rule.weaken 0 3)
                           >>
                           (* |- C[inl () . id] *)
                           refine (Rule.unreduceAt 0 c
                                      (T.Const Prim.zero)
                                      R.unfold)
                           >>
                           (* |- C[zero . id] *)
                           chdir dir' >> idtacM Primary,
       
                           (* Type, 0, <sub>, <ih> |- C[inr 2 . ^4]
                                                    = C[0 . ^5][inr 2 . id]
                           *)
                           refine (Rule.unreduceAt 0 
                                      (T.Sub (c, T.Idot (0, T.Shift 5)))
                                      (T.apply1 Prim.succ (T.Var 2))
                                      (R.trans [R.unfold, R.beta 1]))
                           >>
                           (* Type, 0, <sub>, <ih> |- C[0 . ^5][succ 2 . id]
                                                    = C[succ 2 . ^4]
                           *)
                           refine (Rule.unreduceHyp 1
                                      (T.apply2 Prim.subtype
                                          (T.Var 1)
                                          (T.Const Prim.nat))
                                      (R.within [2] unrollNat))
                           >>
                           chdir (Directory.bindhs dir' [NONE, NONE, NONE, NONE])
                           >>
                           idtacM Primary
                           ],
       
                       (* mu . unit % 0 |- 0 : (mu . unit % 0) *)
                       refine (Rule.hypothesisOf 0) >> done
                       ]\

             | _ =>
               \fnc => fail "type error in nat induction"\
            /
         end

      val natPrimInduction = TC.withTypecheckSnd natPrimInductionPriority


      (* Not usable until after nat_iter_type, but we can put it in the table now. *)

      val () =
         ConstantTable.insert InductionInternal.iterators Prim.nat 
            (nat_iter, 0, 0)

   end



functor AfterLeq () :> sig end =
   struct

      structure CR = CheckpointedRef

      val leq = resolveGlobal /Nat.leq/
      val lt = resolveGlobal /Nat.lt/

      val () = CR.write ParseNat.leq leq
      val () = CR.write ParseNat.lt lt

      val () = RegisterNat.register leq 30 31 31 "<= " "<n= "
      val () = RegisterNat.register lt 30 31 31 "< " "<n "

   end



functor AfterLeqInhabitant () :> sig end =
   struct

      structure T = Term

      val leq = resolveGlobal /Nat.leq/
      val lt = resolveGlobal /Nat.lt/
      val leq_inhabitant = resolveGlobal /Nat.leq_inhabitant/
      val lt_inhabitant = resolveGlobal /Nat.lt_inhabitant/

      val () =
         ConstantTable.insert TypecheckTables.trivialIntroTactics leq
            (Backchain.applyPriority /\T.Const leq_inhabitant\/)

      val () =
         ConstantTable.insert TypecheckTables.trivialIntroTactics lt
            (Backchain.applyPriority /\T.Const lt_inhabitant\/)

   end



functor AfterLtWellFounded () :> sig end =
   struct

      structure J = Judgement
      structure T = Term
      
      open Tactic
      open RefineTactic

      val lt_well_founded = resolveGlobal /Nat.lt_well_founded/

      val natInduction =
         let
            do (jud, dir) = withgoal

            do (b, tac) =
               BackchainInternal.soMain
                  (J.context jud)
                  (T.apply1 lt_well_founded T.zero)
                  (fn msg => fail msg)
         in
            refine (Rule.assert b (T.evar ()))
            >>> [
                tac,

                chdir (Directory.bind0 dir)
                >>
                InductionInternal.accInduction
                ]
         end

      val () = ConstantTable.insert InductionInternal.inductionTactics Prim.nat natInduction

   end



functor AfterTimes () :> sig end =
   struct

      structure CR = CheckpointedRef

      val plus = Prim.plus
      val times = Prim.times

      val minus = resolveGlobal /Nat.minus/

      val () = CR.write ParseNat.minus minus

      val () = RegisterNat.register plus 50 50 51 "+ " "+n "
      val () = RegisterNat.register minus 50 50 51 "- " "-n "
      val () = RegisterNat.register times 60 60 61 "* " "*n "

   end



functor AfterIstrueNeqb () :> sig end =
   struct

      structure CR = CheckpointedRef

      val eqb = Prim.eqb
      val leqb = Prim.leqb

      val ltb = resolveGlobal /Nat.ltb/
      val neqb = resolveGlobal /Nat.neqb/
      val istrue_eqb = resolveGlobal /Nat.istrue_eqb/
      val istrue_leqb = resolveGlobal /Nat.istrue_leqb/
      val istrue_ltb = resolveGlobal /Nat.istrue_ltb/
      val istrue_neqb = resolveGlobal /Nat.istrue_neqb/

      val () = CR.write ParseNat.ltb ltb
      val () = CR.write ParseNat.neqb neqb

      val () = RegisterNat.register eqb 40 40 41 "=? " "=n? "
      val () = RegisterNat.register leqb 40 40 41 "<=? " "<n=? "
      val () = RegisterNat.register ltb 40 40 41 "<? " "<n? "
      val () = RegisterNat.register neqb 40 40 41 "!=? " "!=n? "


      val () =
         ConstantTable.insert BoolTactic.booleanTests eqb istrue_eqb

      val () =
         ConstantTable.insert BoolTactic.booleanTests leqb istrue_leqb

      val () =
         ConstantTable.insert BoolTactic.booleanTests ltb istrue_ltb

      val () =
         ConstantTable.insert BoolTactic.booleanTests neqb istrue_neqb

   end


functor AfterNatAll () :> sig end =
   struct

      structure B = BackchainInternal
      structure CR = CheckpointedRef
      structure E = ETerm
      structure H = ConstantTable
      structure T = Term
      
      val nat_iter = resolveGlobal /Nat.nat_iter/
      val leq = resolveGlobal /Nat.leq/
      val lt = resolveGlobal /Nat.lt/
      val minus = resolveGlobal /Nat.minus/
      val min = resolveGlobal /Nat.min/
      val max = resolveGlobal /Nat.max/
      val leq_refl = resolveGlobal /Nat.leq_refl/
      val leq_trans = resolveGlobal /Nat.leq_trans/
      val leq_succ_succ = resolveGlobal /Nat.leq_succ_succ/
      val plus_leq = resolveGlobal /Nat.plus_leq/
      val minus_leq = resolveGlobal /Nat.minus_leq/
      val times_leq = resolveGlobal /Nat.times_leq/
      val min_leq = resolveGlobal /Nat.min_leq/
      val max_leq = resolveGlobal /Nat.max_leq/
      val leq_implication = resolveGlobal /Nat.leq_implication/
      val plus = Prim.plus
      val times = Prim.times

      val nat_iter_zero = readRegistry /Nat.reduce_nat_iter_zero/ /ureduction/
      val nat_iter_succ = readRegistry /Nat.reduce_nat_iter_succ/ /ureduction/


      val () =
         H.insert EqualityTacticInternal.reflexivityTactics leq
         (B.witnessPriority /\T.Const leq_refl\ _/)
      
      val () =
         H.insert EqualityTacticInternal.transitivityTactics leq
         (fn n => B.witnessPriority /\T.Const leq_trans\ _ \n\ _ __ __/)

      val () =
         List.app 
            (fn (const, i, rconst, rconst', cov, tacfn) => 
               RewriteInternal.CICTable.insert 
                  RewriteInternal.compatibilityTable
                  (const, i, rconst) 
                  (RewriteTypes.General rconst', cov, 0, (fns _ _ tac => tacfn tac)))
            [
            (Prim.succ, 0, leq, leq, true,
             andthenOn 0 (B.witnessPriority /\T.Const leq_succ_succ\ _ _ __/)),
          
            (plus, 0, leq, leq, true,
             andthenOn 0 (B.witnessPriority /\T.Const plus_leq\ _ _ _ _ __ __/)),
          
            (plus, 1, leq, leq, true,
             andthenOn 1 (B.witnessPriority /\T.Const plus_leq\ _ _ _ _ __ __/)),
          
            (minus, 0, leq, leq, true,
             andthenOn 0 (B.witnessPriority /\T.Const minus_leq\ _ _ _ _ __ __/)),
          
            (minus, 1, leq, leq, false,
             andthenOn 1 (B.witnessPriority /\T.Const minus_leq\ _ _ _ _ __ __/)),

            (times, 0, leq, leq, true,
             andthenOn 0 (B.witnessPriority /\T.Const times_leq\ _ _ _ _ __ __/)),
          
            (times, 1, leq, leq, true,
             andthenOn 1 (B.witnessPriority /\T.Const times_leq\ _ _ _ _ __ __/)),
          
            (min, 0, leq, leq, true,
             andthenOn 0 (B.witnessPriority /\T.Const min_leq\ _ _ _ _ __ __/)),
          
            (min, 1, leq, leq, true,
             andthenOn 1 (B.witnessPriority /\T.Const min_leq\ _ _ _ _ __ __/)),
          
            (max, 0, leq, leq, true,
             andthenOn 0 (B.witnessPriority /\T.Const max_leq\ _ _ _ _ __ __/)),
          
            (max, 1, leq, leq, true,
             andthenOn 1 (B.witnessPriority /\T.Const max_leq\ _ _ _ _ __ __/)),
          
            (leq, 0, leq, Prim.arrow, false,
             andthenOn 0 (B.witnessPriority /\T.Const leq_implication\ _ _ _ _ __ __/)),
          
            (leq, 1, leq, Prim.arrow, true,
             andthenOn 1 (B.witnessPriority /\T.Const leq_implication\ _ _ _ _ __ __/)),
            ]


      (* make nat_iter parse and display as fnind *)
      val () = 
         FnindInternal.installFakeDatatype
            (1,                         (* one invisible pervasive arg *)
             0,                         (* no intermediate pervasive args *)
             0,                         (* no visible pervasive args *)
             1,                         (* one mutually recursive datatype *)
             2,                         (* two constructors total *)
             Vector.fromList
                [(Prim.nat,             (* the datatype *)
                  nat_iter,             (* nat's iterator *)
                  0,                    (* no index arguments *)
                  2,                    (* two constructors *)
                  Vector.fromList
                     [
                     (* zero *)
                     (Prim.zero,
                      0,                (* no arguments *)
                      [],               (* no arguments *)
                      nat_iter_zero),   (* nat_iter _ z _ (zero) --> z *)
  
                     (* succ *)
                     (Prim.succ,
                      1,                (* one argument *)
                      [SOME 0],         (* the argument is internal, referring to datatype 0 *)
                      nat_iter_succ)    (* nat_iter a z s (succ n) --> s n (nat_iter a z s n) *)
                     ])])

  end
