
functor AfterIstrue () :> sig end =
   struct

      val istrue = resolveGlobal /Bool.istrue/
      val istrue_inhabitant = resolveGlobal /Bool.istrue_inhabitant/

      val () =
         ConstantTable.insert TypecheckTables.trivialIntroTactics istrue
            (Backchain.applyPriority /\Term.Const istrue_inhabitant\/)

   end


signature BOOL_TACTIC =
   sig

      val boolCasePriority : ETerm.eterm -> Symbol.symbol option -> Tactic.priority Tactic.tacticm
      val boolCaseRaw : ETerm.eterm -> Symbol.symbol option -> Tactic.tactic
      val boolCase : ETerm.eterm -> Symbol.symbol option -> Tactic.tactic

      val boolEqPriority : bool -> ETerm.eterm -> Tactic.priority Tactic.tacticm
      val boolEqRaw : bool -> ETerm.eterm -> Tactic.tactic
      val boolEq : bool -> ETerm.eterm -> Tactic.tactic

      (* for each (const, const') in the table

         const is a boolean test
         const' is a lemma whose result is: istrue (const ...) <-> A
      *)
      val booleanTests : Constant.constant ConstantTable.table

   end


functor BoolTacticFun () :> BOOL_TACTIC =
   struct

      structure D = Directory
      structure H = ConstantTable
      structure IP = IntroPattern
      structure R = Rewrite
      structure T = Term

      open Tactic

      val istrue_iff_eq_true = resolveGlobal /Bool.istrue_iff_eq_true/
      val not_istrue_iff_eq_false = resolveGlobal /Bool.not_istrue_iff_eq_false/
      val not_not_istrue_iff_eq_true = resolveGlobal /Bool.not_not_istrue_iff_eq_true/


      val pat = IP.Or [IP.And [], IP.And []]

      
      val booleanTests : Constant.constant H.table = H.table ()


      fun rew dir const hyp =
         R.rewritePriority
            [(R.usingRew false dir [] (ETerm.literal (T.Const const)),
              [(Hyp.NAME hyp, SOME (false, [0]))])]


      fun priorityOrder (pri1, _) (pri2, _) =
         (case pri1 of
             Primary => true
      
           | _ =>
                (case pri2 of
                    Secondary => true
      
                  | _ => false))

      val concl = Symbol.fromValue "concl"
      

      fun boolCaseMain em eqname tbranch fbranch reord =
         let
            do m = withterm em
            val varname = Symbol.gensym ()

            fun rewtac hyp =
               reduce /concl/
               >>+
               (case Normalize.whnf m of
                   T.Elim (T.Const const, _) =>
                      (case H.find booleanTests const of
                          SOME const' =>
                             rew false const' hyp

                        | NONE => idtacM Primary)

                 | _ => idtacM Primary)
         in
            Reorder.reorder
               (Generalize.rememberPriority 
                   (ETerm.literal m)
                   (ETerm.literal (T.Const Prim.bool))
                   (SOME varname) 
                   (SOME eqname)
                >>!
                EqualityTactic.symmetryInPriority (Hyp.NAME eqname)
                >>!
                Destruct.destructPriority (Hyp.NAME varname) pat
                >>>!
                   [
                   Tactic.refine Rule.normalizeConcl
                   >>+
                   tbranch rewtac,
    
                   Tactic.refine Rule.normalizeConcl
                   >>+
                   fbranch rewtac
                   ])
               (Reorder.compose [Reorder.sort priorityOrder, reord])
         end

      
      fun boolCasePriority em nameopt =
         let
            do (_, dir) = withgoal
            val (eqname, _) = D.insistAndBind dir nameopt
         in
            boolCaseMain em eqname
               (fn rewtac => 
                   rew true istrue_iff_eq_true eqname
                   >>!
                   rewtac eqname)
               (fn rewtac =>
                   rew true not_istrue_iff_eq_false eqname
                   >>!
                   rewtac eqname)
               Reorder.id
         end


      fun boolEqPriority b em =
         let
            val eqname = Symbol.gensym ()
         in
            if b then
               boolCaseMain em eqname
                  (fn _ =>
                      clear [(Hyp.NAME eqname)]
                      >>+
                      idtacM Primary)
                  (fn rewtac =>
                      refine (Rule.voidElim (T.evar ()))
                      >>+
                      rew true not_istrue_iff_eq_false eqname
                      >>!
                      refine (Rule.arrowElim (T.evar ()) (T.evar ()))
                      >>> [
                          hyp (Hyp.NAME eqname) >> done,
         
                          clear [(Hyp.NAME eqname)]
                          >>+
                          rewtac concl
                          ])
                  (Reorder.swap 1 1)
            else
               boolCaseMain em eqname
                  (fn rewtac =>
                      refine (Rule.voidElim (T.evar ()))
                      >>+
                      rew true not_not_istrue_iff_eq_true eqname
                      >>!
                      refine (Rule.arrowElim (T.evar ()) (T.evar ()))
                      >>> [
                          hyp (Hyp.NAME eqname) >> done,
         
                          clear [(Hyp.NAME eqname)]
                          >>+
                          rewtac concl
                          ])
                  (fn _ =>
                      clear [(Hyp.NAME eqname)]
                      >>+
                      idtacM Primary)
                  Reorder.id
         end
         

      fun boolCaseRaw em nameopt = boolCasePriority em nameopt >> idtac

      fun boolCase em nameopt = Typecheck.withTypecheckSnd (boolCasePriority em nameopt)

      fun boolEqRaw b em = boolEqPriority b em >> idtac

      fun boolEq b em = Typecheck.withTypecheckSnd (boolEqPriority b em)

   end


grammardef BoolTactic

   start boolCase Term OIdent
   start boolCaseRaw Term OIdent
   start boolEq _ Term
   start boolEqRaw _ Term

end
