

structure ParseList =
   struct

      structure R = CheckpointedRef

      val cons : Constant.constant R.dest = R.dest ()

      fun parseCons em en = ETerm.apply2 (R.read cons) em en

   end


grammardef List

   rule Term(40)  ::= Term(41) "::" Term(40) => ParseList.parseCons

end


grammaron List


functor AfterList () :> sig end =
   struct

      val cons = resolveGlobal /List.cons/

      val () = CheckpointedRef.write ParseList.cons cons


      structure U = Show.Unparsing

      val () =
         ConstantTable.insert U.unparsingTable cons
            (2, 40, ref true,
             U.ifNoImplicits $
             U.wrap
                (U.apply2 cons U.show U.show)
                (fn (h, t) =>
                    U.append [
                             h 41,
                             U.break 1,
                             U.string ":: ",
                             t 40
                             ]))

   end


functor AfterListAll () :> sig end =
   struct

      val list = resolveGlobal /List.list/
      val list_uptype = resolveGlobal /List.list_uptype/
      val cForall = resolveGlobal /List.Forall/
      val cForall_uptype = resolveGlobal /List.Forall_uptype/
      val cExists = resolveGlobal /List.Exists/
      val cExists_uptype = resolveGlobal /List.Exists_uptype/
      val cForallb = resolveGlobal /List.Forallb/
      val istrue_Forallb = resolveGlobal /List.istrue_Forallb/
      val cExistsb = resolveGlobal /List.Existsb/
      val istrue_Existsb = resolveGlobal /List.istrue_Existsb/
      val cForall_distb = resolveGlobal /List.Forall_distb/
      val istrue_Forall_distb = resolveGlobal /List.istrue_Forall_distb/
      val list_subtype = resolveGlobal /List.list_subtype/

      val () =
         List.app
            (fn (const, lemma) =>
                ConstantTable.insert Partiality.uptypeTactics const (applyRaw (ETerm.literal (Term.Const lemma))))
            [(list, list_uptype),
             (cForall, cForall_uptype),
             (cExists, cExists_uptype)]

      val () =
         ConstantTable.insert BoolTactic.booleanTests cForallb istrue_Forallb

      val () =
         ConstantTable.insert BoolTactic.booleanTests cExistsb istrue_Existsb

      val () =
         ConstantTable.insert BoolTactic.booleanTests cForall_distb istrue_Forall_distb

      val () =
         Constant2Table.insert TypecheckInternal.subtypeTactics (list, list)
         (Backchain.applyRaw /\Term.Const list_subtype\/)

   end
