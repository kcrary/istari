
File.import "datatype-load.iml";
File.import "function-load.iml";
File.import "kindlike-load.iml";

beginModule "Option";


typedef
/
  datatype
    intersect (i : level) .
    intermediate (a : U i) .
    U i
  of
    option : type =
    | None : option
    | Some : a -> option
/;



define /option_case l mnone msome/
/
  option_iter Misc.bogus (fn _ . Misc.bogus) mnone msome l
//
  intersect i (a b : U i) .
    option a
    -> b
    -> (a -> b)
    -> b
/;

inference.
introOf /i a b l mnone msome/.
destruct /l/ /{| x}/.
  {
  unfold /option_case/.
  typecheck.
  }

  {
  unfold /option_case/.
  typecheck.
  }
qed ();



reductions
/
  option_case (None) n _ --> n ;
  option_case (Some x) _ s --> s x ;
  unfolding option_case
/;



define /bind {a b} l f/
/
  option_case l None (fn x . f x)
//
  intersect i . forall (a b : U i) . option a -> (a -> option b) -> option b
/;

inference.
unfold /bind/.
typecheck.
qed ();



reductions
/
  bind _ b (None) _ --> None ;
  bind _ _ (Some x) f --> f x ;
  unfolding bind
/;



define /join {a} l/
/
  bind l (fn x . x)
//
  intersect i . forall (a : U i) . option (option a) -> option a
/;

inference.
unfold /join/.
typecheck.
qed ();



reductions
/
  join a (None) --> None ;
  join _ (Some l) --> l ;
  unfolding join
/;



define /map {a b} f l/
/
  bind l (fn x . Some (f x))
//
  intersect i . forall (a b : U i) . (a -> b) -> option a -> option b
/;

inference.
unfold /map/.
typecheck.
qed ();



reductions
/
  map _ b _ (None) --> None ;
  map _ b f (Some x) --> Some (f x) ;
  unfolding map
/;



lemma "map_identity"
/
  forall i (a : U i) (l : option a) . map (fn x . x) l = l : option a
/;

inference.
intro /i a l/.
destruct /l/ /{| x}/ >> reduce // >> auto.
qed ();




lemma "map_compose"
/
  forall i (a b c : U i) (f : b -> c) (g : a -> b) l .
    map f (map g l) = map (fn x . f (g x)) l : option c
/;

inference.
intro /i a b c f g l/.
induction /l/ >> auto.
qed ();



define /valof {a} l x/
/
  option_case l x (fn y . y)
//
  intersect i . forall (a : U i) . option a -> a -> a
/;

inference.
unfold /valof/.
typecheck.
qed ();



reductions
/
  valof _ (None) x --> x ;
  valof _ (Some x) _ --> x ;
  unfolding valof
/;



(* Miscellaneous *)

lemma "option_subtype"
/
  intersect i (a b : U i) . a <: b -> option a <: option b
/;

intro /i A B sub {| x}/ >> auto.
qed ();



aliasModule /K/ /Kindlike/;
aliasModule /F/ /Function/;

lemma "kindlike_option"
/
  forall i (a : U (1 + i)) .
    a
    -> K.kindlike i a
    -> K.kindlike i (option a)
/;

inference.
intro /i a a0 Hkind/.
apply /K.kindlike_subpollent _ _ (unit % a)/.
1:{
  apply /K.kindlike_sum/ >> auto.
  apply /K.kindlike_degenerate/.
  }
unfold /F.subpollent/.
exists /fn x . option_case x (inl ()) (fn y . inr y)/.
unfold /F.split_injective/.
exists /fn x . (case x of | inl _ . None | inr y . Some y)/.
intro /{| x}/ >> reduce // >> auto.
qed ();


endModule ();
