
File.import "logic-load.iml";

File.import "quotient-aux.iml";


beginModule "Quotient";



define /PER A R/
/
  (forall x y . R x y -> R y x)
  & (forall x y z . R x y -> R y z -> R x z)
//
  intersect i . forall (A : U i) . (A -> A -> U i) -> U i
/;

unfold /PER/.
typecheck.
qed ();



lemma "quotient_formation"
/
  forall i (A : U i) R .
    PER A R
    -> (quotient (x y : A) . R x y) : U i
/;

inference.
intro /i A R Hper/.
destruct /Hper/ /Hsymm Htrans/.
typecheck >> auto.
qed ();



define /quotient1 A R Hper/
/
  quotient (x y : A) . R x y
//
  intersect i . forall (A : U i) (R : A -> A -> U i) .
    PER A R -> U i
/;

inference.
introOf /i A R Hper/.
unfold /quotient1/.
destruct /Hper/ /Hsymm Htrans/.
typecheck >> auto.
qed ();

recordIrrelevance /quotient1/ [2];



define /qintro1 A R Hper x Hx/
/
  x
//
  intersect i .
  forall (A : U i) (R : A -> A -> U i) (Hper : PER A R) (x : A) .
    R x x
    -> quotient1 A R Hper
/;

inference.
introOf /i A R Hper x Hx/.
unfold /qintro1, quotient1/.
destruct /Hper/ /Hsymm Htrans/.
typecheck >> auto.
qed ();

recordIrrelevance /qintro1/ [0, 1, 2, 4];



lemma "quotient1_refl_left"
/
  forall i (A : U i) (R : A -> A -> U i) (Hper : PER A R) (x y : A) .
    R x y
    -> R x x
/;

inference.
intro /i A R Hper x y Hxy/.
destruct /Hper/ /Hsymm Htrans/.
apply /Htrans _ y/ >> auto.
qed ();



lemma "quotient1_refl_right"
/
  forall i (A : U i) (R : A -> A -> U i) (Hper : PER A R) (x y : A) .
    R x y
    -> R y y
/;

inference.
intro /i A R Hper x y Hxy/.
destruct /Hper/ /Hsymm Htrans/.
apply /Htrans _ x/ >> auto.
qed ();



define /PER2 A Q R/
/
  (forall x . Q x -> R x x)
  & (forall x y . Q x -> Q y -> R x y -> R y x)
  & (forall x y z . Q x -> Q y -> Q z -> R x y -> R y z -> R x z)
//
  intersect i . forall (A : U i) . (A -> U i) -> (A -> A -> U i) -> U i
/;

unfold /PER2/.
typecheck.
qed ();



lemma "quotient2_formation"
/
  forall i (A : U i) Q R .
    PER2 A Q R
    -> (quotient (x y : A) . Q x & Q y & R x y) : U i
/;

inference.
intro /i A Q R Hper/.
destruct /Hper/ /_ Hsymm Htrans/.
typecheck >> auto.
  {
  reintro /x y Hxy/.
  destruct /Hxy/ /Hx Hy Hxy/.
  auto.
  }

  {
  reintro /x y z Hxy Hyz/.
  destruct /Hxy/ /Hx Hy Hxy/.
  destruct /Hyz/ /_ Hz Hyz/.
  splitn 2 >> auto.
  apply /Htrans _ y/ >> auto.
  }
qed ();



define /quotient2 A Q R Hper/
/
  quotient (x y : A) . Q x & Q y & R x y
//
  intersect i .
  forall (A : U i) (Q : A -> U i) (R : A -> A -> U i) .
    PER2 A Q R -> U i
/;

inference.
introOf /i A Q R Hper/.
unfold /quotient2/.
exact /quotient2_formation i A Q R Hper/.
qed ();

recordIrrelevance /quotient2/ [3];



define /qintro2 A Q R Hper x Hx/
/
  x
//
  intersect i . 
  forall (A : U i) (Q : A -> U i) (R : A -> A -> U i) (Hper : PER2 A Q R) (x : A) .
    Q x
    -> quotient2 A Q R Hper
/;

inference.
introOf /i A Q R Hper x Hx/.
unfold /qintro2/.
infer /quotient2 A Q R Hper/ /Hof/.
unfold /quotient2 in Hof in concl/.
typecheck.
destruct /Hper/ /Hrefl _/.
splitn 2 >> auto.
qed ();

recordIrrelevance /qintro2/ [0, 1, 2, 3, 5];



structure Nothing = AfterQuotient ();



lemma "quotient2_equality"
/
  forall i (A : U i) (Q : A -> U i) (R : A -> A -> U i) (Hper : PER2 A Q R) (x y : quotient2 A Q R Hper) .
    { R x y }
    -> x = y : quotient2 A Q R Hper
/;

inference.
intro /i A Q R Hper x y/.
introRaw /Hxy/.
  {
  destruct /x/ /[x Hx x' Hx' Hxx]/.
  destruct /y/ /[y Hy y' Hy' Hyy]/.
  typecheck.
  destruct /Hper/ /Hrefl Hsymm Htrans/.
  unfold /qintro2 at all/.
  split.
    {
    intro /Hxy/.
    apply /Htrans _ x/ >> nauto 3.
    apply /Htrans _ y/ >> nauto 3.
    }

    {
    intro /Hxy/.
    apply /Htrans _ x'/ >> nauto 3.
    }
  }
destruct /x/ /[x Hx]/.
destruct /y/ /[y Hy]/.
unfold /qintro2 in Hxy at all/.
destruct /Hxy/ /[Hxy]/.
unhide.
unfold /qintro2 at all/.
extensionality >> auto.
qed ();



endModule ();
