
File.import "logic-load.iml";
File.import "bool-load.iml";
File.import "decidable-aux.iml";

Namespace.beginModule "Decidable";



define /decidable P/
/
  P % not P
//
  intersect i . U i -> U i
/;

inference.
introOf /i P/.
unfold /decidable/.
typecheck.
qed ();



Constant.setOpacity (parseConstant /decidable/) Constant.FIRM;




lemma "decidable_equiv"
/
  forall i (P Q : U i) . (P <-> Q) -> decidable P -> decidable Q
/;

intro /i P Q Hiff HdecP/.
destruct /HdecP/ /Hyes | Hno/.
  {
  left.
  apply /Hiff/ >> auto.
  }

  {
  right.
  intro /H/.
  witness /Hno __/.
  apply /Hiff/ >> auto.
  }
qed ();



lemma "decidable_compat_iff"
/
  forall i (P Q : U i) .
    P <-> Q
    -> decidable P <-> decidable Q
/;

inference.
intro /i P Q Hiff/.
split.
  {
  apply /decidable_equiv/ >> auto.
  }

  {
  apply /decidable_equiv/ >> auto.
  }
qed ();



structure Nothing = AfterDecidableCompat ();




lemma "decidable_and"
/
  forall i (P Q : U i) . decidable P -> decidable Q -> decidable (P & Q)
/;

inference.
intro /a P Q Hp Hq/.
destruct /Hp/ /Hp | Hnp/.
1:{
  right.
  intro /(Hp _)/.
  so /Hnp Hp/ /0/.
  }
destruct /Hq/ /Hq | Hnq/.
1:{
  right.
  intro /(_ Hq)/.
  so /Hnq Hq/ /0/.
  }
auto.
qed ();



lemma "decidable_or"
/
  forall i (P Q : U i) . decidable P -> decidable Q -> decidable (P % Q)
/;

inference.
intro /a P Q Hp Hq/.
destruct /Hp/ /Hp | Hnp/ >> auto.
destruct /Hq/ /Hq | Hnq/ >> auto.
right.
intro /(Hp | Hq)/.
  {
  so /Hnp Hp/ /0/.
  }

  {
  so /Hnq Hq/ /0/.
  }
qed ();



lemma "decidable_implies"
/
  forall i (P Q : U i) . decidable P -> decidable Q -> decidable (P -> Q)
/;

inference.
intro /a P Q Hp Hq/.
destruct /Hp/ /Hp | Hnp/.
1:{
  left.
  intro /Hp/.
  so /Hnp Hp/ /0/.
  }
destruct /Hq/ /Hq | Hnq/.
  {
  auto.
  }
right.
intro /H/.
so /Hnq (H Hp)/ /0/.
qed ();



lemma "decidable_and_dep"
/
  forall i (P Q : U i) . decidable P -> (P -> decidable Q) -> decidable (P & Q)
/;

inference.
intro /a P Q Hp Hq/.
destruct /Hp/ /Hp | Hnp/.
1:{
  right.
  intro /(Hp _)/.
  so /Hnp Hp/ /0/.
  }
so /Hq Hp/ /Hq' | Hnq/.
1:{
  right.
  intro /(_ Hq')/.
  so /Hnq Hq'/ /0/.
  }
auto.
qed ();



lemma "decidable_or_dep"
/
  forall i (P Q : U i) . decidable P -> (not P -> decidable Q) -> decidable (P % Q)
/;

inference.
intro /a P Q Hp Hq/.
destruct /Hp/ /Hp | Hnp/ >> auto.
so /Hq Hnp/ /Hq' | Hnq/ >> auto.
right.
intro /(Hp | Hq')/.
  {
  so /Hnp Hp/ /0/.
  }

  {
  so /Hnq Hq'/ /0/.
  }
qed ();



lemma "decidable_implies_dep"
/
  forall i (P Q : U i) . decidable P -> (P -> decidable Q) -> decidable (P -> Q)
/;

inference.
intro /a P Q Hp Hq/.
destruct /Hp/ /Hp | Hnp/.
1:{
  left.
  intro /Hp/.
  so /Hnp Hp/ /0/.
  }
so /Hq Hp/ /Hq' | Hnq/.
  {
  auto.
  }
right.
intro /H/.
so /Hnq (H Hp)/ /0/.
qed ();



lemma "decidable_true"
/
  decidable unit
/;

left.
split.
qed ();



lemma "decidable_false"
/
  decidable void
/;

right.
intro /0/.
qed ();



lemma "decidable_not"
/
  forall i (P : U i) . decidable P -> decidable (not P)
/;

inference.
intro /a P Hp/.
apply /decidable_implies/ >> autoWith /decidable_false/.
qed ();



lemma "decidable_iff"
/
  forall i (P Q : U i) . decidable P -> decidable Q -> decidable (P <-> Q)
/;

inference.
intro /i P Q Hp Hq/.
apply /decidable_and/ >> autoWith /decidable_implies/.
qed ();



lemma "decidable_eq_bool"
/
  forall b c . decidable (b = c : bool)
/;

inference.
intro /b c/.
destruct /b/ /|/ >> destruct /c/ /|/ >> attempt (left >> auto >> done).
  {
  right.
  intro /H/.
  injection /H/.
  }

  {
  right.
  intro /H/.
  injection /H/.
  }
qed ();



lemma "decidable_from_bool"
/
  forall i (P : U i) (b : bool) .
    (Bool.istrue b <-> P)
    -> decidable P
/;

inference.
intro /i P b Hiff/.
destruct /b/ /|/.
  {
  left.
  apply /Hiff/.
  apply /Bool.istrue_true/.
  }

  {
  right.
  intro /H/.
  so /Bool.not_istrue_false (Hiff #2 H)/ /0/.
  }
qed ();



lemma "decidable_istrue"
/
  forall b . decidable (Bool.istrue b)
/;

inference.
intro /b/.
apply /decidable_from_bool/.
  {
  reflexivity.
  }
typecheck.
qed ();



lemma "decidable_eq_pair"
/
  forall i (a b : U i) .
    (forall x y . decidable (x = y : a))
    -> (forall x y . decidable (x = y : b))
    -> forall x y . decidable (x = y : (a & b))
/;

inference.
intro /i a b Hdeca Hdecb (x y) (x' y')/.
so /Hdeca x x'/ /? | Hneq/.
1:{
  right.
  contrapositive /Hneq/.
  injection /Hneq/ >> auto.
  }
subst /x'/.
so /Hdecb y y'/ /? | Hneq/.
1:{
  right.
  contrapositive /Hneq/.
  injection /Hneq/ >> auto.
  }
subst /y'/.
left.
auto.
qed ();



lemma "decidable_forall_unique"
/
  forall i (a : U i) (P Q : a -> U i) .
    decidable (exists (x : a) . P x)
    -> (forall x y . P x -> P y -> x = y : a)
    -> (forall x . decidable (Q x))
    -> decidable (forall (x : a) . P x -> Q x)
/;

intro /i a P Q HdecP Hunique HdecQ/.
destruct /HdecP/ /x Hx | Hno/.
1:{
  left.
  intro /x H/.
  so /Hno (x, H)/ /0/.
  }
so /HdecQ x/ /H | Hno/.
1:{
  right.
  contrapositive /Hno/.
  apply /Hno/ >> auto.
  }
left.
intro /x' Hx'/.
so /Hunique _ _ Hx Hx'/ /?/.
subst /x'/.
hyp /H/.
qed ();



lemma "decidable_exists_unique"
/
  forall i (a : U i) (P Q : a -> U i) .
    decidable (exists (x : a) . P x)
    -> (forall x y . P x -> P y -> x = y : a)
    -> (forall x . P x -> decidable (Q x))
    -> decidable (exists (x : a) . P x & Q x)
/;

intro /i a P Q HdecP Hunique HdecQ/.
destruct /HdecP/ /x Hx | Hno/.
1:{
  right.
  contrapositive /Hno/.
  destruct /Hno/ /x H _/.
  existsAuto.
  }
so /HdecQ x Hx/ /H | Hno/.
1:{
  right.
  contrapositive /Hno/.
  destruct /Hno/ /y Hy H/.
  so /Hunique _ _ Hx Hy/ /?/.
  subst /y/.
  hyp /H/.
  }
left.
existsAuto.
qed ();



lemma "decidable_exists_unique2"
/
  forall i (a b : U i) (P Q : a -> b -> U i) .
    decidable (exists (x : a) (y : b) . P x y)
    -> (forall x x' y y' . P x y -> P x' y' -> x = x' : a & y = y' : b)
    -> (forall x y . P x y -> decidable (Q x y))
    -> decidable (exists x y . P x y & Q x y)
/;

inference.
intro /i a b P Q HdecP Hunique HdecQ/.
destruct /HdecP/ /x y Hxy | Hno/.
1:{
  right.
  contrapositive /Hno/.
  destruct /Hno/ /x y H _/.
  existsAuto.
  }
so /HdecQ x y Hxy/ /H | Hno/.
1:{
  right.
  contrapositive /Hno/.
  destruct /Hno/ /x' y' Hxy' H/.
  so /Hunique _# 4 Hxy Hxy'/ /? ?/.
  subst /x' y'/.
  hyp /H/.
  }
left.
existsAuto.
qed ();



lemma "decidable_exists_unique3"
/
  forall i (a b c : U i) (P Q : a -> b -> c -> U i) .
    decidable (exists (x : a) (y : b) (z : c) . P x y z)
    -> (forall x x' y y' z z' . P x y z -> P x' y' z' -> x = x' : a & y = y' : b & z = z' : c)
    -> (forall x y z . P x y z -> decidable (Q x y z))
    -> decidable (exists x y z . P x y z & Q x y z)
/;

inference.
intro /i a b c P Q HdecP Hunique HdecQ/.
destruct /HdecP/ /x y z Hxy | Hno/.
1:{
  right.
  contrapositive /Hno/.
  destruct /Hno/ /x y z H _/.
  existsAuto.
  }
so /HdecQ x y z Hxy/ /H | Hno/.
1:{
  right.
  contrapositive /Hno/.
  destruct /Hno/ /x' y' z' Hxy' H/.
  so /Hunique _# 6 Hxy Hxy'/ /? ? ?/.
  subst /x' y' z'/.
  hyp /H/.
  }
left.
existsAuto.
qed ();
    


endModule ();
