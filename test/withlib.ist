
openModule /List/;
openModule /Bar/;
openModule /Natural/;
openModule /Partial/;
openModule /SyntacticEquality/;
openModule /Misc/;
openModule /Irrelevance/;
openModule /Tuple/;
openModule /Weaksum/;

fun shouldfail tac goal fk sk =
  tac goal (fn _ => idtac goal fk sk) (fn _ => fk "unexpected success");



lemma "let_using_irrelevant_hidden"
/
  forall i (a : U i) (b : a -> U i) .
  intersect (x : a) .
    (parametric (y : a) . b y)
    -> b x
/;

inference.
intro /i a b x Himpl/.
set /z/ /Himpl Ap x/.
exact /z/.
unfold /z/.
typecheck.
qed ();



lemma "hidden_type"
/
  foralltp a . nonsense
/;

intro /a/.
shouldfail $ exact /a/.
Prover.abandon ();



lemma "rewrite_rational"
/
  forall a a' a'' b b' b'' .
    a'' <q= a'
    -> a' <q= a
    -> b <q= b'
    -> b' <q= b''
    -> a <q= b
    -> a'' <q= b''
/;

inference.
intro /a a' a'' b b' b'' Ha' Ha Hb Hb' H/.
rewrite /<- Ha in H, -> Hb in H/.
rewrite /-> Ha', <- Hb'/.
hyp /H/.
qed ();



lemma "rational_total"
/
  seqt x = q`1 +q  q`1 in (x : Rational.rational)
/;

reduceSeq //.
typecheck.
qed ();



lemma "rational_strict"
/
  forall (x : Rational.rational) . x : partial Rational.rational
/;

intro /x/.
typecheck.
qed ();



lemma "proof_irrelevance_ext"
/
  forall i (a : U i) (m n : a) .
    inpi m = inpi n : pirr a
/;

inference.
intro /i a m n/.
extensionality.
qed ();



lemma "proof_irrelevance_ext_refl"
/
  forall i (a : U i) (m n : a) .
    inpi m = inpi n : pirr a
/;

inference.
intro /i a m n/.
reflexivity.
qed ();



lemma "parametric_letnext"
/
  forall i (a b : U i) (f : a -> void) .
    (fn x . let next y = x in next (abort (f y)))
    : parametric (x : future a) . future b
/;

inference.
intro /i a b f/.
typecheck.
qed ();



lemma "convertIrr_under"
/
  forall i (a b : U i) (c : b -> U i) (f : a -> b) (g : forall (x : a) . c (f x)) .
    (fn x . pack ((fn _ . c) bogus) (bogus x) (g x))
    : a -> weaksum (y : b) . c y
/;

inference.
intro /i a b c f g/.
convertIrr /pack c (f x) within x/.
typecheck.
qed ();



lemma "unpackt_equal"
/
  forall i (a : U i) (b : a -> U i) (u : weaksum (x : a) . b x) .
    unpackt (x, y) = u in y = y : b x
/;

inference.
intro /i a b u/.
destruct /u/ /x y/.
convertIrr /pack b _ _/.
witness /unpackt_intro x y __/.
reduce //.
reflexivity.
qed ();



lemma "unpackt_implication"
/
  forall i (a : U i) (b : a -> U i) 
    (c d : forall (x : a) . b x -> U i)
    (u : weaksum (x : a) . b x) .
      (parametric (x : a) . forall (y : b x) . c x y -> d x y)
      -> (unpackt (x , y) = u in c x y)
      -> (unpackt (x , y) = u in d x y)
/;

inference.
intro /i a b c d u Himpl Hu/.
destruct /Hu/ /x y Heq Hy/.
reduce /Hy/.
subst /u/.
apply /unpackt_intro x/.
reduce //.
apply /Himpl Ap x/ >> auto.
qed ();



lemma "destruct_unpackt"
/
  forall i (a : U i) (b : a -> U i) 
    (c : forall (x : a) . b x -> U i) 
    (d : (weaksum (x : a) . b x) -> U i) 
    (u : weaksum (x : a) . b x) .
      (parametric (x : a) . forall (y : b x) . c x y -> d (pack b x y))
      -> (unpackt (x , y) = u in c x y)
      -> d u
/;

inference.
intro /i a b c d u Himpl Hu/.
destruct /Hu/ /x y Heq H/.
reduce /H/.
subst /u/.
apply /Himpl Ap x/ >> auto.
qed ();



lemma "destruct_unpackt_squash"
/
  forall i (a : U i) (b : a -> U i) 
    (c : forall (x : a) . b x -> U i) 
    (d : (weaksum (x : a) . b x) -> U i) 
    (u : weaksum (x : a) . b x) .
      (forall (x : a) (y : b x) . c x y -> d (pack b x y))
      -> (unpackt (x , y) = u in c x y)
      -> { d u }
/;

inference.
intro /i a b c d u Himpl Hu/.
destruct /Hu/ /x y Heq H/.
reduce /H/.
subst /u/.
split.
apply /Himpl/ >> auto.
qed ();



lemma "partial_application_irrelevance"
/
  forall i (a : U i) .
    (fn b . `Weaksum.pack a b)
    : parametric (b : a -> U i) . forall (x : a) . b x -> weaksum (x : a) . b x
/;

inference.
intro /i a/.
typecheck.
qed ();



lemma "parametric_intro_extract"
/
  forall i (a : U i) (b : a -> U i) (f g : forall (x : a) . b x) .
    (forall (x : a) . f x = g x : b x)
    -> parametric (x : a) . f x = g x : b x
/;

inference.
intro /i a b f g Heq x/.
shouldfail (apply /Heq/).
unhide.
apply /Heq/.
qed ();



define /parabar {a b c} f x y/
/
  f Ap x Ap y
//
  intersect i . forall (a b c : U i) . (parametric (x : a) (y : b) . c) -> a -> b -> c
/;

unfold /parabar/.
typecheck.
qed ();

recordIrrelevance /parabar/ [0, 1, 2, 4, 5];



lemma "parabar_application"
/
  forall i (a b c : U i) (f : parametric (x : a) (y : b) . c) .
    (fn x y . parabar f x y)
    : parametric (x : a) (y : b) . c
/;

inference.
intro /i a b c f/.
typecheck.
qed ();



lemma "parametric_subtype"
/
  forall i (a a' : U i) (b : a -> U i) (b' : a' -> U i)
    (f : parametric (x : a) . b x)
    (g : (parametric (x : a') . b' x) -> nat) .
      a' <: a
      -> (forall (x : a') . b x <: b' x)
      -> g f : nat
/;

inference.
intro /i a a' b b' f g Ha Hb/.
typecheck.
qed ();



lemma "parametric_forall_subtype"
/
  forall i (a a' : U i) (b : a -> U i) (b' : a' -> U i)
    (f : parametric (x : a) . b x)
    (g : (forall (x : a') . b' x) -> nat) .
      a' <: a
      -> (forall (x : a') . b x <: b' x)
      -> g f : nat
/;

inference.
intro /i a a' b b' f g Ha Hb/.
typecheck.
qed ();



define /parametric_def f x/
/
  abort (f x)
//
  intersect i (a : U i) (b : a -> U i) .
    (a -> void)
    -> parametric (x : a) . b x
/;

inference.
introOf /i a b f x/.
unfold /parametric_def/.
reduceParam //.
typecheck.
qed ();



lemma "parametric_introEq"
/
  forall i (a : U i) (b : a -> U i) (f g : parametric (x : a) . b x) .
    (forall x . f Ap x = g Ap x : b x)
    -> f = g : (parametric (x : a) . b x)
/;

inference.
intro /i a b f g Heq/.
introEq /x/.
apply /Heq/.
qed ();



lemma "parametric_extAuto"
/
  forall i (a : U i) (b : a -> U i) (f g : parametric (x : a) . b x) .
    (forall x . f Ap x = g Ap x : b x)
    -> f = g : (parametric (x : a) . b x)
/;

inference.
intro /i a b f g Heq/.
extensionalityAuto.
apply /Heq/.
qed ();



define /parafoo/
/
  fn x . 12
//
  parametric (x : nat) . nat
/;

unfold /parafoo/.
introOf /x/.
reduceParam //.
typecheck.
qed ();



lemma "parametric_ext"
/
  forall i (a : U i) (b : a -> U i) (f g : parametric (x : a) . b x) .
    (forall x . f Ap x = g Ap x : b x)
    -> (fn x . f Ap x) = (fn x . g Ap x) : (parametric (x : a) . b x)
/;

inference.
intro /i a b f g Heq/.
extensionality.
reduceParam //.
apply /Heq/.
qed ();



lemma "parametric_functions"
/
  forall i (a : U i) (b : a -> U i) (f : parametric (x : a) . b x) .
    (fn x y . (f Ap x, f Ap y))
    : parametric (x y : a) . b x & b y
/;

inference.
intro /i a b f/.
typecheck.
qed ();



lemma "parametric_ap"
/
  forall i (a : U i) (b : a -> U i) (f : intersect (x : a) . b x) .
    (fn x . f ap x)
    : parametric (x : a) . b x
/;

inference.
intro /i a b f/.
typecheck.
qed ();



lemma "unparametric_forall"
/
  forall i (a : U i) (b : a -> U i) (f : forall (x : a) . b x) .
    (fn x . f x)
    : parametric (x : a) . b x
/;

inference.
intro /i a b f/.
typecheck.
RuleTactic.parametricIntroOf.
1:{
  shouldfail Irrelevance.proveIrrelevant.
Prover.abandon ();



lemma "parametric_abort"
/
  forall i (a : U i) (b : a -> U i) (f : a -> void) .
    (fn x . abort (f x))
    : parametric (x : a) . b x
/;

inference.
intro /i a b f/.
typecheck.
qed ();



lemma "parametric_prune_evar"
/
  forall (i : level) (a b : U i) (f : a -> b) (g : { a } -> b) .
    (fn x . _) : parametric (x : a) . b
/;

intro /i a b f g/.
typecheck.
shouldfail (change /concl/ /(f x) : b/).
change /concl/ /(g ()) : b/.
typecheck.
qed ();



lemma "parametric_prune_evar_multi"
/
  forall (i : level) (a b : U i) (f : a -> b) .
    (fn x y z . _) : parametric (x : a) . forall (y : a) . parametric (z : a) . b
/;

intro /i a b f/.
typecheck.
shouldfail (change /concl/ /(f x) : b/).
shouldfail (change /concl/ /(f z) : b/).
change /concl/ /(f y) : b/.
typecheck.
qed ();



lemma "parametric_compat"
/
  forall i (a b : U i) (x y z : a) (f : parametric (x y : a) . forall (z : a) . b) .
    x = y : a
    -> y = z : a
    -> f Ap x Ap y z = f Ap y Ap z x : b
/;

inference.
intro /i a b x y z f Hxy Hyz/.
compat.
  {
  auto.
  }

  {
  auto.
  }

  {
  transitivity /y/ >> auto.
  }
qed ();



lemma "bar_subtype_hidden"
/
  forall i . intersect (a b : U i) . a <: b -> bar a <: bar b
/;

intro /i a b Hsub/.
typecheck.
qed ();



lemma "list_subtype_hidden"
/
  forall i . intersect (a b : U i) . a <: b -> list a <: list b
/;

intro /i a b Hsub/.
typecheck.
qed ();



lemma "sequal_path"
/
  forall (P : nat -> future (nat & nat) -> U 0) m n .
    m = n : nat
    -> unit % (forall x . P x (next (m, n))) % unit
    -> unit % (forall x . P x (next (n, m))) % unit
/;

inference.
intro /P m n Heq H/.
so /nat_elemental _ _ Heq/ /Hsequal/.
moveBefore /Hsequal/ /H/.
assert /unit/ /Hunit/ >>> [split, idtac].
Tactic.refine (Rule.sequivalence (Term.evar ()) (Term.evar ())).
  {
  Tactic.refine (Rule.sequalSymm (Term.evar ()) (Term.evar ())).
  goalCaseT
    /| sequal ? _ =>
       \(fnc p =>
           Tactic.refine (Rule.sequalCompatPath [2, 1, 2, 0, 2, 0, 1] p (parseCurr /m/) (parseCurr /n/)))\
    /.
  hyp /Hsequal/.
  }
Tactic.refine (Rule.sequivalenceLeft 1 (Term.evar ()) (Term.evar ()) (Term.evar ())).
  {
  goalCaseT
    /| sequal ? _ =>
       \(fnc p =>
           Tactic.refine (Rule.sequalCompatPath [2, 1, 2, 0, 2, 0, 0] p (parseCurr /m/) (parseCurr /n/)))\
    /.
  hyp /Hsequal/.
  }
hyp /H/.
qed ();



(* case with annotation; won't define it without the annotation *)
defineRaw /compose n/
/
  (case n : nat :> (nat -> nat) of
   | zero . fn x . x

   | succ _ . fn x . x)
/;



(* test PrimReduction.hardcodes *)
defineRaw /korbunga x/
/
  seq y = x in
  seqt z = y in
  let next u = next 1 in
  lete w = (fn (v : nat & nat) . v) (u, 2) in
  let (a, b) = w
  in
    cons a z
/;



reductions
/
  korbunga (cons h t) --> cons 1 (cons h t) ;

  unfolding korbunga
/;



lemma "test_letpair"
/
  let (x, y) = (1, 2) in x + y = 3 : nat
/;

whreduce //.
reflexivity.
qed ();



lemma "test_lettrip"
/
  let trip x y z = trip 1 2 3 in x + y + z = 6 : nat
/;

whreduce //.
reflexivity.
qed ();



lemma "test_letquad"
/
  let quad w x y z = quad 1 2 3 4 in w + x + y + z = 10 : nat
/;

whreduce //.
reflexivity.
qed ();



lemma "test_letquint"
/
  let quint v w x y z = quint 1 2 3 4 5 in v + w + x + y + z = 15 : nat
/;

whreduce //.
reflexivity.
qed ();



lemma "halts_nat"
/
  halts 4
/;

RuleTactic.haltsValue.
qed ();



lemma "not_halts_garbage"
/
  forall (x : nonsense) . halts x
/;

intro /x/.
shouldfail RuleTactic.haltsValue.
Prover.abandon ();



lemma "halts_almost_garbage"
/
  forall (x : nonsense) . halts (succ x)
/;

intro /x/.
RuleTactic.haltsValue.
qed ();



lemma "halts_integer"
/
  halts z`12345
/;

RuleTactic.haltsValue.
qed ();



lemma "halts_integer_variable"
/
  forall (x : integer) . halts x
/;

intro /x/.
shouldfail RuleTactic.haltsValue.
RuleTactic.haltsTotal (Term.evar ()) >> auto.
qed ();



lemma "seq_nil"
/
  seq x = nil in unit
/;

reduce //.
split.
qed ();



lemma "seq_cons"
/
  (* cons 1 1 is ill-typed but it's still valuable *)
  seq x = cons 1 1 in unit
/;

reduce //.
split.
qed ();



lemma "halts_nil"
/
  halts nil
/;

RuleTactic.haltsValue.
qed ();



lemma "halts_cons"
/
  forall (x : nonsense) . halts (x :: nil)
/;

intro /x/.
RuleTactic.haltsValue.
qed ();



defineInd /x/
/
  flurb : list [nat] -> list nat -> list nat of
  | nil . fn _ . nil

  | cons h t . fn l .
      (case l : list of
       | nil . cons (h + x) t
       | cons h' _ . cons (h + h') t)
//
  nat -> list nat -> list nat -> list nat
/;



lemma "nested_fnind"
/
  flurb 1 (2 :: 3 :: nil) (4 :: 5 :: nil) : list nat
/;

reduceUsing /\Reduction.user (readRegistry /reduce_flurb_cons/ /ureduction/)\/.
reduce //.
typecheck.
qed ();



lemma "reduceSeq_valuable"
/
  seqt x = 4 in 1 + x = 5 : nat
/;

reduceSeq //.
reduce //.
reflexivity.
qed ();



lemma "reduceSeq_typing"
/
  forall (f : nat -> nat) . seqt x = f 4 in 1 + x = succ (f 4) : nat
/;

intro /f/.
reduceSeq //.
reduce //.
reflexivity.
qed ();



lemma "reduceSeq_typing_hyp"
/
  forall (f : nat -> nat) (z : nat) . (seqt x = f 4 in 1 + x = z : nat) -> succ (f 4) = z : nat
/;

intro /f z H/.
reduceSeq /H/.
reduce /H/.
hyp /H/.
qed ();



lemma "seqt_nat_typing"
/
  forall (f : nat -> nat) .
    (seqt y = f 0 in y + 1) : nat
/;

intro /f/.
typecheck.
qed ();



lemma "seqt_integer_typing"
/
  forall (f : integer -> integer) .
    (seqt y = f z`0 in y +z z`1) : integer
/;

intro /f/.
typecheck.
qed ();



lemma "seqt_natural_typing"
/
  forall (f : natural -> natural) .
    (seqt y = f z`0 in y +N z`1) : natural
/;

intro /f/.
typecheck.
qed ();



lemma "seqt_symbol_typing"
/
  forall (f : nat -> Symbol.symbol) .
    (seqt y = f 0 in y) : Symbol.symbol
/;

intro /f/.
typecheck.
qed ();



lemma "seqt_arrow_typing"
/
  forall (f : nat -> nat -> nat) .
    (seqt g = f 0 in g 0) : nat
/;

intro /f/.
typecheck.
qed ();



lemma "seqt_list_typing"
/
  forall (f : nat -> List.list nat) .
    (seqt l = f 0 in 0 :: l) : List.list nat
/;

intro /f/.
typecheck.
qed ();



lemma "nonsense_top"
/
  0 0 : nonsense
/;

typecheck.
qed ();



lemma "list_covariance"
/
  forall i (a b c : U i) (f : list b -> c) (x : list a) . a <: b -> f x : c
/;

inference.
intro /i a b c f x Hsub/.
typecheck.
qed ();



lemma "option_covariance"
/
  forall i (a b c : U i) (f : Option.option b -> c) (x : Option.option a) . a <: b -> f x : c
/;

inference.
intro /i a b c f x Hsub/.
typecheck.
qed ();



defineInd //
/
  countdown : list [unit] -> nat -> unit of
  | nil . fn _ . ()

  | cons con' l . fn i .
      countdown l (1 + i)
//
  list unit -> nat -> unit
/;



lemma "sequal_compat"
/
  forall x x' y y' .
    x = x' : nat
    -> y = y' : nat
    -> sequal (x + y) (x' + y')
/;

inference.
intro /x x' y y' Hx Hy/.
compat.
  {
  apply /nat_elemental/ >> auto.
  }

  {
  apply /nat_elemental/ >> auto.
  }
qed ();



lemma "sequal_compat_pair"
/
  forall x x' y y' .
    x = x' : nat
    -> y = y' : nat
    -> sequal (x , y) (x' , y')
/;

inference.
intro /x x' y y' Hx Hy/.
compat.
  {
  apply /nat_elemental/ >> auto.
  }

  {
  apply /nat_elemental/ >> auto.
  }
qed ();



lemma "equal_compat_next"
/
  forall x x' .
    x = x' : nat
    -> sequal (next x) (next x')
/;

inference.
intro /x x' Hx/.
compat.
apply /nat_elemental/ >> auto.
qed ();



lemma "sequal_refl"
/
  sequal bogus bogus
/;

reflexivity.
qed ();


lemma "sequal_trans"
/
  forall x y z .
    x = y : nat
    -> y = z : nat
    -> sequal x z
/;

inference.
intro /x y z Hxy Hyz/.
transitivity /y/.
  {
  apply /nat_elemental/ >> auto.
  }

  {
  apply /nat_elemental/ >> auto.
  }
qed ();



lemma "subst_sequal"
/
  forall x .
    x = 4 : nat
    -> nat_case x bogus (fn _ . ()) : unit
/;

inference.
intro /x Heq/.
so /nat_elemental _# 2 Heq/ /Heq'/.
clear /Heq/.
symmetryIn /Heq'/.
subst /x/.
reduce //.
typecheck.
qed ();



lemma "Forall_Exists_admissible"
/
  forall i (a : U i) (P : a -> U i) (l : list a) .
    uptype a
    -> (forall x . uptype (P x))
    -> admiss (Forall P l % Exists P l)
/;

inference.
intros.
Partiality.proveAdmiss.
qed ();



lemma "partial_void"
/
  partial void
/;

exactRaw /bottom/.
typecheck.
qed ();



(* partial factorial *)
definerec /factorial n/
/
  if n =z? z`0 then z`1 else (seq n' = factorial (n -z z`1) in n *z n')
//
  integer -> partial integer
/;

introOf /n/.
RuleTactic.activeApp (parseCurr /integer -> partial integer/) (parseCurr /factorial/) (parseCurr /n/) >> auto.
unfold /factorial/.
clear /factorial n/.
RuleTactic.fixpointInductionOf.
1:{
  Partiality.proveAdmiss.
  }
introOf /factorial/.
reduce //.
subsume /integer -> partial integer/.
  {
  typecheck.
  }
introOf /n/.
reduce //.
typecheck.
RuleTactic.activeApp (parseCurr /integer -> partial integer/) (parseCurr /factorial/) (parseCurr /n -z z`1/) >> auto.
qed ();



lemma "natural_iter_3"
/
  natural_iter (fn _ . nat) 1 (fn _ x . x +n x) z`3 = 8 : nat
/;

reduce //.
reflexivity.
qed ();



define /zeron/
/
  z`0
//
  natural
/;

unfold /zeron/.
typecheck.
qed ();

val _ =
  makeReduction
    /
    succn (zeron) --> z`1 ;
    unfolding zeron
    /;

val _ =
  makeReduction
    /
    succn x --> plusn z`1 x ;
    unfolding succn  (* fails without this *)
    /;



grammaroff ArithmeticNat;
grammaron ArithmeticNatural;
CheckpointedRef.assign Show.arithmetic (`"natural");



lemma "one_plus_one"
/
  1 + 1 = 2 : natural
/;

reduce //.
reflexivity.
qed ();



lemma "succ_one"
/
  succn 1 = 2 : natural
/;

reduce //.
reflexivity.
qed ();



lemma "non_native_no_reduce"
/
  forall n . succn n = n + 1 : natural
/;

inference.
intro /n/.
reduce //.   (* should do nothing *)
unfold /succn/.
apply /plusn_commute/.
qed ();



lemma "rewrite_natural"
/
  forall a a' b c d e .
    a <= a'
    -> a' * b + c - d <= e
    -> a * b + c - d <= e
/;

inference.
intro /a a' b c d e H1 H2/.
etransitivity.
1:{
  hyp /H2/.
  }

  typechecker ();
rewrite /<- H1/.
reflexivity.
qed ();



lemma "induction_natural"
/
  forall n . n + n = 2 * n : natural
/;

inference.
intro /n/.
induction /n/.
  {
  reflexivity.
  }

  {
  intro /n IH/.
  rewrite /-> plusn_succn/.
  rewrite /-> plusn_commute/.
  rewrite /-> plusn_succn/.
  rewrite /-> timesn_dist_succn_r/.
  unfold /succn at all/.
  rewrite /-> IH/.
  rewrite /<- plusn_assoc/.
  reduce //.
  reflexivity.
  }
qed ();



grammaroff ArithmeticNatural;
grammaron ArithmeticInteger;
CheckpointedRef.assign Show.arithmetic (`"integer");



lemma "overloading"
/
  n`6 +n Integer.integer_to_nat (3 + Integer.nat_to_integer n`3) = Integer.integer_to_nat (~ 2 + -1 + 15) : nat
/;

omega.
qed ();



grammaroff ArithmeticInteger;
grammaron ArithmeticNat;
CheckpointedRef.assign Show.arithmetic (`"nat");



lemma "overloading'"
/
  6 + Integer.integer_to_nat (z`3 +z Integer.nat_to_integer 3) = Integer.integer_to_nat (~z z`2 +z z`-1 +z z`15) : nat
/;

omega.
qed ();



lemma "destruct_bar"
/
  forall i (a : U i) (x : bar a) .
    x = x : bar a
/;

inference.
intro /i a x/.
destruct /x/ /y | [z]/.
  {
  reflexivity.
  }

  {
  compatRaw.
  2:{
    compatRaw.
    reflexivity.
    }
  typechecker ();
  }
qed ();



lemma "induct_on_bar"
/
  forall i (a : U i) (x : bar a) .
    x = x : bar a
/;

inference.
intro /i a x/.
induction /x/.
  {
  intro /x/.
  reflexivity.
  }

  {
  intro /[x]/.
  reduce //.
  intro /[IH]/.
  unfold /later at all/.
  compatRaw.
  2:{
    compatRaw.
    hyp /IH/.
    }
  typechecker ();
  }
qed ();



lemma "bindbar_reduce"
/
  forall i (a b : U i) (m : Symbol.symbol -> a) (f : a -> bar b) .
    (bindbar x = later (now (m sym`"The quick red fox jumped over the lazy brown cow.")) in f x) 
    = 
    later (f (m sym`"The quick red fox jumped over the lazy brown cow.")) : bar b
/;

inference.
intro /i a b m f/.
reduce //.
reflexivity.
qed ();



lemma "bindbart_reduce"
/
  forall i (a b : U i) (m : Symbol.symbol -> a) (c : a -> U i) .
    (bindbart x = later (now (m sym`"The quick red fox jumped over the lazy brown cow.")) in c x) 
    = 
    future (c (m sym`"The quick red fox jumped over the lazy brown cow.")) : U i
/;

inference.
intro /i a b m c/.
reduce //.
reflexivity.
qed ();



lemma "boolEq_true"
/
  forall m n .
    m < n
    -> if Nat.ltb m n then unit else void
/;

inference.
intro /m n Hlt/.
boolEq true /Nat.ltb m n/.
  {
  hyp /Hlt/.
  }

  {
  split.
  }
qed ();



lemma "boolEq_false"
/
  forall m n .
    n < m
    -> if Nat.ltb m n then void else unit
/;

inference.
intro /m n Hlt/.
boolEq false /Nat.ltb m n/.
  {
  omega.
  }

  {
  split.
  }
qed ();



define /fact/
/
  fnind fact : nat -> nat of
  | zero . 1
  | succ n . succ n * fact n
//
  nat -> nat
/;

unfold /fact/.
typecheck.
qed ();



lemma "check_bindbar"
/
  forall i (a b : U i) (x : bar a) (f : a -> bar b) .
    (bindbar y = x in f y) : bar b
/;

intro /i a b x f/.
typecheck.
qed ();


lemma "contrapositive"
/
  forall i (a b : U i) .
    not a
    -> (b -> a)
    -> not b
/;

inference.
intro /i a b Hna Hba/.
contrapositive /Hna/.
auto.
qed ();



lemma "not_equal"
/
  1 != 2 : nat
/;

unfold /neq/.
omega.
qed ();



lemma "symbol_inequality"
/
  not (sym`"foo" = sym`"bar" : Symbol.symbol)
/;

rewrite /<- Symbol.istrue_symbol_eqb/.
reduce //.
apply /Bool.not_istrue_false/.
qed ();


lemma "symbol_eqb_test"
/
  if Symbol.symbol_eqb sym`"foo" sym`"bar" then void else unit
/;

reduce //.
split.
qed ();



lemma "length_one"
/
  forall (x : nat) . length (x :: nil) = 1 : nat
(*
  explicit` (`forall nat (fn x . eq nat (length nat (cons nat x (nil nat))) (succ zero)))
*)
/;

intro /x/.
auto.
(* qed should return an error *)
Prover.abandon ();


define /isnil {a} l/
/
  list_case l true (fn _ _ . false)
(*
  explicit` (fn a l . list_case a bool l true (fn v0 v1 . false))
*)
//
  intersect i . forall (a : U i) . list a -> bool
/;

inference.
unfold /isnil/.
introOf /i a l/.
reduce //.
destruct /l/ /| h t/.
  {
  reduce //.
  typecheck.
  }

  {
  reduce //.
  typecheck.
  }
(* qed should return an error *)
Prover.abandon ();



lemma "leqz_reflexivity"
/
  forall a . a <z= a
/;

inference.
intro /a/.
transitivity /a/.
  {
  reflexivity.
  }

  {
  auto.
  }
qed ();



lemma "rewrite_leq"
/
  forall (l m n p : nat) . l <= m -> n <= p -> m <= n -> l <= p
/;

inference.
intro /l m n p Hlm Hnp Hmn/.
rewrite /-> Hnp in Hmn/.
rewrite /<- Hlm in Hmn/.
hyp /Hmn/.
qed ();



lemma "rewrite_leqz"
/
  forall (l m n p : integer) . l <z= m -> n <z= p -> m <z= n -> l <z= p
/;

inference.
intro /l m n p Hlm Hnp Hmn/.
rewrite /-> Hnp in Hmn/.
rewrite /<- Hlm in Hmn/.
hyp /Hmn/.
qed ();



lemma "rewrite_plusz"
/
  forall (m n p : integer) . n <z= p -> m +z n <z= m +z p
/;

intro /m n p Hnp/.
rewrite /<- Hnp/.
reflexivity.
qed ();



lemma "rewrite_plusz_hyp"
/
  forall (m n p q : integer) . p <z= n -> m +z n <z= q -> m +z p <z= q
/;

intro /m n p q Hnp H/.
rewrite /<- Hnp in H/.
hyp /H/.
qed ();



lemma "rewrite_negz"
/
  forall (a b c d : integer) . b <z= a -> c <z= d -> ~z b <z= ~z d -> ~z a <z= ~z c
/;

intro /a b c d Hba Hcd H/.
rewrite /<- Hcd in H/.
rewrite /-> Hba in H/.
hyp /H/.
qed ();



lemma "destruct_hidden"
/
  forall (m n : nat) . { m <= n & unit } -> m = m : nat -> m <= n
/;

intro /m n H1 H2/.
destruct /H1/ /[(H H')]/.
auto.
qed ();



lemma "unhide_hyp"
/
  forall (m n : nat) . { m <= n } -> m <= n & unit
/;

intro /m n H/.
destruct /H/ /[H]/.
unhide.
auto.
qed ();



lemma "trivialize"
/
  forall i (a : U i) (m n : nat) .
    a
    -> (a -> m <= n)
    -> m <= n
/;

inference.
intro /i a m n Ha H/.
trivialize.
auto.
qed ();
Show.showClosed $ Option.valOf $ Constant.definition $ parseConstant /trivialize/;



lemma "trivialize_typecheck"
/
  forall i (a : U i) (m n : a) .
    m = n : a
    -> () : m = n : a
/;

inference.
intro /i a m n H/.
typecheck.
qed ();



lemma "inject_no"
/
  forall i (a : U i) (x : a) .
    nil = x :: nil : list a
    -> void
/;

inference.
intro /i a x H/.
injection /H/.
qed ();



define /duo {a} x y/
/
  x :: y :: nil
//
  intersect i .
  forall (a : U i) .
    a -> a -> list a
/;

introOf /i a x y/.
unfold /duo/.
typecheck.
qed ();



lemma "unfold_duo"
/
  `duo nat 1 2 = 1 :: 2 :: nil : list nat
/;

unfold /duo/.
reduce //.
compat.
qed ();



typedef
/
  datatype U 0
  of
    foobar : type =
    | foo : nat -> foobar
    | bar : foobar
/;


defineRaw /baz n/ /foo (n + 1)/;


lemma "baz_type"
/
  forall n . baz n : foobar
/;

unfold /baz/.
inference.
intro /n/.
sinduction /n/.
reintro /IH/.
typecheck.
qed ();



lemma "symmetries"
  / forall (m n : nat) . m = n : nat -> m = n : nat /;

intro /m n H/.
symmetryIn /H/.
symmetry.
hyp /H/.
qed ();



openModule /Wtype/;


define /natish/
/
  wtype (x : bool) . if x then void else unit
//
  U 0
/;

unfold /natish/.
typecheck.
qed ();



define /zeroish/
/
  (true , (fn _ . ()))
//
  natish
/;

unfold /zeroish , natish/.
typecheck.
reintro /x/.
destruct /x/ /0/.
qed ();



define /succish x/
/
  (false , (fn _ . x))
//
  natish -> natish
/;

unfold /succish , natish at all/.
typecheck.
qed ();



define /natrecish P hz hs n/
/
  wtype_iter bool (fn n . if n then void else unit) P
    (fn x y f .
       if x then
         hz
       else
         hs (y ()) (f ()))
    n
//
  intersect i .
  forall (P : natish -> U i) .
    P zeroish
    -> (forall (m : natish) . P m -> P (succish m))
    -> forall (n : natish) . P n
/;

inference.
assert /natish = (wtype (x : bool) . if x then void else unit) : U 0/ /Heq/.
  {
  unfold /natish/.
  typecheck.
  }
introOf /i P hz hs n/.
unfold /natish in n/.
sinduction /n/.
reintro /IH/.
destruct /n/ /x y/.
destruct /x/ /|/.
  {
  unfold /natrecish/.
  unroll /wtype_iter/.
  reduce //.
  infer /hz/ /H/.
  typecheck.
  unfold /zeroish/.
  subsume /_/.
    {
    unfold /natish/.
    apply /wtype_roll/.
    }
  reduce //.
  compat.
  introEq /x/.
    {
    reintro /x/.
    destruct /x/ /0/.
    }

    {
    destruct /x/ /0/.
    }
  }

  {
  reduce /y/.
  fold /natish in y/.
  unfold /natrecish/.
  unroll /wtype_iter/.
  reduce //.
  fold /natrecish P hz hs _/.
  typecheck.
    {
    subsume /_/.
      {
      unfold /natish/.
      apply /wtype_roll/.
      }
    reduce //.
    unfold /succish/.
    compat.
    reduce //.
    fold /natish/.
    introEq /x/.
    reduce //.
    compat.
    extensionality.
    }

    {
    apply /IH/.
    unfold /precedes/.
    reduce //.
    exists /()/.
    reflexivity.
    }
  }
qed ();



reductions
/
  natrecish P hz hs (zeroish) --> hz ;
  natrecish P hz hs (succish n) --> hs n (natrecish P hz hs n) ;
  unfolding zeroish succish natrecish
  unrolling wtype_iter
/;
