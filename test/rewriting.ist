openModule /Nat/;
openModule /Logic/;
openModule /SyntacticEquality/;
openModule /Partial/;


lemma "rewrite_letnext_eeqtp"
/
  forall i (a : U i) (P Q : a -> U i) (m : future a) .
    (forall (x : a) . P x <:> Q x)
    -> (let next mp = m in future (P mp)) <:> (let next mp = m in future (Q mp))
/;

inference.
intro /i a P Q m Heeq/.
rewrite /-> Heeq within _/.
rewrite /<- Heeq within _/.
rewrite /<- Heeq within _/.
rewrite /-> Heeq within _ at 1/.
rewrite /<- Heeq within _/.
reflexivity.
qed ();



lemma "reduce_seq"
/
  forall i (a b : U i) (m : partial a) (n : a -> partial b) .
    halts m
    -> (seq x = m in n x) = n m : partial b
/;

inference.
intro /i a b m n Hhalt/.
assert /sequal (seq x = m in n x) (n m)/ /H/.
  {
  RuleTactic.seqHaltsSequal.
  hyp /Hhalt/.
  }
rewriteRaw /<- H/.
typecheck.
qed ();



lemma "rewrite_sequal"
/
  forall (x y : nat) (P : nat -> U 0) . x = y : nat -> P x -> P y
/;

intro /x y P Heq Hx/.
so /nat_elemental _# 2 Heq/ /Hseq/.
rewriteRaw /-> Hseq in Hx/.
rewriteRaw /<- Hseq in Hx/.
rewriteRaw /<- Hseq/.
rewriteRaw /-> Hseq/.
rewriteRaw /<- Hseq/.
hyp /Hx/.
qed ();



lemma "rewriting_subtype_into_set_rhs"
/
  forall i (a b c d e : U i) .
    c <: d
    -> (forall (x : a) . { y : b | d <: e })
    -> (forall (x : a) . { y : b | c <: e })
/;

inference.
intro /i a b c d e Hsub H/.
rewrite /<- Hsub within x y in H/.
hyp /H/.
qed ();



fun shouldfail tac = ifthen tac (fail "unexpected success") idtac;


define /myeeqtp a b/
/
  a <:> b
//
  intersect i . U i -> U i -> U i
/;

inference.
unfold /myeeqtp/.
typecheck.
qed ();



lemma "myeeqtp_impl_eeqtp"
/
  forall i (a b : U i) . myeeqtp a b -> a <:> b
/;

inference.
intro /i a b H/.
unfold /myeeqtp in H/.
hyp /H/.
qed ();



lemma "myeeqtp_impl_subtype"
/
  forall i (a b : U i) . myeeqtp a b -> a <: b
/;

inference.
intro /i a b H/.
destruct /H/ /H _/.
hyp /H/.
qed ();



val myeeqtp = parseConstant /myeeqtp/;
val myeeqtp_impl_eeqtp = parseConstant /myeeqtp_impl_eeqtp/;
val myeeqtp_impl_subtype = parseConstant /myeeqtp_impl_subtype/;

(* the order of weakenings here is contrived to test backtracking *)

ConstantTable.insert RewriteInternal.weakeningTable
  myeeqtp
  [
  (Prim.subtype, true, (fns _ _ tac => andthenOn 0 (Backchain.witnessPriority /\Term.Const myeeqtp_impl_subtype\ _ _ _ __/) tac)),
  (Prim.eeqtp, true, (fns _ _ tac => andthenOn 0 (Backchain.witnessPriority /\Term.Const myeeqtp_impl_eeqtp\ _ _ _ __/) tac)),
  ];



lemma "hypothesis_backtrack_failure_subtype"
/
  forall i (a b : U i) (x : a) .
    x = x : a
    -> a <: b
    -> unit
/;

inference.
intro /i a b x H Hsub/.
(* Test that propagation failure due to dependency on a hypothesis does not result in an uncaught exception. *)
shouldfail (rewrite /-> Hsub in x/).
split.
qed ();



lemma "hypothesis_backtrack_failure_entailment"
/
  forall i (a b : U i) (x : a) .
    (a -> b)
    -> x = x : a
/;

inference.
intro /i a b x Himpl/.
fold /implies _ _ in Himpl/.
(* Test that propagation failure due to dependency on a hypothesis does not result in an uncaught exception. *)
shouldfail (rewrite /-> Himpl in x/).
reflexivity.
qed ();



lemma "hypothesis_backtrack_success_myeeqtp"
/
  forall i (a b : U i) (x : a) .
    x = x : a
    -> myeeqtp a b
    -> x : b
/;

inference.
intro /i a b x H Heq/.
rewrite /-> Heq in x/.
hypof.
qed ();



lemma "hypothesis_entailment"
/
  forall i (a b : U i) (x : a) .
    a <: b
    -> x : b
/;

inference.
intro /i a b x Hsub/.
infer /x/ /Hof/.
infer /Hof/ /Hofof/.
shouldfail (rewrite /-> Hsub in Hof/).
clear /Hofof/.
rewrite /-> Hsub in Hof/.
hyp /Hof/.
qed ();
 


lemma "subtype_hypothesis"
/
  forall i (a b : U i) (P : b -> U i) (x : a) .
    a <: { y : b | P y }
    -> { P x }
/;

inference.
intro /i a b P x Hsub/.
rewrite /-> Hsub in x/.
destruct /x/ /[x H]/.
split.
hyp /H/.
qed ();



lemma "iff_into_squash"
/
  forall i (a a' b : U i) .
    a <-> a'
    -> { a } = b : type
    -> { a' } = b : type
/;

inference.
intro /i a a' b Ha H/.
rewrite /-> Ha in H/.
rewrite /<- Ha in H/.
rewrite /<- Ha/.
rewrite /-> Ha/.
rewrite /<- Ha/.
hyp /H/.
qed ();



lemma "arrow_into_squash"
/
  forall i (a a' a'' : U i) (x : { a }) .
    (a -> a')
    -> (a' -> a'')
    -> x : { a'' }
/;

inference.
intro /i a a' a'' x Ha Ha'/.
fold /implies _ _ in Ha in Ha'/.
infer /x/ /Hof/.
rewrite /-> Ha in Hof/.
rewrite /<- Ha'/.
hyp /Hof/.
qed ();



lemma "iff_into_iff"
/
  forall i (a a' b b' : U i) .
    a <-> a'
    -> b <-> b'
    -> a <-> b
    -> a' <-> b'
/;

inference.
intro /i a a' b b' Ha Hb H/.
rewrite /-> Ha in H/.
rewrite /<- Hb/.
hyp /H/.
qed ();



lemma "arrow_into_not"
/
  forall i (a a' a'' : U i) .
    (a -> a')
    -> (a' -> a'')
    -> not a''
    -> not a
/;

inference.
intro /i a a' a'' Ha Ha' H/.
fold /implies _ _ in Ha in Ha'/.
rewrite /<- Ha' in H/.
rewrite /-> Ha/.
hyp /H/.
qed ();



lemma "iff_into_forall_exists"
/
  forall i (a : U i) (b : a -> U i) (c c' : forall (x : a) . b x -> U i) .
    (forall x y . c x y <-> c' x y)
    -> (forall (x : a) . exists (y : b x) . c x y)
    -> (forall (x : a) . exists (y : b x) . c' x y)
/;

inference.
intro /i a b c c' Hc H/.
rewrite /-> Hc within x y in H/.
rewrite /<- Hc within x y in H/.
rewrite /<- Hc within x y/.
rewrite /-> Hc within x y/.
rewrite /<- Hc within x y/.
hyp /H/.
qed ();



lemma "iff_into_stuff"
/
  forall i (a b b' c : U i) .
    b <-> b'
    -> future (a -> not (unit & (void % b % void) & unit) -> c)
    -> future (a -> not (unit & (void % b' % void) & unit) -> c)
/;

inference.
intro /i a b b' c Hb H/.
rewrite /-> Hb in H/.
rewrite /<- Hb in H/.
rewrite /<- Hb/.
rewrite /-> Hb/.
rewrite /<- Hb/.
hyp /H/.
qed ();



lemma "eqtp_into_set"
/
  forall i (a a' : U i) (b b' : a' -> U i) (c : U i) .
    a = a' : type
    -> (forall x . b x <-> b' x)
    -> { x : a | b x } = c : type
    -> { x : a' | b' x } = c : type
/;

inference.
intro /i a a' b b' c Ha Hb H/.
rewrite /-> Ha in H/.
rewrite /<- Ha in H/.
rewrite /-> Hb within x in H/.
rewrite /<- Hb within x in H/.
rewrite /<- Ha/.
rewrite /-> Ha/.
rewrite /<- Ha/.
rewrite /<- Hb within x/.
rewrite /-> Hb within x/.
rewrite /<- Hb within x/.
hyp /H/.
qed ();



lemma "eqtp_into_iset"
/
  forall i (a a' : U i) (b : a' -> U i) (c : U i) .
    a = a' : type
    -> (iset (x : a) . b x) = c : type
    -> (iset (x : a') . b x) = c : type
/;

inference.
intro /i a a' b c Ha H/.
rewrite /-> Ha in H/.
rewrite /<- Ha in H/.
rewrite /<- Ha/.
rewrite /-> Ha/.
rewrite /<- Ha/.
hyp /H/.
qed ();



lemma "eeqtp_into_set0"
/
  forall i (a a' : U i) (b : a -> U i) .
    a <:> a'
    -> { x : a | b x }
    -> { x : a' | b x }
/;

inference.
intro /i a a' b Heq H/.
rewrite /-> Heq in H/.
rewrite /<- Heq in H/.
rewrite /<- Heq/.
rewrite /-> Heq/.
rewrite /<- Heq/.
hyp /H/.
qed ();



lemma "eeqtp_into_iset0"
/
  forall i (a a' : U i) (b : a -> U i) .
    a <:> a'
    -> (iset (x : a) . b x)
    -> (iset (x : a') . b x)
/;

inference.
intro /i a a' b Heq H/.
rewrite /-> Heq in H/.
rewrite /<- Heq in H/.
rewrite /<- Heq/.
rewrite /-> Heq/.
rewrite /<- Heq/.
hyp /H/.
qed ();



lemma "iff_into_iset1"
/
  forall i (a : U i) (b b' : a -> U i) .
    (forall x . b x <-> b' x)
    -> (iset (x : a) . b x)
    -> (iset (x : a) . b' x)
/;

inference.
intro /i a b b' Hb H/.
rewrite /-> Hb within x in H/.
rewrite /<- Hb within x in H/.
rewrite /<- Hb within x/.
rewrite /-> Hb within x/.
rewrite /<- Hb within x/.
hyp /H/.
qed ();



lemma "eeqtp_into_guard"
/
  forall i (a a' b b' : U i) .
    a <-> a'
    -> b <:> b'
    -> (a -g> b)
    -> (a' -g> b')
/;

inference.
intro /i a a' b b' Ha Hb H/.
rewrite /-> Ha in H/.
rewrite /<- Ha in H/.
rewrite /-> Hb in H/.
rewrite /<- Hb in H/.
rewrite /<- Ha/.
rewrite /-> Ha/.
rewrite /<- Ha/.
rewrite /<- Hb/.
rewrite /-> Hb/.
rewrite /<- Hb/.
hyp /H/.
qed ();



lemma "weaken_iff"
/
  forall i (a b : U i) .
    a <-> b
    -> a
    -> b
/;

inference.
intro /i a b Hab H/.
rewrite /-> Hab in H/.
rewrite /<- Hab in H/.
rewrite /<- Hab/.
rewrite /-> Hab/.
rewrite /<- Hab/.
hyp /H/.
qed ();



lemma "weaken_eeqtp_to_iff"
/
  forall i (a : U i) (b b' : a -> U i) (c : U i) .
    (forall x . b x <:> b' x)
    -> { x : a | b x } = c : type
    -> { x : a | b' x } = c : type
/;

inference.
intro /i a b b' c Hb H/.
rewrite /-> Hb within x in H/.
rewrite /<- Hb within x in H/.
rewrite /<- Hb within x/.
rewrite /-> Hb within x/.
rewrite /<- Hb within x/.
hyp /H/.
qed ();



lemma "subtype_into_set"
/
  forall i (a a' : U i) (b b' : a' -> U i) .
    a <: a'
    -> (forall x . b x -> b' x)
    -> forall (y : { x : a | b x }) . y : { x : a' | b' x }
/;

inference.
intro /i a a' b b' Ha Hb y/.
fold /implies _ _ within _ in Hb/.
infer /y/ /Hof/.
rewrite /-> Ha in Hof/.
rewrite /<- Hb within x/.
hyp /Hof/.
qed ();



lemma "subtype_into_iset"
/
  forall i (a a' : U i) (b b' : a' -> U i) .
    a <: a'
    -> (forall x . b x -> b' x)
    -> forall (y : (iset (x : a) . b x)) . y : (iset (x : a') . b' x)
/;

inference.
intro /i a a' b b' Ha Hb y/.
fold /implies _ _ within _ in Hb/.
infer /y/ /Hof/.
rewrite /-> Ha in Hof/.
rewrite /<- Hb within x/.
hyp /Hof/.
qed ();



lemma "subtype_into_guard"
/
  forall i (a a' a'' b b' b'' c : U i) .
    (a' -> a)
    -> (a'' -> a')
    -> b <: b'
    -> b' <: b''
    -> c <: (a -g> b)
    -> c <: (a'' -g> b'')
/;

inference.
intro /i a a' a'' b b' b'' c Ha Ha' Hb Hb' H/.
fold /implies _ _ in Ha in Ha'/.
rewrite /<- Ha in H/.
rewrite /-> Ha'/.
rewrite /-> Hb in H/.
rewrite /<- Hb'/.
hyp /H/.
qed ();




lemma "subtype_into_iu"
/
  forall i (a : U i) (b : a -> U i) (c c' c'' : forall (x : a) . b x -> U i) .
    (forall x y . c x y <: c' x y)
    -> (forall x y . c' x y <: c'' x y)
    -> (intersect (x : a) . union (y : b x) . c x y)
    -> (intersect (x : a) . union (y : b x) . c'' x y)
/;

inference.
intro /i a b c c' c'' Hc Hc' H/.
rewrite /-> Hc within x y in H/.
rewrite /<- Hc' within x y/.
hyp /H/.
qed ();



lemma "subtype_into_intersect"
/
  forall i (a a' : U i) (b : a -> U i) (c : U i) .
    a' <: a
    -> c <: (intersect (x : a) . b x)
    -> c <: (intersect (x : a') . b x)
/;

inference.
intro /i a a' b c Ha H/.
rewrite /<- Ha in H/.
hyp /H/.
qed ();



lemma "subtype_into_union"
/
  forall i (a a' : U i) (b : a' -> U i) (c : U i) .
    a <: a'
    -> c <: (union (x : a) . b x)
    -> c <: (union (x : a') . b x)
/;

inference.
intro /i a a' b c Ha H/.
rewrite /<- Ha/.
hyp /H/.
qed ();



lemma "eeqtp_into_fiug"
/
  forall i (a : U i) (b : a -> U i) (c d d' : forall (x : a) . b x -> U i) (e : U i) .
    (forall x y . d x y <:> d' x y)
   -> future (intersect (x : a) . union (y : b x) . c x y -g> d x y)
   -> future (intersect (x : a) . union (y : b x) . c x y -g> d' x y)
/;

inference.
intro /i a b c d d' e Hd H/.
rewrite /-> Hd within x y in H/.
rewrite /<- Hd within x y in H/.
rewrite /<- Hd within x y/.
rewrite /-> Hd within x y/.
rewrite /<- Hd within x y/.
hyp /H/.
qed ();



lemma "eeqtp_into_intersect0"
/
  forall i (a a' : U i) (b : a -> U i) .
    a <:> a'
    -> (intersect (x : a) . b x)
    -> (intersect (x : a') . b x)
/;

inference.
intro /i a a' b Heq H/.
rewrite /-> Heq in H/.
rewrite /<- Heq in H/.
rewrite /<- Heq/.
rewrite /-> Heq/.
rewrite /<- Heq/.
hyp /H/.
qed ();



lemma "eeqtp_into_union0"
/
  forall i (a a' : U i) (b : a -> U i) .
    a <:> a'
    -> (union (x : a) . b x)
    -> (union (x : a') . b x)
/;

inference.
intro /i a a' b Heq H/.
rewrite /-> Heq in H/.
rewrite /<- Heq in H/.
rewrite /<- Heq/.
rewrite /-> Heq/.
rewrite /<- Heq/.
hyp /H/.
qed ();



lemma "subtype_into_stuff"
/
  forall i (a : U i) (b : a -> U i) (c c' c'' d d' d'' : forall (x : a) . b x -> U i) (e : U i) .
    (forall x y . c'' x y <: c' x y)
    -> (forall x y . c' x y <: c x y)
    -> (forall x y . d x y <: d' x y)
    -> (forall x y . d' x y <: d'' x y)
    -> e <: (forall (x : a) . exists (y : b x) . future (c x y -> (unit & (void % d x y % void) & unit)))
    -> e <: (forall (x : a) . exists (y : b x) . future (c'' x y -> (unit & (void % d'' x y % void) & unit)))
/;

inference.
intro /i a b c c' c'' d d' d'' e Hc' Hc Hd Hd' H/.
rewrite /<- Hc within x y in H/.
rewrite /-> Hc' within x y/.
rewrite /-> Hd within x y in H/.
rewrite /<- Hd' within x y/.
hyp /H/.
qed ();



lemma "subtype_into_forall"
/
  forall i (a a' : U i) (b : a -> U i) (c : U i) .
    a' <: a
    -> c <: (forall (x : a) . b x)
    -> c <: (forall (x : a') . b x)
/;

inference.
intro /i a a' b c Ha H/.
rewrite /<- Ha in H/.
hyp /H/.
qed ();



lemma "subtype_into_exists"
/
  forall i (a a' : U i) (b : a' -> U i) (c : U i) .
    a <: a'
    -> c <: (exists (x : a) . b x)
    -> c <: (exists (x : a') . b x)
/;

inference.
intro /i a a' b c Ha H/.
rewrite /<- Ha/.
hyp /H/.
qed ();



lemma "eqtp_into_guard"
/
  forall i (a a' b b' : U i) .
    a <-> a'
    -> b = b' : type
    -> (a -g> b)
    -> (a' -g> b')
/;

inference.
intro /i a a' b b' Ha Hb H/.
rewrite /-> Ha in H/.
rewrite /<- Ha in H/.
rewrite /<- Ha/.
rewrite /-> Ha/.
rewrite /<- Ha/.
rewrite /-> Hb in H/.
rewrite /<- Hb in H/.
rewrite /<- Hb/.
rewrite /-> Hb/.
rewrite /<- Hb/.
hyp /H/.
qed ();



lemma "eqtp_into_more_stuff"
/
  forall i (f f' a a' : U i) (b b' : a -> U i) (c c' : forall (x : a) . b x -> U i) (d d' e : forall (x : a) (y : b x) . c x y -> U i) .
    f = f' : type
    -> a = a' : type
    -> (forall x . b x = b' x : type)
    -> (forall x y . c x y = c' x y : type)
    -> (forall x y z . d x y z = d' x y z : type)
    -> (f -g> future (intersect (x : a) . union (y : b x) . { z : iset (z : c x y) . d x y z | e x y z }))
    -> f' -g> future (intersect (x : a') . union (y : b' x) . { z : iset (z : c' x y) . d' x y z | e x y z })
/;

inference.
intro /i f f' a a' b b' c c' d d' e Hf Ha Hb Hc Hd H/.
rewrite /-> Hd within x y z in H/.
rewrite /<- Hd within x y z in H/.
rewrite /<- Hd within x y z/.
rewrite /-> Hd within x y z/.
rewrite /<- Hd within x y z/.
rewrite /-> Hc within x y in H/.
rewrite /<- Hc within x y in H/.
rewrite /<- Hc within x y/.
rewrite /-> Hc within x y/.
rewrite /<- Hc within x y/.
rewrite /-> Hb within x in H/.
rewrite /<- Hb within x in H/.
rewrite /<- Hb within x/.
rewrite /-> Hb within x/.
rewrite /<- Hb within x/.
rewrite /-> Ha in H/.
rewrite /<- Ha in H/.
rewrite /<- Ha/.
rewrite /-> Ha/.
rewrite /<- Ha/.
rewrite /-> Hf in H/.
rewrite /<- Hf in H/.
rewrite /<- Hf/.
rewrite /-> Hf/.
rewrite /<- Hf/.
hyp /H/.
qed ();



lemma "eqtp_into_stuff"
/
  forall i (a : U i) (b : a -> U i) (c c' d e : forall (x : a) . b x -> U i) .
    (forall (x : a) (y : b x) . (c x y = c' x y : type))
    -> (forall (x : a) . exists (y : b x) . d x y -> (unit & (void % c x y % void) & unit) -> e x y)
    -> (forall (x : a) . exists (y : b x) . d x y -> (unit & (void % c' x y % void) & unit) -> e x y)
/;

inference.
intro /i a b c c' d e Hc Hall/.
rewrite /<- Hc within x y/.
rewrite /-> Hc within x y/.
rewrite /-> Hc within x y in Hall/.
hyp /Hall/.
qed ();



lemma "eqtp_into_forall0"
/
  forall i (a a' : U i) (b : a -> U i) .
    a = a' : type
    -> (forall (x : a) . b x)
    -> (forall (x : a') . b x)
/;

inference.
intro /i a a' b Heq H/.
rewrite /-> Heq in H/.
rewrite /<- Heq in H/.
rewrite /<- Heq/.
rewrite /-> Heq/.
rewrite /<- Heq/.
hyp /H/.
qed ();



lemma "eqtp_into_exists0"
/
  forall i (a a' : U i) (b : a -> U i) .
    a = a' : type
    -> (exists (x : a) . b x)
    -> (exists (x : a') . b x)
/;

inference.
intro /i a a' b Heq H/.
rewrite /-> Heq in H/.
rewrite /<- Heq in H/.
rewrite /<- Heq/.
rewrite /-> Heq/.
rewrite /<- Heq/.
hyp /H/.
qed ();



lemma "eqtp_into_eqtp"
/
  forall i (a a' b b' : U i) .
    a = a' : type
    -> b = b' : type
    -> (a = b : type) = (a' = b' : type) : type
/;

inference.
intro /i a a' b b' Heqa Heqb/.
rewrite /-> Heqa/.
rewrite /<- Heqb/.
reflexivity.
qed ();



lemma "eqtp_into_equniv"
/
  forall i (a a' b b' : U i) .
    a = a' : type
    -> b = b' : type
    -> (a = b : type) = (a' = b' : type) : U i
/;

inference.
intro /i a a' b b' Heqa Heqb/.
rewrite /-> Heqa/.
rewrite /<- Heqb/.
reflexivity.
qed ();



lemma "eeqtp_into_stuff"
/
  forall i (a : U i) (b : a -> U i) (c c' d e : forall (x : a) . b x -> U i) .
    (forall (x : a) (y : b x) . c x y <:> c' x y)
    -> (forall (x : a) . exists (y : b x) . d x y -> (unit & (void % c x y % void) & unit) -> e x y)
    -> (forall (x : a) . exists (y : b x) . d x y -> (unit & (void % c' x y % void) & unit) -> e x y)
/;

inference.
intro /i a b c c' d e Hc Hall/.
rewrite /<- Hc within x y/.
rewrite /-> Hc within x y/.
rewrite /-> Hc within x y in Hall/.
hyp /Hall/.
qed ();



lemma "eeqtp_into_forall0"
/
  forall i (a a' : U i) (b : a -> U i) .
    a <:> a'
    -> (forall (x : a) . b x)
    -> (forall (x : a') . b x)
/;

inference.
intro /i a a' b Heq H/.
rewrite /-> Heq in H/.
rewrite /<- Heq in H/.
rewrite /<- Heq/.
rewrite /-> Heq/.
rewrite /<- Heq/.
hyp /H/.
qed ();



lemma "eeqtp_into_exists0"
/
  forall i (a a' : U i) (b : a -> U i) .
    a <:> a'
    -> (exists (x : a) . b x)
    -> (exists (x : a') . b x)
/;

inference.
intro /i a a' b Heq H/.
rewrite /-> Heq in H/.
rewrite /<- Heq in H/.
rewrite /<- Heq/.
rewrite /-> Heq/.
rewrite /<- Heq/.
hyp /H/.
qed ();



lemma "subtype_into_subtype"
/
  forall i (a b c d e f : U i) .
    a <: b
    -> b <: c
    -> c <: d
    -> d <: e
    -> e <: f
    -> a <: f
/;

inference.
intro /i a b c d e f Hab Hbc Hcd Hde Hef/.
rewrite /-> Hab/.
rewrite /<- Hef/.
rewrite /<- Hbc in Hcd/.
rewrite /-> Hde in Hcd/.
hyp /Hcd/.
qed ();



lemma "subtype_into_of"
/
  forall i (a b c : U i) (x : a) .
    a <: b
    -> b <: c
    -> x : c
/;

inference.
intro /i a b c x Hab Hbc/.
infer /x/ /Hof/.
rewrite /<- Hbc/.
rewrite /-> Hab in Hof/.
hyp /Hof/.
qed ();



lemma "subtype_into_eq"
/
  forall i (a b c : U i) (x y : a) .
    a <: b
    -> b <: c
    -> x = y : a
    -> x = y : c
/;

inference.
intro /i a b c x y Hab Hbc Heq/.
rewrite /-> Hab in Heq/.
rewrite /<- Hbc/.
hyp /Heq/.
qed ();



lemma "eeqtp_into_of"
/
  forall i (a b : U i) (x : a) .
    a <:> b
    -> x : b
/;

inference.
intro /i a b x Hab/.
rewrite /-> Hab in x/.
rewrite /<- Hab in x/.
infer /x/ /Hof/.
rewrite /-> Hab in Hof/.
rewrite /<- Hab in Hof/.
rewrite /<- Hab/.
rewrite /-> Hab/.
rewrite /<- Hab/.
hyp /Hof/.
qed ();



lemma "subtype_becomes_arrow_into_stuff"
/
  forall i (a : U i) (b : a -> U i) (c c' c'' d e f : forall (x : a) . b x -> U i) .
    (forall (x : a) (y : b x) . c x y <: c' x y)
    -> (forall (x : a) (y : b x) . c' x y <: c'' x y)
    -> future (forall (x : a) . exists (y : b x) . e x y -> (unit & (void % c x y <: d x y % void) & unit) -> f x y)
    -> future (forall (x : a) . exists (y : b x) . e x y -> (unit & (void % c'' x y <: d x y % void) & unit) -> f x y)
/;

inference.
intro /i a b c c' c'' d e f Hc Hc' H/.
rewrite /-> Hc within x y in H/.
rewrite /<- Hc' within x y/.
hyp /H/.
qed ();



lemma "subtype_becomes_entailment_into_stuff"
/
  forall i (a : U i) (b : a -> U i) (c c' c'' d e f : forall (x : a) . b x -> U i) (g : forall (x : a) (y : b x) . c x y) .
    (forall (x : a) (y : b x) . c x y <: c' x y)
    -> (forall (x : a) (y : b x) . c' x y <: c'' x y)
    -> (forall (x : a) (y : b x) . e x y -> (unit & (g x y : c x y) & unit))
    -> (forall (x : a) (y : b x) . e x y -> (unit & (g x y : c'' x y) & unit))
/;

inference.
intro /i a b c c' c'' d e f g Hc Hc' H/.
rewrite /-> Hc within x y in H/.
rewrite /<- Hc' within x y/.
hyp /H/.
qed ();



lemma "eqtp_into_dprod"
/
  forall i (a b b' c : U i) .
    b = b' : type
    -> a &d b &d c
    -> a &d b' &d c
/;

inference.
intro /i a b b' c Heq H/.
rewrite /-> Heq in H/.
rewrite /<- Heq in H/.
rewrite /<- Heq/.
rewrite /-> Heq/.
rewrite /<- Heq/.
hyp /H/.
qed ();



lemma "eeqtp_into_dprod"
/
  forall i (a b b' c : U i) .
    b <:> b'
    -> a &d b &d c
    -> a &d b' &d c
/;

inference.
intro /i a b b' c Heq H/.
rewrite /-> Heq in H/.
rewrite /<- Heq in H/.
rewrite /<- Heq/.
rewrite /-> Heq/.
rewrite /<- Heq/.
hyp /H/.
qed ();



lemma "subtype_into_dprod"
/
  forall i (a b b' b'' c : U i) .
    b <: b'
    -> b' <: b''
    -> a &d b &d c
    -> a &d b'' &d c
/;

inference.
intro /i a b b' b'' c Hsub Hsub' H/.
rewrite /-> Hsub in H/.
rewrite /<- Hsub'/.
hyp /H/.
qed ();



lemma "iff_into_dprod"
/
  forall i (a b b' c : U i) .
    b <-> b'
    -> a &d b &d c
    -> a &d b' &d c
/;

inference.
intro /i a b b' c Heq H/.
rewrite /-> Heq in H/.
rewrite /<- Heq in H/.
rewrite /<- Heq/.
rewrite /-> Heq/.
rewrite /<- Heq/.
hyp /H/.
qed ();



lemma "arrow_into_dprod1"
/
  forall i (a b b' b'' c : U i) .
    (b -> b')
    -> (b' -> b'')
    -> a &d b &d c
    -> a &d b'' &d c
/;

inference.
intro /i a b b' b'' c Himpl Himpl' H/.
fold /implies _ _ in Himpl in Himpl'/.
rewrite /-> Himpl in H/.
rewrite /<- Himpl'/.
hyp /H/.
qed ();



lemma "subtype_becomes_entailment_into_dprod"
/
  forall i (a b c : U i) (x : a) .
    a <: b
    -> b <: c
    -> (unit &d (x : a) &d unit)
    -> (unit &d (x : c) &d unit)
/;

inference.
intro /i a b c x Hab Hbc H/.
rewrite /-> Hab in H/.
rewrite /<- Hbc/.
hyp /H/.
qed ();



define /silly m n/
/
  m = 0 : nat <-> n = 0 : nat
//
  nat -> nat -> U 0
/;

unfold /silly/.
typecheck.
qed ();



define /cap n/
/
  min n 1
//
  nat -> nat
/;

unfold /cap/.
typecheck.
qed ();



lemma "compat_silly_cap"
/
  forall m n .
    silly m n
    -> cap m = cap n : nat
/;

inference.
intro /m n H/.
unfold /silly in H/.
destruct /m/ /| m/.
  {
  so /H #1 ()/ /Heq/.
  rewrite /-> Heq/.
  reflexivity.
  }
destruct /n/ /| n/.
  {
  so /H #2 ()/ /Heq/.
  injection /Heq/.
  }
unfold /cap at all/.
rewrite /-> min_succ at all/.
rewrite /-> min_ann_r at all/.
reflexivity.
qed ();



val silly = parseConstant /silly/;
val cap = parseConstant /cap/;
val compat_silly_cap = parseConstant /compat_silly_cap/;

RewriteInternal.CICTable.insert RewriteInternal.compatibilityTable
  (cap, 0, silly)
  (RewriteTypes.Equality (Term.Const Prim.nat), true, 0,
   (fns _ _ tac => andthenOn 0 (Backchain.witnessPriority /\Term.Const compat_silly_cap\ _ _ __/) tac));



lemma "rewrite_to_equality"
/ 
  forall i (a : U i) (b : nat -> U i) (m n : nat) .
    b (cap m)
    -> silly m n
    -> b (cap n) 
/;

intro /i a b m n H Heq/.
rewrite /<- Heq/.
rewrite /-> Heq/.
rewrite /-> Heq in H/.
rewrite /<- Heq in H/.
rewrite /-> Heq in H/.
hyp /H/.
qed ();



lemma "rewrite_with_spine"
/
  forall i (a b c : U i) (f g : (a -> b) & c) (x : a) .
    f = g : ((a -> b) & c)
    -> f #1 x = g #1 x : b
/;

inference.
intro /i a b c f g x Heq/.
rewrite /-> Heq/.
reflexivity.
qed ();



lemma "rewrite_leq"
  / forall i (a b c : U i) (m n n' p : nat) .
      (a -> void % b & leq m (plus n p) & c % void)
      -> leq n n'
      -> a
      -> leq m (plus n' p) /;
 
intro /i a b c m n n' p H Hleq Ha/.
moveBefore /Hleq/ /H/.
rewrite /-> Hleq in H/.
so /H Ha/ /0 | H1 | 0/.
apply /H1/.
qed ();



lemma "rewrite_leq_exists"
  / forall i (a : U i) (b : a -> U i) (m n n' p : nat) .
      (exists (x : a) . b x -> leq m (plus n p))
      -> leq n n'
      -> exists (x : a) . b x -> leq m (plus n' p) /;
 
intro /i a b m n n' p H Hleq/.
moveBefore /Hleq/ /H/.
rewrite /-> Hleq in H/.
hyp /H/.
qed ();



lemma "rewrite_leq_forall"
  / forall i (a : U i) (b : a -> U i) (m n n' p : nat) .
      (forall (x : a) . b x -> leq m (plus n p))
      -> leq n n'
      -> forall (x : a) . b x -> leq m (plus n' p) /;
 
intro /i a b m n n' p H Hleq x Ha/.
moveBefore /Hleq/ /H/.
testRewrite /-> Hleq in H , <- Hleq/;
rewrite /-> Hleq in H/.
apply /H/ >>> [hyp /Ha/, idtac].
(* Should see:
i : level
a : U i
b : a -> U i
m : nat
n : nat
n' : nat
p : nat
Hleq : n <= n'
H : forall (x : a) . b x -> m <= plus n' p
x : a
Ha : b x
|-
x : a
*)
hypof.
qed ();



lemma "rewrite_leq_dom"
  / forall i (a : U i) (m n p p' : nat) .
      (leq m (plus n p) -> a)
      -> leq p' p
      -> leq m (plus n p')
      -> a /;
 
intro /i a m n p p' H Hleq Hmnp/.
moveBefore /Hleq/ /H/.
rewrite /<- Hleq in H/.
apply /H/.
hyp /Hmnp/.
qed ();



define /less n n'/
/
  2 + n <= n'
//
  nat -> nat -> U 0
/;

unfold /less/.
typecheck.
qed ();



lemma "weaken_less"
/
  forall n n' . less n n' -> leq n n'
/;

inference.
intro /n n' H/.
unfold /less in H/.
apply /leq_trans _ (2 + n)/ >> auto.
apply /plus_leq 0 2 n n/.
  {
  apply /leq_0_min/.
  }

  {
  apply /leq_refl/.
  }
qed ();


val less = parseConstant /less/;
val leq = parseConstant /leq/;
val weaken_less = parseConstant /weaken_less/;

ConstantTable.insert RewriteInternal.weakeningTable 
  less
  [(leq, true, (fns _ _ tac => andthenOn 0 (Backchain.witnessPriority /\Term.Const weaken_less\ _ _ __/) tac))];



lemma "reduceUsing_less"
/
  forall x y .
    2 + x <= y
    -> less x y
/;

inference.
intro /x y H/.
reduceUsing /\Reduction.unfold\/.
hyp /H/.
qed ();



lemma "rewrite_less"
/ 
  forall i (a : U i) (m n1 n2 n3 p : nat) .
    (a -> leq m (plus n1 p))
    -> less n1 n2
    -> less n2 n3
    -> a
    -> leq m (plus n3 p) 
/;
 
intro /i a m n1 n2 n3 p H H12 H23 Ha/.
rewrite /-> H12 in H/.
rewrite /<- H23/.
apply /H/.
hyp /Ha/.
qed ();



lemma "rewrite1"
/
  forall i (a b : U i) (c : (a -> a -> b) -> U i) (f g : a -> b) .
    (f = g : (a -> b))
    -> c (fn y x . f x)
    -> c (fn y x . g x)
/;

intro /i a b c f g Heq H/.
rewrite /<- Heq/.
witness /H/.
Prover.qed ();



lemma "rewrite2"
  / forall i (a b d : U i) (c : (a -> a -> b) -> U i) (f g : a -> b) .
       (d -> f = g : (a -> b))
       -> d
       -> c (fn y x . f x)
       -> c (fn y x . g x) /;

intro /i a b d c f g Heq Hd H/.
rewrite /-> Heq in H/.
  {
  hyp /Hd/.
  }
hyp /H/.
Prover.qed ();



lemma "rewrite3"
  / forall i (a b : U i) (c : b -> U i) (f g : a -> b) (x : a) .
       (forall (x : a) . f x = g x : b)
       -> c (f x)
       -> c (g x) /;

intro /i a b c f g x Heq H/.
rewrite /<- Heq/.
hyp /H/.
Prover.qed ();



lemma "rewrite4"
  / forall i (a b : U i) (c : b -> U i) (f g : a -> b) (x : a) .
       (forall (x : a) . f x = g x : b)
       -> c (f x)
       -> c (g x) /;

intro /i a b c f g x Heq H/.
rewrite /-> Heq in H/.
hyp /H/.
Prover.qed ();



lemma "rewrite5"
  / forall i (a b : U i) (c : (a -> a -> b) -> U i) (f g : a -> b) .
       (forall (x : a) . f x = g x : b)
       -> c (fn y x . f x)
       -> c (fn y x . g x) /;

intro /i a b c f g Heq H/.
rewrite /-> Heq within _ in H/.
witness /H/.
Prover.qed ();



lemma "replace"
  / forall i (a : U i) (b : a -> U i) (x y : a) . (y = x : a) -> b x -> b y /;

intro /i a b x y Heq H/.
testRewrite /\Rewrite.replaceRew [] /y/ /x/ /a/\ in concl/;
testRewrite /y = x : a/;
rewrite /y = x : a/.
  {
  hyp /Heq/.
  }
hyp /H/.
Prover.qed ();



lemma "replace_hyp"
  / forall i (a : U i) (b : a -> U i) (x y : a) . (y = x : a) -> b x -> b y /;

intro /i a b x y Heq H/.
testRewrite /\Rewrite.replaceRew [] /x/ /y/ /a/\ in H/;
rewrite /x = y : a in H at 0/.
  {
  symmetry.
  hyp /Heq/.
  }
hyp /H/.
Prover.qed ();



lemma "replace_binder"
  / forall i (a b : U i) (c : (a -> a -> b) -> U i) (f g : a -> b) .
       (f = g : (a -> b))
       -> c (fn y x . f x)
       -> c (fn y x . g x) /;

intro /i a b c f g Heq H/.
testRewrite /\Rewrite.replaceRew (parseOIdents /x/) /g x/ /f x/ /b/\ in concl/;
rewrite /g x = f x : b within x/.
  {
  symmetry.
  rewrite /-> Heq/.
  reflexivity.
  }
hyp /H/.
Prover.qed ();



lemma "replace_binder_hyp"
  / forall i (a b : U i) (c : (a -> a -> b) -> U i) (f g : a -> b) .
       (f = g : (a -> b))
       -> c (fn y x . f x)
       -> c (fn y x . g x) /;

intro /i a b c f g Heq H/.
testRewrite /\Rewrite.replaceRew (parseOIdents /x/) /f x/ /g x/ /b/\ in H/;
rewrite /f x' = g x' : b within x' in H/.
  {
  reintro /x'/.
  rewrite /-> Heq/.
  reflexivity.
  }
hyp /H/.
Prover.qed ();



lemma "replace_with_evar"
  / forall i (a b : U i) (c : (a -> a -> b) -> U i) (f g : a -> b) .
       (forall (x : a) . f x = g x : b)
       -> c (fn y x . f x)
       -> c (fn y x . g x) /;

intro /i a b c f g Heq H/.
let val e = Term.evar () in rewrite /g \e\ = f \e\ : b within _/ end.
  {
  symmetry.
  apply /Heq/.
  }
hyp /H/.
Prover.qed ();



lemma "unfold"
  / forall i (a : U i) . (a -> a) -> a -> a /;

unfold /arrow in concl at 2/.
showPosition /concl at 11/;
reduce /concl/.
showPosition /concl at 11/;
convert /((fn v0 v1 . forall (v2 : v0) . v1) a a) within a in concl at pos 11/.
fold /arrow/.
unfold /arrow in concl at 2/.
showPosition /concl at 11/;
whreduce /concl at 11/.
testRewrite /\Rewrite.foldRew (parseOIdents /a/) /a -> a/\ in concl at 0/;
idtac.
fold /a -> a within a in concl at 0/.
intro /i a x y/.
unfold /arrow in x/.
whreduce /x at 0/.
showPosition /x at 0/;
convert /((fn v0 v1 . forall (v2 : v0) . v1) a a) in x at 0/.
reduce /x/.
showPosition /x at 1/;
fold /a -> a in x/.
apply /x/.
hyp /y/.
Prover.qed ();
