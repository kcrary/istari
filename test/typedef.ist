
typedef
/
  datatype
    intersect (i : level) .
    intermediate (a : U i) .
    forall (b : U i) .
    U i
  of
    tree : nat -> type =
    | Empty : tree 0
    | Node : forall (n : nat) . b -> forest n -> tree (succ n)
    | One : forall (n : nat) . tree n -> tree n
  
    and
    forest : nat -> type =
    | Nil : forest 0
    | Sing : a -> forest 1
    | Cons : forall (m n : nat) . tree m -> forest n -> forest (m + n)
/;



define /strange a b/
/
  fnind strange : tree [a b] __ -> nat of
  | One _ _ . 1
  | Node n _ _ . succ n
  | _ . 0

  and strange' : forall (x : forest n) . x = x : forest a b n of
  | _ . ()
//
  intersect i .  forall (a b : U i) n . tree a b n -> nat
/;

inference.
unfold /strange/.
typecheck.
qed ();



(* test these out of order from the datatype *)
defineInd /a b/
/
  forestsize : forest __ -> nat of
  | Nil . 0
  | Sing _ . 1
  | Cons _ _ t f . treesize t + forestsize f
  and
  treesize : tree [a b] __ -> nat of
  | Empty . 0
  | Node _ x f . succ (forestsize f)
  | One _ t . treesize t
//
  intersect i . forall (a b : U i) n . forest a b n -> nat
  and
  intersect i . forall (a b : U i) n . tree a b n -> nat
/;



(* test with one of the datatypes missing *)
defineInd /a b/
/
  badforestsize : forest __ -> nat of
  | Nil . 0
  | Sing _ . 1
  | Cons _ _ t f . 2
//
  intersect i . forall (a b : U i) n . forest a b n -> nat
/;



definemutrecRaw /a b/
/
  treesize' m x =
    (fnind _ : tree [a b] _ -> nat of
     | Empty . 0
     | Node n y f . succ (forestsize' n f)
     | One n t . treesize' n t) m x

  and
  forestsize' m x =
    (fnind _ : forest [a b] _ -> nat of
     | Nil . 0
     | Sing y . 1
     | Cons n p t f . treesize' n t + forestsize' p f) m x
/;



lemma "treesize'_forestsize'_type"
/
  (treesize' : intersect i . forall (a b : U i) n . tree a b n -> nat)
  &
  (forestsize' : intersect i . forall (a b : U i) n . forest a b n -> nat)
/;

inference.
assert 
  /forall i (a b : U i) (x : tree_skel a b) .
     (forall n (t : tree a b n) .
        tree_strip t = x : tree_skel a b
        -> treesize' a b n t : nat)
     &
     (forall n (f : forest a b n) .
        forest_strip f = x : tree_skel a b
        -> forestsize' a b n f : nat)
  / /H/.
  {
  inference.
  intro /i a b x/.
  so /tree_subterm_well_founded _# 3 x/ /Hwf/.
  sinduction /Hwf/.
  reintro /IH/.
  split.
    {
    intro /n t Heqx/.
    destruct /t/ /{Heq | m y f Heq | m t Heq}/.
      {
      unroll /treesize'/.
      reduce //.
      typecheck.
      }

      {
      unroll /treesize'/.
      reduce //.
      typecheck.
      apply /IH/ >> auto.
      subst /x n/.
      apply /Node_subterm/.
      }

      {
      unroll /treesize'/.
      reduce //.
      apply /IH/ >> auto.
      subst /x n/.
      apply /One_subterm/.
      }
    }

    {
    intro /n f Heqx/.
    destruct /f/ /{Heq | m Heq | m p t f Heq}/.
      {
      unroll /forestsize'/.
      reduce //.
      typecheck.
      }

      {
      unroll /forestsize'/.
      reduce //.
      typecheck.
      }

      {
      unroll /forestsize'/.
      reduce //.
      typecheck.
        {
        apply /IH/ >> auto.
        subst /x n/.
        apply /Cons_subterm/.
        }

        {
        apply /IH/ >> auto.
        subst /x n/.
        apply /Cons_subterm/.
        }
      }
    }
  }
split.
  {
  introOf /i a b n t/.
  apply /H/ >> auto.
  }

  {
  introOf /i a b n f/.
  apply /H/ >> auto.
  }
qed ();

                           

lemma "tree_case"
/
  forall i (a b : U i) n (t : tree a b (succ n)) .
    0 < (case t : tree of
         | Empty . 0
         | _ . 1)
/;

inference.
intro /i a b n t/.
destruct /t/ /{}/.
  {
  omega.
  }

  {
  reduce //.
  omega.
  }

  {
  reduce //.
  omega.
  }
qed ();



lemma "tree_case_annot"
/
  forall i (a b : U i) n (t : tree a b (succ n)) .
    (case t : tree :> U i of
     | Empty . void
     | _ . unit)
/;

inference.
intro /i a b n t/.
destruct /t/ /{}/.
  {
  omega.
  }

  {
  reduce //.
  split.
  }

  {
  reduce //.
  split.
  }
qed ();



lemma "destructThin"
/
  forall i (a b : U i) n (t : tree a b (succ n)) . t = t : tree a b (succ n) -> unit
/;

inference.
intro /i a b n t H/.
destructThin /t/ /{x f | t}/.
  {
  injection /H/.
  split.
  }

  {
  injection /H/.
  split.
  }
qed ();



lemma "destructThin'"
/
  forall i (a b : U i) n (t : forest a b (succ n)) . t = t : forest a b (succ n) -> unit
/;

inference.
intro /i a b n f H/.
destructThin /f/ /{x | n1 n2 t f'}/.
  {
  injection /H/.
  split.
  }

  {
  injection /H/.
  split.
  }
qed ();



lemma "inversion"
/
  forall i (a b : U i) n (t : tree a b (succ n)) . t = t : tree a b (succ n) -> unit
/;

inference.
intro /i a b n t H/.
inversion /t/.
  {
  reintro /x f/.
  split.
  }

  {
  reintro /t'/.
  split.
  }
qed ();



lemma "destructThin2"
/
  forall i (a b : U i) n (t : tree a b n) . t = t : tree a b n -> unit
/;

inference.
intro /i a b n t H/.
destructThin /t/ /{Heq | n' x f Heq | t}/.
  {
  split.
  }

  {
  moveBefore /n'/ /n/.
  subst /n/.
  injection /H/.
  split.
  }

  {
  injection /H/.
  split.
  }
qed ();



lemma "inversion2"
/
  forall i (a b : U i) n (t : tree a b n) . t = t : tree a b n -> unit
/;

inference.
intro /i a b n t H/.
inversion /t/.
  {
  reintro /Heq/.
  split.
  }

  {
  reintro /m x f Heq/.
  split.
  }

  {
  reintro /t'/.
  split.
  }
qed ();



lemma "reduce_iterator"
/
  forall (i : level) (a b : U i) n (x : tree a b n) .
    treesize a b n x = n : nat
/;

inference.
intro /i a b n x/.
apply /tree_iter _ _ (fn n x . treesize a b n x = n : nat) (fn n x . forestsize a b n x = n : nat)/ >> reduce // >> clear /n x/.
  {
  reflexivity.
  }

  {
  intro /n x y IH/.
  compat.
  hyp /IH/.
  }

  {
  intro /n x IH/.
  hyp /IH/.
  }

  {
  reflexivity.
  }

  {
  intro /x/.
  reflexivity.
  }

  {
  intro /m n x IH1 y IH2/.
  compat.
    {
    hyp /IH1/.
    }

    {
    hyp /IH2/.
    }
  }
qed ();



lemma "iterate_tree"
/
  forall (i : level) (a b : U i) n (x : tree a b n) (extra : a) .
    x = x : tree a b n
/;

inference.
intro /i a b n x extra/.
induction /x/.
6:{
  change /concl/ /(fn n x . x = x : forest a b n) : _/.
  typecheck.
  }

  {
  reflexivity.
  }

  {
  intro /n z x IH/.
  compat.
  }

  {
  intro /n x IH/.
  compat.
  }

  {
  reduce //.
  reflexivity.
  }

  {
  intro /x/.
  reduce //.
  reflexivity.
  }

  {
  intro /m n x IH1 y IH2/.
  reduce //.
  compat.
  }
qed ();




lemma "destruct_tree"
/
  forall (i : level) (a b : U i) n (x : tree a b n) (extra : a) .
    x = x : tree a b n
/;

inference.
intro /i a b n x extra/.
sinduction /x/.
reintro /IH/.
destruct /x/ /{ Heq | m x y Heq | m x Heq}/.
  {
  reflexivity.
  }

  {
  reflexivity.
  }

  {
  subst /m/.
  fold /pause x/.
  compat.
  unfold /pause/.
  apply /IH/.
  apply /One_subterm/.
  }
qed ();



lemma "inject_tree_no"
/
  forall (i : level) (a b : U i) (n : nat) (x : b) (f : forest a b n) .
    Node _ _ x f = One _ _ (Node _ _ x f) : tree a b (succ n)
    -> void
/;

inference.
intro /i a b n x f H/.
injection /H/.
qed ();



lemma "inject_forest_no"
/
  forall i (a b : U i) (x : a) t f .
    Sing _ x = Cons _ 0 1 t f : forest a b 1
    -> void
/;

inference.
intro /i a b x t f H/.
injection /H/.
qed ();



lemma "no_fixpoint_One"
/
  forall (i : level) (a b : U i) (n : nat) (t : tree a b n) .
    t = One _ _ t : tree a b n
    -> void
/;

inference.
intro /i a b n t/.
induction /t/.
6:{
  change /concl/ /(fn _ _ . unit) : _/.
  typecheck.
  }

  {
  intro /H/.
  injection /H/.
  }

  {
  reduce //.
  intro /n x f _ H/.
  injection /H/.
  }

  {
  intro /n t IH H/.
  apply /IH/.
  injection /H/.
  reintro /_ Heq/.
  hyp /Heq/.
  }

  {
  reduce //.
  auto.
  }

  {
  reduce //.
  auto.
  }

  {
  reduce //.
  nauto 6.
  }
qed ();



lemma "no_fixpoint_Cons"
/
  forall (i : level) (a b : U i) (n : nat) (t : tree a b 0) (f : forest a b n) .
    f = Cons _ _ _ t f : forest a b n
    -> void
/;

inference.
intro /i a b n t f/.
revert /t/.
induction /f/.
6:{
  change /concl/ /(fn _ _ . unit) : _/.
  typecheck.
  }

  {
  reduce //.
  split.
  }

  {
  intros.
  reduce //.
  split.
  }

  {
  intros.
  reduce //.
  split.
  }

  {
  intro /t H/.
  injection /H/.
  }

  {
  intro /x t H/.
  injection /H/.
  }

  {
  intro /m n t _ f IH t' H/.
  injection /H/.
  reintro /Heqm _ Heqt' H'/.
  subst /m t'/.
  apply /IH/ >> auto.
  }
qed ();
  


lemma "a_tree"
/
  forall (i : level) (a b : U i) (x : a) (y : b) .
    One _ _ (Node _ _ y (Cons _ _ _ (Empty _) (Sing _ x))) : tree _ _ _
/;

inference.
intro /i a b x y/.
typecheck.
qed ();



typedef
/
  datatype
    intersect (i : level) .
    forall (a : nat -> U i) .
    U i
  of
    foo : forall (n : nat) . a n -> a n -> type =
    | fooi : forall (x : a 0) . foo 0 x x
/;



lemma "iterate_foo"
/
  forall (i : level) (a : nat -> U i) n (x y : a n) (z : foo a n x y) (extra : a 0) .
    z = z : foo a n x y
/;

inference.
intro /i a n x y z extra/.
revert /n x y z/.
apply /foo_iter a (fn n x y z . z = z : foo a n x y)/.
reduce //.
intro /x/.
reflexivity.
qed ();



lemma "destruct_foo"
/
  forall (i : level) (a : nat -> U i) n (x y : a n) (z : foo a n x y) (extra : a 0) .
    z = z : foo a n x y
/;

inference.
intro /i a n x y z extra/.
destruct /z/ /{m Heq1 Heq2 Heq3}/.
reflexivity.
qed ();



typedef
/
  datatype U 0
  of
    exp : type =
    | scomb : exp
    | kcomb : exp
    | icomb : exp
    | app : exp -> exp -> exp 
/;



typedef
/
  datatype U 0
  of
    tp : type =
    | o : tp
    | arr : tp -> tp -> tp
/;



typedef
/
  datatype U 0
  of
    dof : exp -> tp -> type =

    | dof_scomb :
        forall (a b c : tp) .
          dof scomb 
            (arr
               (arr c (arr a b))
               (arr
                  (arr c a)
                  (arr c b)))

    | dof_kcomb :
        forall (a b : tp) .
          dof kcomb (arr a (arr b a))

    | dof_icomb :
        forall (a : tp) .
          dof icomb (arr a a)

    | dof_app :
        forall (a b : tp) (m n : exp) .
          dof m (arr a b)
          -> dof n a
          -> dof (app m n) b
/;



lemma "kxy"
/
  forall a b x y .
    dof x a
    -> dof y b
    -> dof (app (app kcomb x) y) a
/;

inference.
intro /a b x y Hx Hy/.
apply /dof_app b/.
  {
  apply /dof_app/.
    {
    apply /dof_kcomb/.
    }
  typechecker ();
  hyp /Hx/.
  }

  {
  hyp /Hy/.
  }
qed ();



typedef
/
  datatype
    intersect (i : level) .
    intermediate (a : U i) .
    U i
  of
    sing : a -> type =
    | this : forall (x : a) . sing x
/;



lemma "sing_destruct"
/
  forall i (a : U i) (x : a) (y : sing a x) .
    y = this x : sing a x
/;
    
inference.
intro /i a x y/.
destruct /y/ /{y Heq}/.
subst /y/.
reflexivity.
qed ();



lemma "sing_induction"
/
  forall i (a : U i) x y .
    y = this x : sing a x
/;

inference.
intro /i a x y/.
induction /y/.
intro /x/.
reflexivity.
qed ();
