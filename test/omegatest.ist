
openModule /Bool/;
openModule /Nat/;
openModule /Integer/;
openModule /Omega/;



lemma "success_1"
/
  forall x y .
    x <z y
    -> x = y : integer
    -> void
/;

inference.
intro /x y/.
omega.
qed ();



lemma "fail_1"
/
  forall x y .
    x <z= y
    -> x = y : integer
    -> void
/;

inference.
intro /x y/.
attempt omega.
Omega.counterexample ();
Prover.abandon ();



lemma "success_2"
/
  forall a b c .
    a <= b
    -> b <= c 
    -> a <= c
/;

inference.
intro /a b c/.
omega.
qed ();



lemma "fail_2"
/
  forall a b c .
    a <= b
    -> b <= c 
    -> c <= a
/;

inference.
intro /a b c/.
attempt omega.
Omega.counterexample ();
Prover.abandon ();



lemma "fail_3"
/
  forall (a b c : integer) .
    a <z= b
    -> b <z= c 
    -> z`0 <z= a
/;

inference.
intro /a b c/.
attempt omega.
Omega.counterexample ();
Prover.abandon ();




lemma "fail_dark_shadow"
/
  forall x y z .
    y <z= z`2 *z x
    -> z`3 *z x <z= z
    -> void
/;

inference.
intro /x y z/.
attempt omega.
Omega.counterexample ();
Prover.abandon ();



lemma "complex_translation"
/
  forall (f : integer -> integer) (a b c : integer) (d e : nat) .
    (a <z= f b % f b <z= a)
    -> (d <= d % unit)
    -> (d <= e -> e <= d)
    -> f b <z= c 
    -> a = b : integer
    -> a <z z`12
    -> d <= e & d <= 2 + d
    ->   d < e - integer_to_nat a
         & d <= e + 1
         & a <z c +z z`2 
         & b = b +z nat_to_integer d : integer
       % (a <z= a -> z`0 <z= b) 
       % not (negz b <z= z`1 & b <z= b)
/;

inference.
intro /f a b c d e/.
attempt omega.
Omega.counterexample ();
Prover.abandon ();



lemma "fail_4"
/
  forall (x y : nat) .
    x <= y
    -> 1 <= y
    -> void
/;

inference.
intro /x y/.
attempt omega.
Omega.counterexample ();
Prover.abandon ();



lemma "fail_5"
/
  forall (x y z : integer) .
    z <z z`-12
    -> x <z= y
    -> z`1 <z= y
    -> void
/;

inference.
intro /x y z/.
attempt omega.
Omega.counterexample ();
Prover.abandon ();



(* Example from paper. *)
lemma "slow_path_success"
/
  forall x y .
    z`27 <z= z`11 *z x +z z`13 *z y
    -> z`11 *z x +z z`13 *z y <z= z`45
    -> z`-10 <z= z`7 *z x +z z`-9 *z y
    -> z`7 *z x +z z`-9 *z y <z= z`4
    -> void
/;

inference.
intro /x y/.
omega.
qed ();



(* Variant of previous. *)
lemma "slow_path_failure"
/
  forall x y .
    z`27 <z= z`11 *z x +z z`13 *z y
    -> z`11 *z x +z z`13 *z y <z= z`45
    -> z`-10 <z= z`7 *z x +z z`-9 *z y
    -> z`7 *z x +z z`-9 *z y <z= z`5
    -> void
/;

inference.
intro /x y/.
attempt omega.
Omega.counterexample ();
Prover.abandon ();



(* Example from paper. *)
lemma "blah"
/
  forall x y z .
    z`7 *z x +z z`12 *z y +z z`31 *z z = z`17 : integer
    -> z`3 *z x +z z`5 *z y +z z`14 *z z = z`7 : integer
    -> z`1 <z= x
    -> x <z= z`40
    -> z`-50 <z= y
    -> y <z= z`50
    -> void
/;

inference.
intro /x y z/.
attempt omega.
Omega.counterexample ();
Prover.abandon ();



lemma "success_3"
/
  forall (x y z : integer) .
    x <z= y +z z
    -> y -z z <z= x
    -> z <z z`0
    -> void
/;

inference.
intro /x y z/.
omega.
qed ();



lemma "success_4"
/
  forall (x y z : nat) .
    17 = x * 7 + y * 12 + z * 31 : nat
    -> void
/;

inference.
intro /x y z/.
omega.
qed ();



lemma "success_5"
/
  forall (f : nat -> nat) (a b c : nat) .
    a <= f b
    -> f b <= c
    -> a <= c
/;

inference.
intro /f a b c/.
omega.
qed ();



lemma "success_6"
/
  forall x y z .
    x < y
    -> y < z
    -> 2 <= z
/;

inference.
intro /x y z/.
omega.
qed ();



lemma "fail_6"
/
  forall x y z .
    x < y
    -> y < z
    -> 3 <= z
/;

inference.
intro /x y z/.
attempt omega.
Omega.counterexample ();
Prover.abandon ();



lemma "success_7"
/
  forall x y . x - y <= x
/;

inference.
intro /x y/.
omega.
qed ();



lemma "fail_7"
/
  forall x y . x -z y <z= x
/;

inference.
intro /x y/.
attempt omega.
Omega.counterexample ();
Prover.abandon ();



lemma "success_8"
/
  forall x y . (x != y : nat) -> x < y % y < x
/;

inference.
intro /x y/.
omega.
qed ();



lemma "success_9"
/
  forall x . x != succ x : nat
/;

inference.
intro /x/.
omega.
qed ();



lemma "success_10"
/
  forall x . x != x +z z`-1 : integer
/;

inference.
intro /x/.
omega.
qed ();



(* tests predecessor *)
lemma "fail_8"
/
  forall x . x != x - 1 : nat
/;

inference.
intro /x/.
attempt omega.
Omega.counterexample ();
Prover.abandon ();



lemma "success_11"
/
  forall x .
    pred x <= x
/;

inference.
intro /x/.
omega.
qed ();



lemma "min_max"
/
  forall x y z .
    min x (max y z) = max (min x y) (min x z) : nat
/;

inference.
intro /x y z/.
omega.
qed ();



lemma "minz_maxz"
/
  forall x y z .
    maxz (minz x y) z = minz (maxz z x) (maxz y z) : integer
/;

inference.
intro /x y z/.
omega.
qed ();



lemma "min_nat"
/
  forall x .
    min 0 x = 0 : nat
/;

inference.
intro /x/.
omega.
qed ();



lemma "min_integer"
/
  forall x .
    minz z`0 x = z`0 : integer
/;

inference.
intro /x/.
attempt omega.
Omega.counterexample ();
Prover.abandon ();



lemma "greatest_lower_bound"
/
  forall x y z .
    x <z= y
    -> x <z= z
    -> x <z= minz y z
/;

inference.
intro /x y z/.
omega.
qed ();



lemma "success_12"
/
  forall x y .
    x != 0 : nat
    -> min 1 y < 2 * x
/;

inference.
intro /x y/.
omega.
qed ();



lemma "success_13"
/
  12 = integer_to_nat z`12 : nat
/;

omega.
qed ();



lemma "success_14"
/
  0 = integer_to_nat z`-1 : nat
/;

omega.
qed ();



(* the second appearance of j is after more variables (i.e., i) have been allocated *)
lemma "tabling_adjust"
/
  forall (i j : integer) . void -> j = i +z j : integer
/;

intro /i j H/.
omega.
qed ();
