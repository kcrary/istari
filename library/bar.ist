
File.import "bar-aux.iml";


Namespace.beginModule "Bar";


lemma "pause_type"
/
  pause :
  intersect i (a : U i) .
    a -> a
/;

introOf /i a/.
unfoldHead /pause/.
typecheck.
qed ();
recordTyping "pause_type";



define /ffix f/
/
  pause
    (fn x . f (let next x' = x in next (pause x' x)))
    (next
       (fn x . f (let next x' = x in next (pause x' x))))
//
  intersect (i : level) (a : U i) .
    (future a -> a) -> a
/;

introOf /i a f/.
unfold /ffix/.
goalCaseT /of _ (pause ? _) => \(fnc m => set /g/ /\m\/)\ /.
assert /g : rec t . (future t -> a)/ /Hof/.
  {
  unfold /g/.
  unrollType /rec/.
  typecheck.
  reintro /x x'/.
  unroll /pause/.
  unrollType /rec in x'/.
  typecheck.
  }
fold /g , g/.
convert /pause ap _ ap (future (rec t . (future t -> a)) -> a)/.
typecheck.
unrollType /rec/.
reflexivity.
qed ();



val unroll_ffix = makeReduction1
/
ffix f --> f (next (ffix f)) ;
unfolding ffix letnext
unrolling pause
/;

Database.setUnroll (parseConstant /ffix/) (Reduction.user1 unroll_ffix);
writeRegistry /unroll_ffix/ /reduction1/ unroll_ffix;



define /bar a/
/
  rec t . a % future t
//
  intersect i . U i -> U i
/;

inference.
introOf /i/.
unfoldHead /bar/.
typecheck.
qed ();

val bar = parseConstant /bar/;



lemma "bar_unroll" 
/
  forall (i : level) (a : U i) . bar a = (a % future (bar a)) : type
/;

intro /i a/.
unrollType /bar/.
reflexivity.
qed ();

val bar_unroll = parseConstant /bar_unroll/;



define /now x/
/
  inl x
//
  intersect i (a : U i) .
    a -> bar a
/;

inference.
introOf /i a x/.
unfold /now/.
rewrite /-> bar_unroll/.
typecheck.
qed ();

val now = parseConstant /now/;



define /laterf x/
/
  inr x
//
  intersect i (a : U i) .
    future (bar a) -> bar a
/;

inference.
introOf /i a x/.
unfold /laterf/.
rewrite /-> bar_unroll/.
typecheck.
qed ();

val laterf = parseConstant /laterf/;



define /later x/
/
  laterf (next x)
//
  intersect i (a : U i) .
    bar a -> bar a
/;

inference.
introOf /i a x/.
unfold /later/.
typecheck.
qed ();

Constant.setOpacity (parseConstant /later/) Constant.SOFT_STRICT;



define /bindbar x f/
/
  ffix
    (fn g x .
       (case x of
        | inl y . f y
        | inr y .
            let next g' = g
            in
            let next y' = y
            in
              inr (next (g' y'))))
    x
//
  intersect i (a b : U i) .
    bar a
    -> (a -> bar b)
    -> bar b
/;

inference.
introOf /i a b x f/.
unfold /bindbar/.
folds 2 /ffix ap i ap (bar a -> bar b)/.
so /bar_unroll i a/ /Heq/.
typecheck.
unrollType /bar/.
typecheck.
qed ();

val bindbar = parseConstant /bindbar/;



reductions 
/
bindbar (now x) f --> f x ;
bindbar (laterf x) f --> let next y = x in later (bindbar y f) ;
bindbar (later x) f --> later (bindbar x f) ;
unfolding letnext bindbar now later laterf
unrolling ffix
/;



define /bindbart x t/
/
  ffix
    (fn g x .
       (case x of
        | inl y . t y
        | inr y .
            let next g' = g
            in
            let next y' = y
            in
              future (g' y')))
    x
//
  intersect i (a : U i) .
    bar a 
    -> (a -> U i)
    -> U i
/;

inference.
introOf /i a x t/.
unfold /bindbart/.
folds 2 /ffix ap (lsucc i) ap (bar a -> U i)/.
typecheck.
unrollType /bar/.
typecheck.
qed ();

val bindbart = parseConstant /bindbart/;



reductions
/
  bindbart (now x) t --> t x ;
  bindbart (laterf x) t --> let next y = x in future (bindbart y t) ;
  bindbart (later x) t --> future (bindbart x t) ;
  unfolding letnext bindbart now later laterf
  unrolling ffix
/;



writeRegistry /AfterBindbarEnv/
  /[constant constant]/
  (Collapse (bindbar, bindbart));
structure Nothing = AfterBindbar ();
grammaron Bar;



lemma "bar_subtype"
/
  forall i (a b : U i) .
    a <: b
    -> bar a <: bar b
/;

inference.
intro /i a b Hsub/.
apply /ffix/.
intro /Hsubbar x/.
rewrite /-> bar_unroll in x in concl/.
destruct /x/ /x | [x]/.
  {
  typecheck.
  }

  {
  destruct /Hsubbar/ /[Hsubbar]/.
  (* The typechecker won't find Hsubbar because it's in the future when we start.
     We need to do this in two stages so it refreshes its table after moving into
     the future.
  *)
  fold /manual x/.
  typecheck.
  typecheck.
  }
qed ();

val bar_subtype = parseConstant /bar_subtype/;



define /bfix f/
/
  ffix (fn x . f (laterf x))
//
  intersect i (a : U i) .
    (bar a -> bar a) -> bar a
/;

inference.
introOf /i a f/.
unfold /bfix/.
typecheck.
qed ();



val unroll_bfix = makeReduction1
/
bfix f --> f (later (bfix f)) ;
unfolding bfix later
unrolling ffix
/;

Database.setUnroll (parseConstant /bfix/) (Reduction.user1 unroll_bfix);
writeRegistry /unroll_bfix/ /reduction1/ unroll_bfix;



(* At this point we'd like to follow the development in Smith [1988]
   and define a termination predicate.  Alas, we cannot.  Istari's
   step-indexed semantics is unable to express liveness properties
   such as termination.  If it could express termination, we would be
   able to draw a contradiction, because the fixed-point typing rule
   above (bfix_type) does not have Smith's admissibility requirement.
   (See Smith [1988], theorem 60.)
*)



define /bar_iter hn hl y/
/
  ffix
    (fn iterf y .
       (case y of
        | inl x . hn x
 
        | inr xf .
            let next iter = iterf
            in
            let next x = xf
            in
              hl (next x) (next (iter x))))
    y
//
  intersect i (a : U i) (P : bar a -> U i) .
    (forall (x : a) . P (now x))
    -> (forall (xf : future (bar a)) .
          let next x = xf
          in
            future (P x) -> P (later x))
    -> forall (x : bar a) . P x
/;

inference.
introOf /i a P hn hl y/.
unfold /bar_iter/.
folds 2 /ffix ap i ap (forall (y : bar a) . P y)/.
fold /manual (sum_case _ _ _) within _ _/.
typecheck.
reintro /_ IH z/.
destruct /IH/ /[IH]/.
unrollType /bar in z/.
destruct /z/ /x | [x]/.
  {
  reduce //.
  typecheck.
  fold /now _/.
  reflexivity.
  }

  {
  reduce //.
  fold /laterf (next x)/.
  typecheck.
  }
qed ();

val bar_iter = parseConstant /bar_iter/;



reductions
/
  bar_iter hn _ (now x) --> hn x ;
  bar_iter hn hl (laterf x) --> let next y = x in hl (next y) (next (bar_iter hn hl y)) ;
  bar_iter hn hl (later x) --> hl (next x) (next (bar_iter hn hl x)) ;
  unfolding bar_iter now laterf later letnext
  unrolling ffix
/;



lemma "bindbar_id_left"
/
  forall i (a b : U i) (e : a) (f : a -> bar b) .
    (bindbar x = now e in f x) = f e : bar b
/;

inference.
intro /i a b e f/.
reduce //.
reflexivity.
qed ();



lemma "bindbar_id_right"
/
  forall i (a : U i) (m : bar a) .
    (bindbar x = m in now x) = m : bar a
/;

inference.
intro /i a/.
apply /bar_iter/ >> reduce // >> auto.
(* later *)
intro /[x] [IH]/.
unfold /later at 0 0/.
compat.
compat.
hyp /IH/.
qed ();



lemma "bindbar_assoc"
/
  forall i (a b c : U i) (e : bar a) (f : a -> bar b) (g : b -> bar c) .
    (bindbar y = (bindbar x = e in f x) in g y)
    =
    (bindbar x = e in bindbar y = f x in g y)
    : bar c
/;

inference.
intro /i a b c e f g/.
revert /e/.
apply /bar_iter/ >> reduce // >> auto.
(* later *)
intro /[x] [IH]/.
unfold /later at 0 0/.
compat.
compat.
hyp /IH/.
qed ();



lemma "bindbart_id_left"
/
  forall i (a : U i) (e : a) (t : a -> U i) .
    bindbart x = now e in t x = t e : U i
/;

inference.
intro /i a e t/.
reduce //.
reflexivity.
qed ();



lemma "bindbart_assoc"
/
  forall i (a b : U i) (e : bar a) (f : a -> bar b) (t : b -> U i) .
    (bindbart y = (bindbar x = e in f x) in t y)
    =
    (bindbart x = e in bindbart y = f x in t y)
    : U i
/;

inference.
intro /i a b e f t/.
revert /e/.
apply /bar_iter/ >> reduce // >> auto.
(* later *)
intro /[x] [IH]/.
RuleTactic.futureEqUniv >> auto.
qed ();
  
  

lemma "bindbart_map"
/
  forall i (a : U i) (b c : a -> U i) (e : bar a) .
    (forall (x : a) . b x -> c x)
    -> (bindbart x = e in b x)
    -> (bindbart x = e in c x)
/;

inference.
intro /i a b c e Himpl/.
revert /e/.
apply /bar_iter/ >> reduce // >> auto.
(* later *)
intro /[x] [IH] [H]/.
split.
apply /IH/ >> auto.
qed ();



writeRegistry /AfterBarAllEnv/
  /[constant constant constant constant constant constant]/
  (Collapse (bar, bar_unroll, now, laterf, bar_subtype, bar_iter));


endModule ();
