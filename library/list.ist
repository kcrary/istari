
Ctrl.use "datatypes.iml";
File.import "logic-load.iml";
File.import "nat-load.iml";
File.import "option-load.iml";
File.import "list-aux.iml";


beginModule "List";


typedef
/
  datatype
    intersect (i : level) .
    forall (a : U i) .
    U i
  of
    list : type =
    | nil : list
    | cons : a -> list -> list
/;

val cons = parseConstant /cons/;


Database.setImplicits (parseConstant /nil/) 1;
Database.setImplicits (parseConstant /cons/) 1;



writeRegistry /AfterListEnv/
  /[constant]/
  (Collapse (cons));
structure Nothing = AfterList ();



defineRaw /list_case {a b} l mnil mcons/
/
  list_iter a (fn _ . b) mnil (fn h t _ . mcons h t) l
/;



reductions
/
  list_case _ _ (nil _) z _ --> z ;
  list_case _ _ (cons _ h t) _ s --> s h t ;
  unfolding list_case
/;



lemma "list_case_type"
/
  ` list_case :
  intersect (i : level) .
  forall (a b : U i) .
     list a 
     -> b 
     -> (a -> list a -> b)
     -> b
/;

introOf /i a b l mnil mcons/.
destruct /l/ /| h t/.

(* nil *)
{
reduce //.
hypof.
}

(* cons *)
{
reduce //.
typecheck.
}
qed ();
recordTyping "list_case_type";




(* Append *)

define /append {a} l1 l2/
/
  list_iter a (fn _ . list a) l2 (fn h _ t . ` cons a h t) l1
//
  intersect (i : level) .
  forall (a : U i) .
     list a -> list a -> list a
/;

unfold /append/.
typecheck.
qed ();



reductions
/
  append _ (nil _) l --> l ;
  append a (cons _ h t) l --> cons a h (append a t l) ;
  unfolding append
/;



lemma "append_id_l"
/
  forall (i : level) (a : U i) (l : list a) .
    ` append a (` nil a) l = l : list a
/;

intro /i a l/.
reflexivity.
qed ();



lemma "append_id_r"
/
  forall (i : level) (a : U i) (l : list a) .
    append l nil = l : list a
/;

inference.
intro /i a l/.
induction /l/.

(* nil *)
{
reflexivity.
}

(* cons *)
{
intro /h t IH/.
compat.
hyp /IH/.
}
qed ();



lemma "append_assoc"
/
  forall (i : level) (a : U i) (l1 l2 l3 : list a) .
    append (append l1 l2) l3 = append l1 (append l2 l3) : list a
/;

inference.
intro /i a l1 l2 l3/.
induction /l1/.

(* nil *)
{
reduce //.
reflexivity.
}

(* cons *)
{
intro /h t IH/.
compat.
hyp /IH/.
}
qed ();



lemma "append_cons_assoc"
/
  forall i (a : U i) (x : a) (l1 l2 : list a) .
    append (`cons a x l1) l2 = x :: append l1 l2 : list a
/;

inference.
intro /i a x l1 l2/.
induction /l1/ >> auto.
qed ();



lemma "append_eq_nil"
/
  forall i (a : U i) (l1 l2 : list a) .
    nil = append l1 l2 : list a
    -> l1 = nil : list a & l2 = nil : list a
/;

inference.
intro /i a l1 l2 Heq/.
destruct /l1/ /| h t/.
1:{
  reduce /Heq/.
  injection /Heq/.
  }
reduce /Heq/.
split >> auto.
qed ();



lemma "append_eq_cons"
/
  forall i (a : U i) (h : a) (t l1 l2 : list a) .
    h :: t = append l1 l2 : list a
    -> (exists l1' .
          l1 = h :: l1' : list a
          & t = append l1' l2 : list a)
       %
       (l1 = nil : list a & l2 = h :: t : list a)
/;

inference.
intro /i a h t l1 l2 Heq/.
destruct /l1/ /| x l1'/.
  {
  right.
  auto.
  }

  {
  left.
  exists /l1'/.
  reduce /Heq/.
  injection /Heq/.
  reintro /Heqh Heqt/.
  auto.
  }
qed ();



(* Length *)

definerec /length {a} l/
/
  `list_case a nat l 0 (fn _ t . succ (length a t))
//
  intersect (i : level) .
  forall (a : U i) . list a -> nat
/;

inference.
introOf /i a l/.
sinduction /l/.
reintro /IH/.
destruct /l/ /| h t/.

(* nil *)
{
unroll /length/.
typecheck.
}

(* cons *)
{
unroll /length/.
typecheck.
apply /IH/.
apply /cons_subterm/.
}
qed ();



reductions
/
  length _ (nil _) --> 0 ;
  length a (cons _ _ t) --> succ (length a t) ;
  unrolling length
/;



lemma "length_append"
/
  forall i (a : U i) (l1 l2 : list a) .
    length (append l1 l2) = length l1 + length l2 : nat
/;

inference.
intro /i a l1 l2/.
induction /l1/.

(* nil *)
{
auto.
}

(* cons *)
{
intro /h t IH/.
compat.
hyp /IH/.
}
qed ();



lemma "length_zero_form"
/
  forall i (a : U i) (l : list a) .
    length l = 0 : nat
    -> l = nil : list a
/;

inference.
intro /i a l H/.
destruct /l/ /| h t/ >> auto.
reduce /H/.
injection /H/.
qed ();



lemma "length_succ_form"
/
  forall i (a : U i) (l : list a) (n : nat) .
    length l = succ n : nat
    -> exists h t . l = h :: t : list a
/;

inference.
intro /i a l n H/.
destruct /l/ /| h t/.

{
reduce /H/.
injection /H/.
}

{
exists /h/.
exists /t/.
auto.
}
qed ();



lemma "length_nonzero_form"
/
  forall i (a : U i) (l : list a) .
    0 < length l
    -> exists h t . l = h :: t : list a
/;

inference.
intro /i a l H/.
destruct /l/ /| h t/.

{
reduce /H/.
so /Nat.lt_0_not _ H/ /0/.
}

{
exists /h/.
exists /t/.
auto.
}
qed ();



(* Fold *)

define /foldr {a b} z f l/
/
  list_iter a (fn _ . b) z (fn x _ y . f x y) l
//
  intersect i .
  forall (a b : U i) .
    b
    -> (a -> b -> b)
    -> list a
    -> b
/;

introOf /i a b z f l/.
unfold /foldr/.
typecheck.
qed ();



reductions
/
  foldr _ _ z _ (nil _) --> z ;
  foldr a b z f (cons _ h t) --> f h (foldr a b z f t) ;
  unfolding foldr
/;



definerec /foldl {a b} z f l/
/
  `list_case a b l z (fn h t . foldl a b (f h z) f t)
//
  intersect i .
  forall (a b : U i) .
    b
    -> (a -> b -> b)
    -> list a
    -> b
/;

inference.
introOf /i a b z f l/.
revert /z/.
sinduction /l/.
reintro /IH/.
destruct /l/ /| h t/.

(* nil *)
{
intro /z/.
unroll /foldl/.
hypof.
}

(* cons *)
{
intro /z/.
unroll /foldl/.
apply /IH/.
apply /cons_subterm/.
}
qed ();



reductions
/
  foldl _ _ z _ (nil _) --> z ;
  foldl a b z f (cons _ h t) --> foldl a b (f h z) f t ;
  unrolling foldl
/;



lemma "foldr_append"
/
  forall i (a b : U i) (z : b) (f : a -> b -> b) (l1 l2 : list a) .
    foldr z f (append l1 l2) = foldr (foldr z f l2) f l1 : b
/;

inference.
intro /i a b z f l1 l2/.
induction /l1/ >> auto.
qed ();



lemma "foldl_append"
/
  forall i (a b : U i) (z : b) (f : a -> b -> b) (l1 l2 : list a) .
    foldl z f (append l1 l2) = foldl (foldl z f l1) f l2 : b
/;

inference.
intro /i a b z f l1 l2/.
revert /z/.
induction /l1/ >> auto.
qed ();



(* Map *)

define /map {a b} f l/
/
  list_iter a (fn _ . list b) nil (fn h _ t . f h :: t) l
//
  intersect i .
  forall (a b : U i) . (a -> b) -> list a -> list b
/;

introOf /i a b f l/.
unfold /map/.
typecheck.
qed ();



reductions
/
  map _ b _ (nil _) --> nil b ;
  map a b f (cons _ h t) --> cons b (f h) (map a b f t) ;
  unfolding map
/;



lemma "map_compose"
/
  forall i (a b c : U i) (f : b -> c) (g : a -> b) l .
    map f (map g l) = map (fn x . f (g x)) l : list c
/;

inference.
intro /i a b c f g l/.
induction /l/ >> auto.
qed ();



lemma "map_append"
/
  forall i (a b : U i) (f : a -> b) (l1 l2 : list a) .
    map f (append l1 l2) = append (map f l1) (map f l2) : list b
/;

inference.
intro /i a b f l1 l2/.
induction /l1/ >> auto.
qed ();



lemma "map_as_foldr"
/
  forall i (a b : U i) (f : a -> b) (l : list a) .
    map f l = foldr nil (fn h t . f h :: t) l : list b
/;

inference.
intro /i a b f l/.
induction /l/ >> auto.
qed ();



lemma "length_map"
/
  forall i (a b : U i) (f : a -> b) (l : list a) .
    length (map f l) = length l : nat
/;

inference.
intro /i a b f l/.
induction /l/ >> auto.
qed ();



lemma "foldr_map"
/
  forall i (a b c : U i) (z : c) (f : b -> c -> c) (g : a -> b) (l : list a) .
    foldr z f (map g l) = foldr z (fn h t . f (g h) t) l : c
/;

inference.
intro /i a b c z f g l/.
induction /l/ >> auto.
qed ();



lemma "foldl_map"
/
  forall i (a b c : U i) (z : c) (f : b -> c -> c) (g : a -> b) (l : list a) .
    foldl z f (map g l) = foldl z (fn h t . f (g h) t) l : c
/;

inference.
intro /i a b c z f g l/.
revert /z/.
induction /l/ >> auto.
qed ();



(* Reverse *)

define /reverse {a} l/
/
  list_iter a (fn _ . list a) nil (fn h _ t . append t (h :: nil)) l
//
  intersect i . forall (a : U i) . list a -> list a
/;

inference.
unfold /reverse/.
typecheck.
qed ();



reductions
/
  reverse a (nil _) --> nil a ;
  reverse a (cons _ h t) --> append a (reverse a t) (cons a h (nil a)) ;
  unfolding reverse
/;



lemma "reverse_as_foldl"
/
  forall i (a : U i) (l : list a) .
    reverse l = foldl nil (fn h t . h :: t) l : list a
/;

inference.
intro /i a/.
assert /forall l1 l2 .
           append (reverse l1) l2 = foldl l2 (fn h t . h :: t) l1 : list a/ /H/.
  {
  inference.
  intro /l1/.
  induction /l1/ >> auto.
  intro /h t IH l2/.
  rewrite /-> append_assoc/.
  reduce //.
  apply /IH/.
  }
intro /l/.
rewrite /<- H/.
rewrite /-> append_id_r/.
auto.
qed ();



lemma "reverse_append"
/
  forall i (a : U i) (l1 l2 : list a) .
    reverse (append l1 l2) = append (reverse l2) (reverse l1) : list a
/;

inference.
intro /i a l1/.
induction /l1/.

(* nil *)
{
intro /l2/.
rewrite /-> append_id_r/.
auto.
}

(* cons *)
{
intro /h t IH l2/.
rewrite /-> IH/.
rewrite /-> append_assoc/.
reflexivity.
}
qed ();



lemma "reverse_invol"
/
  forall i (a : U i) (l : list a) .
    reverse (reverse l) = l : list a
/;

inference.
intro /i a l/.
induction /l/ >> auto.
intro /h t IH/.
rewrite /-> reverse_append/.
reduce //.
auto.
qed ();



lemma "length_reverse"
/
  forall i (a : U i) (l : list a) .
    length (reverse l) = length l : nat
/;

inference.
intro /i a l/.
induction /l/ >> auto.
intro /h t IH/.
rewrite /-> length_append/.
reduce //.
rewrite /-> IH/.
rewrite /-> Nat.plus_commute/.
reflexivity.
qed ();



lemma "foldl_as_foldr"
/
  forall i (a b : U i) (z : b) (f : a -> b -> b) (l : list a) .
    foldl z f l = foldr z f (reverse l) : b
/;

inference.
intro /i a b z f l/.
revert /z/.
induction /l/ >> auto.
intro /h t IH z/.
rewrite /-> IH/.
rewrite /-> foldr_append/.
reduce //.
reflexivity.
qed ();



lemma "foldr_as_foldl"
/
  forall i (a b : U i) (z : b) (f : a -> b -> b) (l : list a) .
    foldr z f l = foldl z f (reverse l) : b
/;

inference.
intro /i a b z f l/.
rewrite /-> foldl_as_foldr/.
rewrite /-> reverse_invol/.
reflexivity.
qed ();



lemma "reverse_map"
/
  forall i (a b : U i) (f : a -> b) l .
    reverse (map f l) = map f (reverse l) : list b
/;

inference.
intro /i a b f l/.
induction /l/ >> auto.
intro /h t IH/.
rewrite /-> map_append/.
reduce //.
auto.
qed ();



(* Forall/Exists/In *)

typedef
/
  datatype
    intersect (i : level) .
    forall (a : U i) (P : a -> U i) .
    U i
  of
    Forall : list a -> type =
    | Forall_nil : Forall nil
    | Forall_cons : forall h t . P h -> Forall t -> Forall (h :: t)
/;

Database.setImplicits (parseConstant /Forall/) 1;
Database.setImplicits (parseConstant /Forall_nil/) 1;
Database.setImplicits (parseConstant /Forall_cons/) 1;



typedef
/
  datatype
    intersect (i : level) .
    forall (a : U i) (P : a -> U i) .
    U i
  of
    Exists : list a -> type =
    | Exists_hit : forall h t . P h -> Exists (h :: t)
    | Exists_miss : forall h t . Exists t -> Exists (h :: t)
/;

Database.setImplicits (parseConstant /Exists/) 1;
Database.setImplicits (parseConstant /Exists_hit/) 1;
Database.setImplicits (parseConstant /Exists_miss/) 1;



lemma "Forall_as_foldr"
/
  forall i (a : U i) (P : a -> U i) l .
    Forall P l 
    <->
    foldr unit (fn h Q . P h & Q) l
/;

inference.
intro /i a P l/.
split.
  {
  intro /H/.
  induction /H/ >> auto.
  intro /h t IH Hh Ht/.
  auto.
  }

  {
  induction /l/.
    {
    intro /_/.
    apply /Forall_nil/.
    }
  
    {
    intro /h t IH (Hh Ht)/.
    apply /Forall_cons/ >> auto.
    }
  }
qed ();



lemma "Exists_as_foldr"
/
  forall i (a : U i) (P : a -> U i) l .
    Exists P l 
    <->
    foldr void (fn h Q . P h % Q) l
/;

inference.
intro /i a P l/.
split.
  {
  intro /H/.
  induction /H/ >> auto.
  }

  {
  induction /l/.
    {
    intro /0/.
    }
  
    {
    intro /h t IH (HP | H)/.
      {
      apply /Exists_hit/ >> auto.
      }

      {
      apply /Exists_miss/ >> auto.
      }
    }
  }
qed ();




definerec /In a x l/
/
  `list_case a bogus l void (fn h t . x = h : a % In a x t)
//
  intersect i . forall (a : U i) . a -> list a -> U i
/;

introOf /i a x l/.
sinduction /l/.
reintro /IH/.
destruct /l/ /| h t/.
  {
  unroll /In/.
  typecheck.
  }
unroll /In/.
typecheck.
apply /IH/.
apply /cons_subterm/.
qed ();



reductions
/
  In _ _ (nil _) --> void ;
  In a x (cons _ h t) --> x = h : a % In a x t ;
  unrolling In
/;



lemma "In_as_exists"
/
  forall i (a : U i) x l .
    In a x l
    <->
    Exists (fn y . x = y : a) l
/;

inference.
intro /i a x l/.
split.
  {
  induction /l/.
    {
    intro /0/.
    }
  intro /h t IH Hin/.
  destruct /Hin/ /Heq | Hin/ >> autoWith /Exists_hit Exists_miss/.
  }

  {
  intro /H/.
  induction /H/.
    {
    intro /h t Heq/.
    left >> auto.
    }

    {
    intro /h t _ IH/.
    right >> auto.
    }
  }
qed ();



lemma "Forall_forall"
/
  forall i (a : U i) (P : a -> U i) l .
    Forall P l
    <->
    (forall x . In a x l -> P x)
/;

inference.
intro /i a P l/.
split.
  {
  intro /H/.
  induction /H/.
    {
    intro /? 0/.
    }
  intro /h t Hh _ IH x Hin/.
  destruct /Hin/ /Heq | Hin/.
    {
    subst /x/.
    auto.
    }

    {
    apply /IH/ >> auto.
    }
  }

  {
  induction /l/.
    {
    intro /_/.
    apply /Forall_nil/.
    }
  intro /h t IH H/.
  apply /Forall_cons/ >> auto.
  }
qed ();

  

lemma "Exists_exists"
/
  forall i (a : U i) (P : a -> U i) l .
    Exists P l
    <->
    (exists x . In a x l & P x)
/;

inference.
intro /i a P l/.
split.
  {
  intro /H/.
  induction /H/.
    {
    intro /h t Hh/.
    exists /h/.
    auto.
    }

    {
    intro /h t _ IH/.
    destruct /IH/ /x Hin Hx/.
    exists /x/.
    split >> auto.
    }
  }

  {
  induction /l/.
    {
    intro /(? 0 ?)/.
    }
  intro /h t IH (x Hin Hx)/.
  destruct /Hin/ /Heq | Hin/.
    {
    subst /x/.
    apply /Exists_hit/ >> auto.
    }

    {
    apply /Exists_miss/.
    apply /IH/.
    exists /x/.
    auto.
    }
  }
qed ();



lemma "Forall_nil_iff"
/
  forall i (a : U i) (P : a -> U i) .
    Forall P nil
    <->
    unit
/;

inference.
intro /i a P/.
split >> auto.
intro /_/.
apply /Forall_nil/.
qed ();



lemma "Exists_nil_iff"
/
  forall i (a : U i) (P : a -> U i) .
    Exists P nil
    <->
    void
/;

inference.
intro /i a P/.
split.
  {
  intro /H/.
  inversion /H/.
  }

  {
  intro /0/.
  }
qed ();



lemma "Forall_cons_iff"
/
  forall i (a : U i) (P : a -> U i) x l .
    Forall P (x :: l)
    <->
    P x & Forall P l
/;

inference.
intro /i a P x l/.
split.
  {
  intro /H/.
  inversion /H/.
  reintro /Hx Hl/.
  auto.
  }

  {
  intro /(Hx Hl)/.
  apply /Forall_cons/ >> auto.
  }
qed ();



lemma "Exists_cons_iff"
/
  forall i (a : U i) (P : a -> U i) x l .
    Exists P (x :: l)
    <->
    P x % Exists P l
/;

inference.
intro /i a P x l/.
split.
  {
  intro /H/.
  inversion /H/ >> auto.
  }

  {
  intro /(Hx | Hl)/.
    {
    apply /Exists_hit/ >> auto.
    }

    {
    apply /Exists_miss/ >> auto.
    }
  }
qed ();



lemma "Forall_append_iff"
/
  forall i (a : U i) (P : a -> U i) l1 l2 .
    Forall P (append l1 l2)
    <->
    Forall P l1 & Forall P l2
/;

inference.
intro /i a P l1 l2/.
induction /l1/.
  {
  rewrite /-> Forall_nil_iff/.
  rewrite /-> Logic.prod_id_l/.
  }

  {
  intro /h t IH/.
  rewrite /-> Forall_cons_iff at 0 0/.
  rewrite /-> IH/.
  rewrite /<- Logic.prod_assoc/.
  }
qed ();



lemma "Forall_append"
/
  forall i (a : U i) (P : a -> U i) l1 l2 .
    Forall P l1
    -> Forall P l2
    -> Forall P (append l1 l2)
/;

inference.
intro /i a P l1 l2 H1 H2/.
rewrite /-> Forall_append_iff/.
auto.
qed ();



lemma "Exists_append_iff"
/
  forall i (a : U i) (P : a -> U i) l1 l2 .
    Exists P (append l1 l2)
    <->
    Exists P l1 % Exists P l2
/;

inference.
intro /i a P l1 l2/.
induction /l1/.
  {
  rewrite /-> Exists_nil_iff/.
  rewrite /-> Logic.sum_id_l/.
  }

  {
  intro /h t IH/.
  rewrite /-> Exists_cons_iff at 0 0/.
  rewrite /-> IH/.
  rewrite /<- Logic.sum_assoc/.
  }
qed ();



lemma "Exists_append_1"
/
  forall i (a : U i) (P : a -> U i) l1 l2 .
    Exists P l1
    -> Exists P (append l1 l2)
/;

inference.
intro /i a P l1 l2 H/.
rewrite /-> Exists_append_iff/.
auto.
qed ();



lemma "Exists_append_2"
/
  forall i (a : U i) (P : a -> U i) l1 l2 .
    Exists P l2
    -> Exists P (append l1 l2)
/;

inference.
intro /i a P l1 l2 H/.
rewrite /-> Exists_append_iff/.
auto.
qed ();



lemma "In_append"
/
  forall i (a : U i) x l1 l2 .
    In a x (append l1 l2)
    <->
    In a x l1 % In a x l2
/;

inference.
intro /i a x l1 l2/.
rewrite /-> In_as_exists/.
rewrite /-> Exists_append_iff/.
rewrite /<- In_as_exists at all/.
qed ();



lemma "Forall_implies"
/
  forall i (a : U i) (P Q : a -> U i) (l : list a) .
    (forall x . P x -> Q x)
    -> Forall P l
    -> Forall Q l
/;

inference.
intro /i a P Q l Himpl Hl/.
induction /Hl/ >> autoWith /Forall_nil/.
intro /h t Hh _ IH/.
apply /Forall_cons/ >> auto.
qed ();



lemma "Exists_implies"
/
  forall i (a : U i) (P Q : a -> U i) (l : list a) .
    (forall x . P x -> Q x)
    -> Exists P l
    -> Exists Q l
/;

inference.
intro /i a P Q l Himpl Hl/.
induction /Hl/ >> autoWith /Exists_miss/.
intro /h t Hh/.
apply /Exists_hit/ >> auto.
qed ();



lemma "Forall_map"
/
  forall i (a b : U i) (P : b -> U i) (f : a -> b) (l : list a) .
    Forall P (map f l)
    <->
    Forall (fn x . P (f x)) l
/;

inference.
intro /i a b P f l/.
rewrite /-> Forall_as_foldr at all/.
rewrite /-> foldr_map/.
apply /Logic.iff_refl/.
qed ();



lemma "Exists_map"
/
  forall i (a b : U i) (P : b -> U i) (f : a -> b) (l : list a) .
    Exists P (map f l)
    <->
    Exists (fn x . P (f x)) l
/;

inference.
intro /i a b P f l/.
rewrite /-> Exists_as_foldr at all/.
rewrite /-> foldr_map/.
apply /Logic.iff_refl/.
qed ();



lemma "In_map"
/
  forall i (a b : U i) (f : a -> b) (x : b) (l : list a) .
    In b x (map f l)
    <->
    (exists (y : a) .
       In a y l
       & x = f y : b)
/;

inference.
intro /i a b f x l/.
induction /l/.
  {
  split.
    {
    intro /0/.
    }

    {
    intro /(? 0 _)/.
    }
  }

  {
  intro /h t IH/.
  rewrite /-> IH/.
  split.
    {
    intro /(Heq | (y Hy Heq))/.
      {
      exists /h/.
      auto.
      }

      {
      exists /y/.
      auto.
      }
    }

    {
    intro /(y (Heqy | Hy) Heqx)/.
      {
      left.
      subst /y/.
      auto.
      }

      {
      right.
      exists /y/.
      auto.
      }
    }
  }
qed ();



lemma "Forall_reverse"
/
  forall i (a : U i) (P : a -> U i) l .
    Forall P (reverse l)
    <->
    Forall P l
/;

inference.
intro /i a P l/.
induction /l/ >> auto.
intro /h t IH/.
rewrite /-> Forall_cons_iff/.
rewrite /-> Forall_append_iff/.
rewrite /-> Forall_cons_iff/.
rewrite /-> Forall_nil_iff/.
rewrite /-> Logic.prod_id_r/.
rewrite /<- IH/.
rewrite /-> Logic.prod_commute/.
qed ();



lemma "Exists_reverse"
/
  forall i (a : U i) (P : a -> U i) l .
    Exists P (reverse l)
    <->
    Exists P l
/;

inference.
intro /i a P l/.
induction /l/ >> auto.
intro /h t IH/.
rewrite /-> Exists_cons_iff/.
rewrite /-> Exists_append_iff/.
rewrite /-> Exists_cons_iff/.
rewrite /-> Exists_nil_iff/.
rewrite /-> Logic.sum_id_r/.
rewrite /<- IH/.
rewrite /-> Logic.sum_commute/.
qed ();



lemma "In_reverse"
/
  forall i (a : U i) x l .
    In a x (reverse l)
    <->
    In a x l
/;

inference.
intro /i a x l/.
rewrite /-> In_as_exists at 0 0/.
apply /Exists_reverse/.
qed ();



(* Nth *)

alias /option/ /Option.option/;
alias /None/ /Option.None/;
alias /Some/ /Option.Some/;


define /nth {a} l i/
/
  list_iter a (fn _ . nat -> option a)
    (fn _ . None)
    (fn h _ f i .
       nat_case i
         (Some h)
         (fn i' . f i'))
    l
    i
//
  intersect lv . forall (a : U lv) . list a -> nat -> option a
/;

inference.
unfold /nth/.
typecheck.
qed ();



reductions
/
  nth a (nil _) _ --> None a ;
  nth a (cons _ h t) i --> nat_case i (Some a h) (fn i' . nth a t i') ;
  unfolding nth
/;



lemma "nth_within_length"
/
  forall lv (a : U lv) l i .
    i < length l
    <-> (exists x . nth l i = Some x : option a)
/;

inference.
intro /lv a l/.
induction /l/.

(* nil *)
{
intro /i/.
split.
  {
  intro /H/.
  so /Nat.lt_0_not _ H/ /0/.
  }

  {
  intro /(x H)/.
  injection /H/.
  }
}

(* cons *)
{
intro /h t IH i/.
destruct /i/ /| i/.
  {
  split.
    {
    intro /Hlt/.
    exists /h/.
    auto.
    }

    {
    intro /(x Heq)/.
    apply /Nat.lt_0_succ/.
    }
  }
split.
  {
  intro /Hlt/.
  apply /IH/.
  apply /Nat.lt_succ_invert/ >> auto.
  }

  {
  intro /(x Heq)/.
  apply /Nat.lt_succ_succ/.
  apply /IH/.
  exists /x/.
  reduce /Heq/.
  auto.
  }
}
qed ();



lemma "nth_outside_length"
/
  forall lv (a : U lv) l i .
    length l <= i
    <->
    nth l i = None : option a
/;

inference.
intro /lv a l/.
induction /l/.

(* nil *)
{
intro /i/.
split.
  {
  auto.
  }

  {
  intro /_/.
  apply /Nat.leq_0_min/.
  }
}

(* cons *)
{
intro /h t IH i/.
destruct /i/ /| i/.
  {
  split.
    {
    intro /Hleq/.
    so /Nat.leq_succ_0_not _ Hleq/ /0/.
    }

    {
    intro /Heq/.
    reduce /Heq/.
    injection /Heq/.
    }
  }
split.
  {
  intro /Hleq/.
  apply /IH/.
  apply /Nat.leq_succ_invert/ >> auto.
  }

  {
  intro /Heq/.
  apply /Nat.leq_succ_succ/.
  apply /IH/ >> auto.
  }
}
qed ();



lemma "nth_append_left"
/
  forall lv (a : U lv) l1 l2 i .
    i < length l1
    -> nth (append l1 l2) i = nth l1 i : option a
/;

inference.
intro /lv a l1 l2/.
induction /l1/.

(* nil *)
{
intro /i H/.
so /Nat.lt_0_not _ H/ /0/.
}

(* cons *)
{
intro /h t IH i Hlt/.
destruct /i/ /| i/.
  {
  reduce //.
  auto.
  }
reduce //.
apply /IH/.
apply /Nat.lt_succ_invert/ >> auto.
}
qed ();



lemma "nth_append_right"
/
  forall lv (a : U lv) l1 l2 i .
    length l1 <= i
    -> nth (append l1 l2) i = nth l2 (i - length l1) : option a
/;

inference.
intro /lv a l1 l2/.
induction /l1/.

(* nil *)
{
intro /i _/.
auto.
}

(* cons *)
{
intro /h t IH i Hleq/.
destruct /i/ /| i/.
  {
  so /Nat.leq_succ_0_not _ Hleq/ /0/.
  }
reduce //.
apply /IH/.
apply /Nat.leq_succ_invert/ >> auto.
}
qed ();



lemma "nth_map"
/
  forall lv (a b : U lv) (f : a -> b) l i .
    nth (map f l) i = Option.map f (nth l i) : option b
/;

inference.
intro /lv a b f l/.
induction /l/ >> auto.
intro /h t IH i/.
destruct /i/ /| i/.
  {
  reduce //.
  auto.
  }
reduce //.
apply /IH/.
qed ();



lemma "nth_In"
/
  forall lv (a : U lv) l i .
    Option.option_case (nth l i)
      unit
      (fn x . In a x l)
/;

inference.
intro /lv a l/.
induction /l/ >> auto.
intro /h t IH i/.
destruct /i/ /| i/.
  {
  reduce //.
  auto.
  }
reduce //.
so /IH i/ /H/.
revert /H/.
generalize /nth t i/ /_/ /x/.
destruct /x/ /{ | x }/ >> auto.
qed ();



(* Zip *)

define /zip {a b} l1/
/
  list_iter a (fn _ . list b -> list (a & b))
    (fn _ . nil)
    (fn h1 _ f l2 .
       list_case l2
         nil
         (fn h2 t2 . (h1 , h2) :: f t2))
    l1
//
  intersect i . forall (a b : U i) . list a -> list b -> list (a & b)
/;

inference.
unfold /zip/.
typecheck.
qed ();



define /unzip {a b} l/
/
  list_iter (a & b) (fn _ . list a & list b)
    (nil , nil)
    (fn h _ p . (h #1 :: p #1 , h #2 :: p #2))
    l
//
  intersect i . forall (a b : U i) . list (a & b) -> list a & list b
/;

inference.
unfold /unzip/.
typecheck.
qed ();



reductions
/
  zip a b (nil _) _ --> nil (a & b) ;
  zip a b (cons _ h1 t1) l2 --> list_case b (list (a & b)) l2 (nil (a & b)) (fn h2 t2 . cons (a & b) (h1 , h2) (zip a b t1 t2)) ;

  unzip a b (nil _) --> (nil a , nil b) ;
  unzip a b (cons _ h t) --> (cons a (h #1) (unzip a b t #1) , cons b (h #2) (unzip a b t #2)) ;
  
  unfolding zip unzip
/;



lemma "zip_unzip"
/
  forall i (a b : U i) (l : list (a & b)) .
    zip (unzip l #1) (unzip l #2) = l : list (a & b)
/;

inference.
intro /i a b l/.
induction /l/ >> auto.
(* cons *)
intro /h t IH/.
compat >> auto.
destruct /h/ /x y/.
reduce //.
reflexivity.
qed ();



lemma "unzip_zip"
/
  forall i (a b : U i) (l1 : list a) (l2 : list b) .
    length l1 = length l2 : nat
    -> unzip (zip l1 l2) = (l1 , l2) : (list a & list b)
/;

inference.
intro /i a b l1/.
induction /l1/.

(* nil *)
{
intro /l2 Hlen/.
destruct /l2/ /| h t/ >> auto.
reduce /Hlen/.
injection /Hlen/.
}

(* cons *)
{
intro /h1 t1 IH l2 Hlen/.
destruct /l2/ /| h2 t2/.
  {
  reduce /Hlen/.
  injection /Hlen/.
  }
reduce //.
reduce /Hlen/.
injection /Hlen/.
reintro /Hlen'/.
rewrite /-> IH at all/ >> auto.
}
qed ();



lemma "append_zip"
/
  forall i (a b : U i) (l1 l1' : list a) (l2 l2' : list b) .
    length l1 = length l2 : nat
    -> append (zip l1 l2) (zip l1' l2') = zip (append l1 l1') (append l2 l2') : list (a & b)
/;

inference.
intro /i a b l1/.
induction /l1/.

(* nil *)
{
intro /l1' l2 l2' Hlen/.
destruct /l2/ /| h2 t2/.
  {
  reduce //.
  reflexivity.
  }

  {
  reduce /Hlen/.
  injection /Hlen/.
  }
}

(* cons *)
{
intro /h1 t1 IH l1' l2 l2' Hlen/.
destruct /l2/ /| h2 t2/.
  {
  reduce /Hlen/.
  injection /Hlen/.
  }
reduce //.
reduce /Hlen/.
injection /Hlen/.
reintro /Hlen'/.
compat.
apply /IH/ >> auto.
}
qed ();



lemma "append_unzip"
/
  forall i (a b : U i) (l l' : list (a & b)) .
    append (unzip l #1) (unzip l' #1) = unzip (append l l') #1 : list a
    & append (unzip l #2) (unzip l' #2) = unzip (append l l') #2 : list b
/;

inference.
intro /i a b l l'/.
induction /l/.

(* nil *)
{
auto.
}

(* cons *)
{
intro /h t (IH1 IH2)/.
destruct /h/ /x y/.
reduce //.
split >> compat >> auto.
}
qed ();



lemma "length_zip"
/
  forall i (a b : U i) (l1 : list a) (l2 : list b) .
    length (zip l1 l2) = Nat.min (length l1) (length l2) : nat
/;

inference.
intro /i a b l1/.
induction /l1/.

(* nil *)
{
intro /l2/.
rewrite /-> Nat.min_ann_l/.
reflexivity.
}

(* cons *)
{
intro /h1 t1 IH1 l2/.
destruct /l2/ /| h2 t2/.
  {
  reduce //.
  rewrite /-> Nat.min_ann_r/.
  reflexivity.
  }
reduce //.
rewrite /-> Nat.min_succ/.
compat.
apply /IH1/.
}
qed ();



lemma "length_unzip"
/
  forall i (a b : U i) (l : list (a & b)) .
    length (unzip l #1) = length l : nat
    & length (unzip l #2) = length l : nat
/;

inference.
intro /i a b l/.
induction /l/ >> auto.
(* cons *)
intro /h t (IH1 IH2)/.
rewrite /-> IH1 , -> IH2/.
auto.
qed ();



lemma "reverse_zip"
/
  forall i (a b : U i) (l1 : list a) (l2 : list b) .
    length l1 = length l2 : nat
    -> reverse (zip l1 l2) = zip (reverse l1) (reverse l2) : list (a & b)
/;

inference.
intro /i a b l1/.
induction /l1/.

(* nil *)
{
intro /l2 Hlen/.
reflexivity.
}

(* cons *)
{
intro /h1 t1 IH l2 Hlen/.
destruct /l2/ /| h2 t2/.
  {
  reduce /Hlen/.
  injection /Hlen/.
  }
reduce /Hlen/.
injection /Hlen/.
reintro /Hlen'/.
reduce //.
rewrite /<- append_zip/.
  {
  rewrite /-> length_reverse at all/.
  hyp /Hlen'/.
  }
compat.
apply /IH/ >> auto.
}
qed ();



lemma "reverse_unzip"
/
  forall i (a b : U i) (l : list (a & b)) .
    reverse (unzip l #1) = unzip (reverse l) #1 : list a
    & reverse (unzip l #2) = unzip (reverse l) #2 : list b
/;

inference.
intro /i a b l/.
induction /l/ >> auto.
(* cons *)
intro /h t (IH1 IH2)/.
destruct /h/ /x y/.
reduce //.
rewrite /-> IH1 , -> IH2/.
rewrite /<- append_unzip _# 5 #1/.
rewrite /<- append_unzip _# 5 #2/.
auto.
qed ();



lemma "nth_zip"
/
  forall lv (a b : U lv) (l1 : list a) (l2 : list b) (i : nat) .
    nth (zip l1 l2) i
    =
    Option.bind
      (nth l1 i)
      (fn x .
         Option.bind
           (nth l2 i)
           (fn y . Option.Some (x , y)))
    : Option.option (a & b)
/;

inference.
intro /lv a b l1/.
induction /l1/ >> auto.
(* cons *)
intro /h1 t1 IH l2 i/.
destruct /l2/ /| h2 t2/.
  {
  reduce //.
  generalize /nat_case _ _ _/ /_/ /z/.
  destruct /z/ /{| z}/ >> reduce // >> reflexivity.
  }
reduce //.
destruct /i/ /| i/.
  {
  reduce //.
  reflexivity.
  }
reduce //.
rewrite /-> IH/.
reflexivity.
qed ();



lemma "nth_unzip"
/
  forall lv (a b : U lv) (l : list (a & b)) (i : nat) .
    nth (unzip l #1) i = Option.map (fn x . x #1) (nth l i) : Option.option a
    & nth (unzip l #2) i = Option.map (fn x . x #2) (nth l i) : Option.option b
/;

inference.
intro /lv a b l/.
induction /l/ >> auto.
(* cons *)
intro /h t IH i/.
destruct /i/ /| i/.
  {
  reduce //.
  auto.
  }
reduce //.
rewrite /-> IH i #1 , -> IH i #2/.
auto.
qed ();


endModule ();
