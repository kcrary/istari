
structure ParseBar =
   struct

      structure R = CheckpointedRef
      structure T = ETerm

      val bindbar : Constant.constant R.dest = R.dest ()
      val bindbart : Constant.constant R.dest = R.dest ()

      fun parseBind x m n = T.apply2 (R.read bindbar) m (T.lam (SOME x) n)
      fun parseBindT x m b = T.apply2 (R.read bindbart) m (T.lam (SOME x) b)

   end


grammardef Bar

   rule Term(0) ::= "bindbar" Ident "=" Term(1) "in" Term(0) => ParseBar.parseBind
   rule Term(0) ::= "bindbart" Ident "=" Term(1) "in" Term(0) => ParseBar.parseBindT

   reserved "bindbar" "bindbart" : Ident

end


functor AfterBindbar () :> sig end =
   struct

      val Collapse (bindbar, bindbart) =
         readRegistry /Bar.AfterBindbarEnv/
            /[constant constant]/

      structure U = Show.Unparsing

      val () = CheckpointedRef.write ParseBar.bindbar bindbar
      val () = CheckpointedRef.write ParseBar.bindbart bindbart

      val () = UnparseTerm.registerLet bindbar "bindbar "
      val () = UnparseTerm.registerLet bindbart "bindbart "

      val () =
         U.reserved :=
            List.foldl
               (fns str set => SymbolSet.insert set (Symbol.fromValue str))
               (!U.reserved)
               ["bindbar", "bindbart"]

   end


functor AfterBarAll () :> sig end =
   struct

      structure D = DestructInternal
      structure R = Reduction
      structure T = Term

      open Tactic
      open Case

      val Collapse (bar, bar_unroll, now, laterf, bar_subtype, bar_iter) =
         readRegistry /Bar.AfterBarAllEnv/
            /[constant constant constant constant constant constant]/

      val () =
         List.app Registry.delete
            (parseLongidents
                /Bar.AfterBindbarEnv
                 Bar.AfterBarAllEnv/)

      val () =
         Constant2Table.insert TypecheckInternal.subtypeTactics (bar, bar)
            (Backchain.applyRaw /\Term.Const bar_subtype\/)

      val () =
         ConstantTable.insert InductionInternal.iterators bar (bar_iter, 1, 0)

      fun destBar i pat set =
         (case pat of
             IntroPattern.Or [p1, p2] =>
                let
                   do (jud, _) = withgoal

                   val h = Judgement.hyp jud i
                   val sym = Directory.freshSet set
                in
                   hypCaseT h
                   /
                   $tm \bar\ ? =>
                   \(fnc a =>
                        (* bar A, ... |- C *)
                        refine (Rule.equivalenceLeftAlt i (T.evar ()) (T.evar ()) (T.evar ()))
                        >>> [
                            (* bar A, ... |- bar A = A % future (bar A) : type *)
                            witnessRaw (ETerm.literal (T.apply2 bar_unroll (T.evar ()) (T.evar ())))
                            >> idtacM (Seq.cons sym Seq.empty, D.Auxiliary),

                            (* A & future (bar A), ... |- C *)
                            refine (Rule.sumLeft i (T.evar ()) (T.evar ()) (T.evar ()))
                            >>> [
                                (* a, ...[inl 0 . ^] |- C[under_i (inl 0 . ^)] *)
                                D.refold jud i 1 (T.apply1 now T.zero)
                                   (* now 0 --> inl 0 *)
                                   (R.trans [R.unfold, R.beta 1])
                                >>+
                                (* a, ...[now 0 . ^] |- C[under_i (now 0 . ^)] *)
                                D.dest i p1 set,
    
                                (* future (bar A), ...[inr 0 . ^] |- C[under_i (inr 0 . ^)] *)
                                D.refold jud i 1 (T.apply1 laterf T.zero)
                                   (* laterf 0 --> inr 0 *)
                                   (R.trans [R.unfold, R.beta 1])
                                >>+
                                (* future (bar A), ...[laterf 0 . ^] |- C[under_i (laterf 0 . ^)] *)
                                D.dest i p2 set
                                ]
                            ])\
                   /
                end

           | _ =>
                fail "bar pattern expected")

      val () =
         ConstantTable.insert D.destructTactics bar destBar

   end
