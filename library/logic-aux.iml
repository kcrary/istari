
structure ParseLogic =
   struct

      structure T = ETerm
      structure R = CheckpointedRef
      type constant = Constant.constant

      val not : constant R.dest = R.dest ()
      val neq : constant R.dest = R.dest ()

      fun parseNot p = T.apply1 (R.read not) p
      fun parseIff p q = T.apply2 Prim.iff p q
      fun parseNeq m n a = T.apply3 (R.read neq) a m n

   end


grammardef Logic

   open ParseLogic

   rule Term(5)  ::= Term(6) "<->" Term(6) => parseIff
   rule Term(30) ::= Term(31) "!=" Term(31) ":" Term(31) => parseNeq

end

grammaron Logic



functor AfterIff () :> sig end =
   struct

      val Collapse (not) =
         readRegistry /Logic.AfterIffEnv/
            /[constant]/

      structure CR = CheckpointedRef
      structure U = Show.Unparsing

      val () = CR.write ParseLogic.not not


      fun register k arity prec unp =
         ConstantTable.insert U.unparsingTable k (arity, prec, ref true, unp)


      val () =
         register Prim.iff 2 5
         (U.wrap
             (U.apply2 Prim.iff U.show U.show)
             (fn (p, q) => U.append [p 6, U.break 1, U.string "<-> ", q 6]))

   end


functor AfterIffCompat () :> sig end =
   struct

      val Collapse (not, not_inhabitant, iff_refl, iff_symm, iff_trans, iff_compat_1, iff_compat_2, not_compat_arrow, not_compat_iff, prod_compat_iff, sum_compat_iff) =
         readRegistry /Logic.AfterIffCompatEnv/
            /[constant constant constant constant constant constant constant constant constant constant constant]/

      val iff = Prim.iff

      structure B = BackchainInternal
      structure H = ConstantTable
      structure T = Term
      structure CR = CheckpointedRef

      
      val () =
         ConstantTable.insert TypecheckInternal.semitrivialIntroTactics not
            (Term.Lam (NONE, Term.Triv), Backchain.applyPriority /\T.Const not_inhabitant\/);

      val () =
         H.insert EqualityTacticInternal.reflexivityTactics iff
         (B.witnessPriority /\T.Const iff_refl\ _ _/)
      
      val () =
         H.insert EqualityTacticInternal.symmetryTactics iff
         (andthenOn 0 (B.witnessPriority /\T.Const iff_symm\ _ _ _ __/))

      val () =
         H.insert EqualityTacticInternal.transitivityTactics iff
         (fn n => B.witnessPriority /\T.Const iff_trans\ _ _ \n\ _ __ __/)

      val () =
         List.app
            (fn (const, i, rconst, cov, tacfn) =>
                RewriteInternal.CICTable.insert 
                   RewriteInternal.compatibilityTable 
                   (const, i, rconst)
                   (RewriteTypes.General rconst, cov, 0, (fns _ _ tac => tacfn tac)))
            [
            (iff, 0, iff, true, 
             andthenOn 0 (B.witnessPriority /\T.Const iff_compat_1\ _ _ _ _ __/)),

            (iff, 1, iff, true,
             andthenOn 0 (B.witnessPriority /\T.Const iff_compat_2\ _ _ _ _ __/)),
            
            (not, 0, iff, true,
             andthenOn 0 (B.witnessPriority /\T.Const not_compat_iff\ _ _ _ __/)),

            (not, 0, Prim.arrow, false,
             andthenOn 0 (B.witnessPriority /\T.Const not_compat_arrow\ _ _ _ __/)),
            ]


         
      open Tactic


      fun weakenIffArrow tac =
         goalCaseT
         / \Prim.arrow\ ? ? =>
           \(fnc a b =>
                (* A -> B *)
                refine (Rule.prodElim1 (T.evar ()) (T.apply2 Prim.arrow b a))
                >>
                (* (A -> B) & (B -> A) *)
                refine (Rule.unreduce (T.apply2 iff a b) Reduction.unfold)
                >>
                tac)\
         /


      fun weakenIffArrowContra tac =
         goalCaseT
         / \Prim.arrow\ ? ? =>
           \(fnc b a =>
                (* B -> A *)
                refine (Rule.prodElim2 (T.apply2 Prim.arrow a b) (T.evar ()))
                >>
                (* (A -> B) & (B -> A) *)
                refine (Rule.unreduce (T.apply2 iff a b) Reduction.unfold)
                >>
                tac)\
         /


      val () = 
         List.app
            (fn (rconst, rconst', cov, tacfn) =>
                let
                   val entry = (rconst', cov, (fns _ _ tac => tacfn tac))
                in
                   H.insertMerge RewriteInternal.weakeningTable rconst [entry] (fn l => entry :: l)
                end)
            [
            (iff, Prim.arrow, true, weakenIffArrow),
            (iff, Prim.arrow, false, weakenIffArrowContra)
            ]

   end


functor AfterLogicAll () :> sig end =
   struct

      val Collapse (neq, neq_symm) =
         readRegistry /Logic.AfterLogicAllEnv/
            /[constant constant]/

      val () =
         List.app Registry.delete
            (parseLongidents
                /Logic.AfterIffEnv
                 Logic.AfterIffCompatEnv
                 Logic.AfterLogicAllEnv/)


      val () = CheckpointedRef.write ParseLogic.neq neq


      val () =
         ConstantTable.insert EqualityTacticInternal.symmetryTactics neq
         (andthenOn 0 (Backchain.witnessPriority /\Term.Const neq_symm\ _ _ _ _ __/))


      structure U = Show.Unparsing

      fun register k arity prec unp =
         ConstantTable.insert U.unparsingTable k (arity, prec, ref true, unp)

      val () =
         register neq 3 30
         (U.wrap
             (U.apply3 neq U.show U.show U.show)
             (fn (a, m, n) => U.append [m 31, 
                                        U.break 1, U.string "!= ", n 31, 
                                        U.break 1, U.string ": ", a 31]))

   end
