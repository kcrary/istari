
structure ParseLogic =
   struct

      structure T = ETerm

      val not = Susp.delay (fn () => parseConstant /Logic.not/)
      val iff = Susp.delay (fn () => parseConstant /Logic.iff/)

      fun parseNot p = T.apply1 (Susp.force not) p
      fun parseIff p q = T.apply2 (Susp.force iff) p q

   end


grammardef Logic

   open ParseLogic

   rule Term(5) ::= Term(6) "<->" Term(6) => parseIff

end

grammaron Logic



functor AfterIff () :> sig end =
   struct

      structure B = BackchainInternal
      structure H = ConstantTable
      structure T = Term

      val iff = parseConstant /Logic.iff/

      structure U = Show.Unparsing

      fun register k arity prec unp =
         ConstantTable.insert U.unparsingTable k (arity, prec, unp)


      val () =
         register iff 2 5
         (U.wrap
             (U.apply2 iff U.show U.show)
             (fn (p, q) => U.append [p 6, U.break 1, U.string "<-> ", q 6]))


      open Tactic

      val () =
         H.insert EqualityTacticInternal.reflexivityTactics iff
         (B.witnessPriority /Logic.iff_refl _ _/)
      
      val () =
         H.insert EqualityTacticInternal.symmetryTactics iff
         (andthenOn 3 (B.witnessPriority /Logic.iff_symm _ _ _ __/))

      val () =
         H.insert EqualityTacticInternal.transitivityTactics iff
         (fn n => B.witnessPriority /Logic.iff_trans _ _ \n\ _ __ __/)
         

      fun weakenIffArrow tac =
         goalCase
         / \Prim.arrow\ ? ? =>
           \(fnc a b =>
                (* A -> B *)
                refine (Rule.prodElim1 (T.evar ()) (T.apply2 Prim.arrow b a))
                >>
                (* (A -> B) & (B -> A) *)
                replaceConcl (T.apply2 iff a b)
                >>
                tac)\
         /

      fun weakenIffArrowContra tac =
         goalCase
         / \Prim.arrow\ ? ? =>
           \(fnc b a =>
                (* B -> A *)
                refine (Rule.prodElim2 (T.apply2 Prim.arrow a b) (T.evar ()))
                >>
                (* (A -> B) & (B -> A) *)
                replaceConcl (T.apply2 iff a b)
                >>
                tac)\
         /


      val () = 
         List.app
            (fn (const, const', cov, f) =>
                H.insertMerge RewriteInternal.weakeningTable const 
                   [(const', cov, f)]
                   (fn l => (const', cov, f) :: l))
            [
            (iff, Prim.arrow, true, weakenIffArrow),
            (iff, Prim.arrow, false, weakenIffArrowContra)
            ]

   end
