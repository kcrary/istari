
openModule /Nat/;
openModule /Partial/;
openModule /SyntacticEquality/;

beginModule "SmithParadox";


lemma "inadmissible_type"
/
  exists (a : U 0) . not (admiss a)
/;

set /T/ /{ h : nat -> partial unit | not (forall x . halts (h x)) }/.
set /f/ /fn g x . if x =? 0 then () else g (x - 1)/.
assert /T : U 0/ /HofT/.
  {
  unfold /T/.
  typecheck.
  }
assert /f : partial T -> nat -> partial unit/ /Hoffpre/.
  {
  unfold /f , T/.
  introOf /g x/.
  reduce //.
  fold /manual (g _)/.
  typecheck.
  RuleTactic.activeApp (parseCurr /{h : nat -> partial unit | not (forall (x : nat) . halts (h x))}/) (parseCurr /g/) (parseCurr /pred x/) >> auto.
  }
assert /forall (g : partial T) . not (forall (x : nat) . halts (f g x))/ /Hpartial/.
  {
  intro /g Htotal/.
  unfold /T in g/.
  assert /halts g/ /Hhalts/.
    {
    so /Htotal 1/ /H/.
    revert /H/.
    unfold /f/.
    intro /H/.
      {
      RuleTactic.activeApp (parseCurr /{h : nat -> partial unit | not (forall (x : nat) . halts (h x))}/) (parseCurr /g/) (parseCurr /0/) >> auto.
      }
    RuleTactic.appHaltsInv (parseCurr /0/).
    hyp /H/.
    }
  tighten /g/ /{h : _ | _}/.
    {
    RuleTactic.partialElimOf >> auto.
    }
  destruct /g/ /[g Hpartial]/.
  unhide.
  witness /Hpartial __/.
  intro /x/.
  so /Htotal (succ x)/ /H/.
  revert /H/.
  unfold /f/.
  reduce //.
  auto.
  }
assert /f : partial T -> partial T/ /Hoff/.
  {
  unfold /T at 1/.
  introOf /g/.
  subsume /{ h : nat -> partial unit | not (forall (x : nat) . halts (h x)) }/.
    {
    typecheck.
    }
  typecheck.
  split.
  apply /Hpartial/.
  }
exists /T/.
intro /Hadmiss/.
assert /fix f : partial T/ /Hfix/.
  {
  RuleTactic.fixpointInductionOf >> auto.
  }
assert /halts (fix f)/ /Hhaltsfix/.
  {
  RuleTactic.arrowTotal (parseCurr /nat/) (parseCurr /partial unit/).
  unroll /fix/.
  inferSpine /Hoffpre/ /__ (fix f)/ /H/.
  exact /H/.
  }
assert /fix f : T/ /Hfix'/.
  {
  RuleTactic.partialElimOf >> auto.
  }
unfold /T in Hfix'/.
Typecheck.withTypecheck $ RuleTactic.setElim (Term.evar ()) (Term.evar ()) (parseCurr /fix f/).
reintro /Hpartialfix/.
unhide.
witness /Hpartialfix __/.
intro /x/.
sinduction /x/.
reintro /IH/.
unroll /fix/.
unfold /f/.
destruct /x/ /| x/.
  {
  reduce //.
  RuleTactic.unitTotal >> auto.
  }

  {
  reduce //.
  apply /IH/.
  omega.
  }
qed ();


endModule ();
