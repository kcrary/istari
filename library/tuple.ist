File.import "datatype-load.iml";
File.import "miscellaneous-load.iml";

alias /bogus/ /Miscellaneous.bogus/;

beginModule "Tuple";


aliasExport /letpair/ Prim.letpair;



lemma "letpair_type"
/
  letpair : intersect i (a b c : U i) . a & b -> (a -> b -> c) -> c
/;

inference.
introOf /i a b c/.
unfold /letpair/.
typecheck.
qed ();
Define.recordTyping "letpair_type";



typedef
/
  datatype
    intersect (lv : level) .
    intermediate (a b c : U lv) .
    U lv
  of
    triple : type =
    | trip : a -> b -> c -> triple
/;



define /lettrip y z/
/
  triple_iter bogus bogus bogus bogus z y
//
  intersect i (a b c d : U i) . triple a b c -> (a -> b -> c -> d) -> d
/;

inference.
introOf /i a b c d y z/.
destruct /y/ /{w x y}/.
unfold /lettrip/.
typecheck.
qed ();



reductions
/
  lettrip (trip x y z) f --> f x y z ;

  unfolding lettrip
/;



typedef
/
  datatype
    intersect (lv : level) .
    intermediate (a b c d : U lv) .
    U lv
  of
    quadruple : type =
    | quad : a -> b -> c -> d -> quadruple
/;



define /letquad y z/
/
  quadruple_iter bogus bogus bogus bogus bogus z y
//
  intersect i (a b c d e : U i) . quadruple a b c d -> (a -> b -> c -> d -> e) -> e
/;

inference.
introOf /i a b c d e y z/.
destruct /y/ /{v w x y}/.
unfold /letquad/.
typecheck.
qed ();



reductions
/
  letquad (quad w x y z) f --> f w x y z ;

  unfolding letquad
/;



typedef
/
  datatype
    intersect (lv : level) .
    intermediate (a b c d e : U lv) .
    U lv
  of
    quintuple : type =
    | quint : a -> b -> c -> d -> e -> quintuple
/;



define /letquint y z/
/
  quintuple_iter bogus bogus bogus bogus bogus bogus z y
//
  intersect i (a b c d e f : U i) . quintuple a b c d e -> (a -> b -> c -> d -> e -> f) -> f
/;

inference.
introOf /i a b c d e f y z/.
destruct /y/ /{u v w x y}/.
unfold /letquint/.
typecheck.
qed ();



reductions
/
  letquint (quint v w x y z) f --> f v w x y z ;

  unfolding letquint
/;



writeRegistry /AfterTupleAllEnv/
  /[constant constant constant]/
  (Collapse (parseConstant /lettrip/, parseConstant /letquad/, parseConstant /letquint/));


endModule ();
