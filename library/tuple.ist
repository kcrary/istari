File.import "datatype-load.iml";
File.import "miscellaneous-load.iml";

alias /bogus/ /Miscellaneous.bogus/;

beginModule "Tuple";


aliasExport /letpair/ Prim.letpair;



lemma "letpair_type"
/
  letpair : intersect i (a b c : U i) . a & b -> (a -> b -> c) -> c
/;

inference.
introOf /i a b c/.
unfold /letpair/.
typecheck.
qed ();
Define.recordTyping "letpair_type";



typedef
/
  datatype
    intersect (lv : level) .
    intermediate (a b c : U lv) .
    U lv
  of
    triple : type =
    | trip : a -> b -> c -> triple
/;



define /lettrip y z/
/
  triple_iter bogus bogus bogus bogus z y
//
  intersect i (a b c d : U i) . triple a b c -> (a -> b -> c -> d) -> d
/;

inference.
introOf /i a b c d y z/.
destruct /y/ /{w x y}/.
unfold /lettrip/.
typecheck.
qed ();



define /trip1 y/
/
  triple_iter bogus bogus bogus bogus (fn x _ _ . x) y
//
  intersect i (a b c : U i) . triple a b c -> a
/;

inference.
introOf /i a b c {w x y}/.
unfold /trip1/.
typecheck.
qed ();



define /trip2 y/
/
  triple_iter bogus bogus bogus bogus (fn _ x _ . x) y
//
  intersect i (a b c : U i) . triple a b c -> b
/;

inference.
introOf /i a b c {w x y}/.
unfold /trip2/.
typecheck.
qed ();



define /trip3 y/
/
  triple_iter bogus bogus bogus bogus (fn _ _ x . x) y
//
  intersect i (a b c : U i) . triple a b c -> c
/;

inference.
introOf /i a b c {w x y}/.
unfold /trip3/.
typecheck.
qed ();



reductions
/
  lettrip (trip x y z) f --> f x y z ;
  trip1 (trip x y z) --> x ;
  trip2 (trip x y z) --> y ;
  trip3 (trip x y z) --> z ;

  unfolding lettrip trip1 trip2 trip3
/;



typedef
/
  datatype
    intersect (lv : level) .
    intermediate (a b c d : U lv) .
    U lv
  of
    quadruple : type =
    | quad : a -> b -> c -> d -> quadruple
/;



define /letquad y z/
/
  quadruple_iter bogus bogus bogus bogus bogus z y
//
  intersect i (a b c d e : U i) . quadruple a b c d -> (a -> b -> c -> d -> e) -> e
/;

inference.
introOf /i a b c d e y z/.
destruct /y/ /{v w x y}/.
unfold /letquad/.
typecheck.
qed ();



define /quad1 y/
/
  quadruple_iter bogus bogus bogus bogus bogus (fn x _ _ _ . x) y
//
  intersect i (a b c d : U i) . quadruple a b c d -> a
/;

inference.
introOf /i a b c d {v w x y}/.
unfold /quad1/.
typecheck.
qed ();



define /quad2 y/
/
  quadruple_iter bogus bogus bogus bogus bogus (fn _ x _ _ . x) y
//
  intersect i (a b c d : U i) . quadruple a b c d -> b
/;

inference.
introOf /i a b c d {v w x y}/.
unfold /quad2/.
typecheck.
qed ();



define /quad3 y/
/
  quadruple_iter bogus bogus bogus bogus bogus (fn _ _ x _ . x) y
//
  intersect i (a b c d : U i) . quadruple a b c d -> c
/;

inference.
introOf /i a b c d {v w x y}/.
unfold /quad3/.
typecheck.
qed ();



define /quad4 y/
/
  quadruple_iter bogus bogus bogus bogus bogus (fn _ _ _ x . x) y
//
  intersect i (a b c d : U i) . quadruple a b c d -> d
/;

inference.
introOf /i a b c d {v w x y}/.
unfold /quad4/.
typecheck.
qed ();



reductions
/
  letquad (quad w x y z) f --> f w x y z ;
  quad1 (quad w x y z) --> w ;
  quad2 (quad w x y z) --> x ;
  quad3 (quad w x y z) --> y ;
  quad4 (quad w x y z) --> z ;

  unfolding letquad quad1 quad2 quad3 quad4
/;



typedef
/
  datatype
    intersect (lv : level) .
    intermediate (a b c d e : U lv) .
    U lv
  of
    quintuple : type =
    | quint : a -> b -> c -> d -> e -> quintuple
/;



define /letquint y z/
/
  quintuple_iter bogus bogus bogus bogus bogus bogus z y
//
  intersect i (a b c d e f : U i) . quintuple a b c d e -> (a -> b -> c -> d -> e -> f) -> f
/;

inference.
introOf /i a b c d e f y z/.
destruct /y/ /{u v w x y}/.
unfold /letquint/.
typecheck.
qed ();



define /quint1 y/
/
  quintuple_iter bogus bogus bogus bogus bogus bogus (fn x _ _ _ _ . x) y
//
  intersect i (a b c d e : U i) . quintuple a b c d e -> a
/;

inference.
introOf /i a b c d e {u v w x y}/.
unfold /quint1/.
typecheck.
qed ();



define /quint2 y/
/
  quintuple_iter bogus bogus bogus bogus bogus bogus (fn _ x _ _ _ . x) y
//
  intersect i (a b c d e : U i) . quintuple a b c d e -> b
/;

inference.
introOf /i a b c d e {u v w x y}/.
unfold /quint2/.
typecheck.
qed ();



define /quint3 y/
/
  quintuple_iter bogus bogus bogus bogus bogus bogus (fn _ _ x _ _ . x) y
//
  intersect i (a b c d e : U i) . quintuple a b c d e -> c
/;

inference.
introOf /i a b c d e {u v w x y}/.
unfold /quint3/.
typecheck.
qed ();



define /quint4 y/
/
  quintuple_iter bogus bogus bogus bogus bogus bogus (fn _ _ _ x _ . x) y
//
  intersect i (a b c d e : U i) . quintuple a b c d e -> d
/;

inference.
introOf /i a b c d e {u v w x y}/.
unfold /quint4/.
typecheck.
qed ();



define /quint5 y/
/
  quintuple_iter bogus bogus bogus bogus bogus bogus (fn _ _ _ _ x . x) y
//
  intersect i (a b c d e : U i) . quintuple a b c d e -> e
/;

inference.
introOf /i a b c d e {u v w x y}/.
unfold /quint5/.
typecheck.
qed ();



reductions
/
  letquint (quint v w x y z) f --> f v w x y z ;
  quint1 (quint v w x y z) --> v ;
  quint2 (quint v w x y z) --> w ;
  quint3 (quint v w x y z) --> x ;
  quint4 (quint v w x y z) --> y ;
  quint5 (quint v w x y z) --> z ;

  unfolding letquint quint1 quint2 quint3 quint4 quint5
/;



writeRegistry /AfterTupleAllEnv/
  /[constant constant constant]/
  (Collapse (parseConstant /lettrip/, parseConstant /letquad/, parseConstant /letquint/));


endModule ();
