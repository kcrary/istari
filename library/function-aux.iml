
functor AfterEquipollent () :> sig end =
   struct

      structure B = BackchainInternal
      structure H = ConstantTable
      structure T = Term

      val equipollent = resolveGlobal /Function.equipollent/
      val equipollent_refl = resolveGlobal /Function.equipollent_refl/
      val equipollent_symm = resolveGlobal /Function.equipollent_symm/
      val equipollent_trans = resolveGlobal /Function.equipollent_trans/
      val subpollent = resolveGlobal /Function.subpollent/
      val subpollent_refl = resolveGlobal /Function.subpollent_refl/
      val subpollent_trans = resolveGlobal /Function.subpollent_trans/

      val () =
         H.insert EqualityTacticInternal.reflexivityTactics equipollent
         (B.witnessPriority /\T.Const equipollent_refl\ _ _/)
      
      val () =
         H.insert EqualityTacticInternal.symmetryTactics equipollent
         (andthenOn 0 (B.witnessPriority /\T.Const equipollent_symm\ _ _ _ __/))

      val () =
         H.insert EqualityTacticInternal.transitivityTactics equipollent
         (fn n => B.witnessPriority /\T.Const equipollent_trans\ _ _ \n\ _ __ __/)

      val () =
         H.insert EqualityTacticInternal.reflexivityTactics subpollent
         (B.witnessPriority /\T.Const subpollent_refl\ _ _/)
      
      val () =
         H.insert EqualityTacticInternal.transitivityTactics subpollent
         (fn n => B.witnessPriority /\T.Const subpollent_trans\ _ _ \n\ _ __ __/)

   end
