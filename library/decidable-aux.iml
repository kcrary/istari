
functor AfterDecidableCompat () :> sig end =
   struct

      val Collapse (decidable, decidable_compat_iff) =
         readRegistry /Decidable.AfterDecidableCompatEnv/
            /[constant constant]/

      val iff = parseConstant /Logic.iff/ 

      val () =
         RewriteInternal.CICTable.insert 
            RewriteInternal.compatibilityTable
            (decidable, 0, iff)
            (RewriteTypes.General iff, true, 0, 
             (fns _ _ tac => andthenOn 0 (Backchain.witnessPriority /\Term.Const decidable_compat_iff\ _# 3 __/) tac))

   end


functor AfterDecidableAll () :> sig end =
   struct

      val () =
         List.app Registry.delete
            (parseLongidents
                /Decidable.AfterDecidableCompatEnv/)

   end
