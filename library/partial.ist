
(* Partial types *)

beginModule "Partial";


aliasExport /partial/ Prim.partial;
aliasExport /halts/ Prim.halts;
aliasExport /admiss/ Prim.admiss;
aliasExport /uptype/ Prim.uptype;
aliasExport (Symbol.fromValue "seq") Prim.seq;
aliasExport /bottom/ Prim.bottom;
aliasExport /total/ Prim.total;


lemma "partial_type"
/
  partial : intersect i . U i -> U i
/;

inference.
RuleTactic.partialType.
qed ();
recordTyping "partial_type";



lemma "halts_type"
/
  halts : intersect i (a : U i) . partial a -> U 0
/;

inference.
RuleTactic.haltsType.
qed ();
recordTyping "halts_type";



lemma "admiss_type"
/
  admiss : intersect i . U i -> U i
/;

inference.
RuleTactic.admissType.
qed ();
recordTyping "admiss_type";



lemma "uptype_type"
/
  uptype : intersect i . U i -> U i
/;

inference.
RuleTactic.uptypeType.
qed ();
recordTyping "uptype_type";



lemma "seq_type"
/
  `seq : intersect i (a b : U i) . partial a -> (a -> partial b) -> partial b
/;

inference.
RuleTactic.seqType.
qed ();
recordTyping "seq_type";



lemma "bottom_type"
/
  bottom : intersect i (a : U i) . partial a
/;

inference.
introOf /i a/.
RuleTactic.partialIntroBottomOf.
typecheck.
qed ();
recordTyping "bottom_type";



lemma "partial_elim"
/
  forall i (a : U i) (x : partial a) . halts x -> x : a
/;

inference.
intro /i a x H/.
RuleTactic.partialElimOf >> auto.
qed ();



lemma "fixpoint_induction"
/
  forall i (a : U i) (f : partial a -> partial a) .
    admiss a
    -> fix f : partial a
/;

inference.
intro /i a f Hadmiss/.
RuleTactic.fixpointInductionOf >> auto.
qed ();



lemma "uptype_impl_admiss"
/
  forall i (a : U i) . uptype a -> admiss a
/;

inference.
intro /i a H/.
RuleTactic.uptypeAdmiss.
hyp /H/.
qed ();



(*
Built-in:

defineRaw /total a/
/
  exists (_ : a <: partial a) . forall (x : a) . halts x
/;

The first conjunct is needed because we need to know
that a is strict for halts x to be well-formed.
*)


lemma "total_type"
/
  total : intersect i . U i -> U i
/;

inference.
unfold /total/.
typecheck.
qed ();
recordTyping "total_type";



alias /sequal/ Prim.sequal;

lemma "seqt_type"
/
  `seqt : intersect i (a b : U i) . total a -g> a -> (a -> b) -> b
/;

inference.
unfold /seqt/.
introOf /i a b Htotal/.
destruct /Htotal/ /Hstrict Htotal/.
unhide.
introOfRaw /x/ >> auto.
  {
  subsume /partial a -> (a -> partial b) -> partial b/ >> typecheck.
  }
introOfRaw /m/ >> auto.
  {
  subsume /(a -> partial b) -> partial b/ >> typecheck.
  }
assert /sequal m (fn y . m y)/ /Heq/.
  {
  RuleTactic.forallEtaSequal (parseCurr /a/) (Term.Sub (parseCurr /b/, Term.shift1)).
  unfold /arrow in m/.
  hypof.
  }
rewrite /-> Heq/.
assert /sequal (seq y = x in m y) (m x)/ /Heq'/.
  {
  RuleTactic.seqHaltsSequal.
  apply /Htotal/.
  }
rewrite /-> Heq'/.
typecheck.
qed ();
recordTyping "seqt_type";


endModule ();
