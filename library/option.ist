
Ctrl.use "datatypes.iml";

beginModule "Option";


typedef
/
  datatype
    intersect (i : level) .
    intermediate (a : U i) .
    U i
  of
    option : type =
    | None : option
    | Some : a -> option
/;

val option = parseConstant /option/;



define /option_case {a b} l mnone msome/
/
  option_iter a (fn _ . b) mnone msome l
//
  intersect i . 
  forall (a b : U i) .
    option a
    -> b
    -> (a -> b)
    -> b
/;

inference.
unfold /option_case/.
typecheck.
qed ();



reductions
/
  option_case _ _ (None) n _ --> n ;
  option_case _ _ (Some x) _ s --> s x ;
  unfolding option_case
/;



define /bind {a b} l f/
/
  option_case l None (fn x . f x)
//
  intersect i . forall (a b : U i) . option a -> (a -> option b) -> option b
/;

inference.
unfold /bind/.
typecheck.
qed ();



reductions
/
  bind _ b (None) _ --> None ;
  bind _ _ (Some x) f --> f x ;
  unfolding bind
/;



define /join {a} l/
/
  bind l (fn x . x)
//
  intersect i . forall (a : U i) . option (option a) -> option a
/;

inference.
unfold /join/.
typecheck.
qed ();



reductions
/
  join a (None) --> None ;
  join _ (Some l) --> l ;
  unfolding join
/;



define /map {a b} f l/
/
  bind l (fn x . Some (f x))
//
  intersect i . forall (a b : U i) . (a -> b) -> option a -> option b
/;

inference.
unfold /map/.
typecheck.
qed ();



reductions
/
  map _ b _ (None) --> None ;
  map _ b f (Some x) --> Some (f x) ;
  unfolding map
/;



define /valof {a} l x/
/
  option_case l x (fn y . y)
//
  intersect i . forall (a : U i) . option a -> a -> a
/;

inference.
unfold /valof/.
typecheck.
qed ();



reductions
/
  valof _ (None) x --> x ;
  valof _ (Some x) _ --> x ;
  unfolding valof
/;



lemma "option_subtype"
/
  intersect i (a b : U i) . a <: b -> option a <: option b
/;

intro /i A B sub {| x}/ >> auto.
qed();

val option_subtype = parseConstant /option_subtype/;



writeRegistry /AfterOptionAllEnv/
  /[constant constant]/
  (Collapse (option, option_subtype));


endModule ();
