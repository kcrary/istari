
structure ParseInteger =
   struct

      structure R = CheckpointedRef
      structure T = ETerm
      type constant = Constant.constant

      val minusz : constant R.dest = R.dest ()
      val leqz : constant R.dest = R.dest ()
      val ltz : constant R.dest = R.dest ()
      val integerOverload : OverloadsType.overloads R.dest = R.dest ()

      fun parsePlus m n = T.apply2 Prim.plusz m n
      fun parseMinus m n = T.apply2 (R.read minusz) m n
      fun parseTimes m n = T.apply2 Prim.timesz m n
      fun parseNeg m = T.apply1 Prim.negz m
      fun parseLeq m n = T.apply2 (R.read leqz) m n
      fun parseLt m n = T.apply2 (R.read ltz) m n

      fun activate m =
         T.getOverloads
            (fn over => T.setOverloads (R.read integerOverload) m)

   end


grammardef Integer 

   open ParseInteger

   rule Term(30)  ::= Term(31) "<z=" Term(31) => parseLeq
   rule Term(30)  ::= Term(31) "<z" Term(31) => parseLt
   rule Term(50)  ::= Term(50) "+z" Term(51) => parsePlus
   rule Term(50)  ::= Term(50) "-z" Term(51) => parseMinus
   rule Term(60)  ::= Term(60) "*z" Term(61) => parseTimes
   rule Term(90)  ::= "~z" Term(91) => parseNeg
   rule Term(100) ::= "@integer`" Term(100) => activate

end


grammaron Integer


functor AfterLtz () :> sig end =
   struct

      structure CR = CheckpointedRef
      structure O = Overload

      val Collapse (leqz, ltz, minusz) =
         readRegistry /Integer.AfterLtzEnv/
            /[constant constant constant]/

      val plusz = Prim.plusz
      val timesz = Prim.timesz
      val negz = Prim.negz

      
      val () = CR.write ParseInteger.leqz leqz
      val () = CR.write ParseInteger.ltz ltz
      val () = CR.write ParseInteger.minusz minusz


      structure U = Show.Unparsing

      fun register k arity prec unp =
         ConstantTable.insert U.unparsingTable k (arity, prec, ref true, unp)

      val integerSym = Symbol.fromValue "integer"
      val activateStr = "@integer`"

      fun registerBinary const prec lprec rprec str =
         register const 2 prec
         (U.ensureOverload integerSym
             (fn act =>
                 (U.wrap
                     (U.apply2 const U.show U.show)
                     (fn (a, b) =>
                         U.append
                            [
                            U.stringif act activateStr,
    
                            U.parens act $
                            U.append [a lprec,
                                      U.break 1, U.string str, b rprec]
                            ]))))

      val () = registerBinary leqz 30 31 31 "<= "
      val () = registerBinary ltz 30 31 31 "< "
      val () = registerBinary plusz 50 50 51 "+ "
      val () = registerBinary minusz 50 50 51 "- "
      val () = registerBinary timesz 60 60 61 "* "

      val () =
         register negz 1 90
         (U.ensureOverload integerSym
             (fn act =>
                 (U.wrap
                     (U.apply1 negz U.show)
                     (fn a => 
                         U.append
                            [
                            U.stringif act activateStr,

                            U.parens act $
                            U.append [U.string "~ ", a 91]
                            ]))))

   end


functor AfterLeqzInhabitant () :> sig end =
   struct

      structure T = Term

      val Collapse (leqz, ltz, leqz_inhabitant, ltz_inhabitant) =
         readRegistry /Integer.AfterLeqzInhabitantEnv/
            /[constant constant constant constant]/

      val () =
         ConstantTable.insert TypecheckInternal.trivialIntroTactics leqz
            (Backchain.applyPriority /\T.Const leqz_inhabitant\/)

      val () =
         ConstantTable.insert TypecheckInternal.trivialIntroTactics ltz
            (Backchain.applyPriority /\T.Const ltz_inhabitant\/)
   
   end


functor AfterIstrueNeqzb () :> sig end =
   struct

      val Collapse (ltzb, neqzb, istrue_eqzb, istrue_leqzb, istrue_ltzb, istrue_neqzb) =
         readRegistry /Integer.AfterIstrueNeqzbEnv/
            /[constant constant constant constant constant constant]/

      val eqzb = Prim.eqzb
      val leqzb = Prim.leqzb

      val () =
         ConstantTable.insert BoolTactic.booleanTests eqzb istrue_eqzb

      val () =
         ConstantTable.insert BoolTactic.booleanTests leqzb istrue_leqzb

      val () =
         ConstantTable.insert BoolTactic.booleanTests ltzb istrue_ltzb

      val () =
         ConstantTable.insert BoolTactic.booleanTests neqzb istrue_neqzb

   end


functor AfterIntegerIter () :> sig end =
   struct

      val Collapse (smaller_well_founded, integer_iter) =
         readRegistry /Integer.AfterIntegerIterEnv/
            /[constant constant]/

      structure J = Judgement
      structure T = Term
      
      open Tactic

      val integerInduction =
         let
            do (jud, dir) = withgoal

            do (b, tac) =
               BackchainInternal.soMain
                  (J.context jud)
                  (T.apply1 smaller_well_founded T.zero)
                  (fn msg => fail msg)
         in
            refine (Rule.assert b (T.evar ()))
            >>> [
                tac,

                chdir (Directory.bind0 dir)
                >>
                InductionInternal.accInduction
                ]
         end

      val () = ConstantTable.insert InductionInternal.inductionTactics Prim.integer integerInduction

      val () =
         ConstantTable.insert InductionInternal.iterators Prim.integer
            (integer_iter, 0, 0)

   end


functor AfterIntegerAll () :>
   sig
      val setArithInteger : unit -> unit
   end 
   =
   struct

      structure E = ETerm
      structure CR = CheckpointedRef
      structure T = Term

      val Collapse (leqz, ltz, minusz, leqz_refl, leqz_trans, plusz_leqz, negz_leqz, leqz_implication) =
         readRegistry /Integer.AfterIntegerAllEnv/
            /[constant constant constant constant constant constant constant constant]/

      val plusz = Prim.plusz
      val negz = Prim.negz
      val timesz = Prim.timesz

      val () =
         List.app Registry.delete
            (parseLongidents
                /Integer.AfterLtzEnv
                 Integer.AfterLeqzInhabitantEnv
                 Integer.AfterIstrueNeqzbEnv
                 Integer.AfterIntegerIterEnv
                 Integer.AfterIntegerAllEnv/)



      structure B = BackchainInternal
      structure H = ConstantTable
      structure T = Term
      
      val () =
         H.insert EqualityTacticInternal.reflexivityTactics leqz
         (B.witnessPriority /\T.Const leqz_refl\ _/)
      
      val () =
         H.insert EqualityTacticInternal.transitivityTactics leqz
         (fn n => B.witnessPriority /\T.Const leqz_trans\ _ \n\ _ __ __/)

      val () =
         List.app 
            (fn (const, i, rconst, rconst', cov, tacfn) => 
               RewriteInternal.CICTable.insert 
                  RewriteInternal.compatibilityTable 
                  (const, i, rconst)
                  (RewriteTypes.General rconst', cov, 0, (fns _ _ tac => tacfn tac)))
            [
            (plusz, 0, leqz, leqz, true,
             andthenOn 0 (B.witnessPriority /\T.Const plusz_leqz\ _ _ _ _ __ __/)),
          
            (plusz, 1, leqz, leqz, true,
             andthenOn 1 (B.witnessPriority /\T.Const plusz_leqz\ _ _ _ _ __ __/)),
          
            (negz, 0, leqz, leqz, false,
             andthenOn 0 (B.witnessPriority /\T.Const negz_leqz\ _ _ __/)),

            (leqz, 0, leqz, Prim.arrow, false,
             andthenOn 0 (B.witnessPriority /\T.Const leqz_implication\ _ _ _ _ __ __/)),
          
            (leqz, 1, leqz, Prim.arrow, true,
             andthenOn 1 (B.witnessPriority /\T.Const leqz_implication\ _ _ _ _ __ __/)),
            ]


      (* install overloaded arithmetic operations *)

      fun integerTerm n = T.Native (T.Integer (IntInf.fromInt n))

      val integerOverload =
         (Symbol.fromValue "integer",
          SOME $
          Overload.Methods
             {
             literal = integerTerm,
             leq = leqz,
             lt = ltz,
             plus = plusz,
             minus = minusz,
             times = timesz,
             neg = SOME negz,
             })

      val () = CR.write ParseInteger.integerOverload integerOverload

      fun setArithInteger () = CR.assign E.overloads integerOverload

   end
