

structure ParseList =
   struct

      structure R = CheckpointedRef

      val cons : Constant.constant R.dest = R.dest ()

      fun parseCons em en = ETerm.apply2 (R.read cons) em en

   end


grammardef List

   rule Term(40)  ::= Term(41) "::" Term(40) => ParseList.parseCons

end


grammaron List


functor AfterList () :> sig end =
   struct

      val Collapse (cons) =
         readRegistry /List.AfterListEnv/
            /[constant]/


      val () = CheckpointedRef.write ParseList.cons cons


      structure U = Show.Unparsing

      val () =
         ConstantTable.insert U.unparsingTable cons
            (2, 40, ref true,
             U.ifNoImplicits $
             U.wrap
                (U.apply2 cons U.show U.show)
                (fn (h, t) =>
                    U.append [
                             h 41,
                             U.break 1,
                             U.string ":: ",
                             t 40
                             ]))

   end


functor AfterListAll () :> sig end =
   struct

      val Collapse (list, list_uptype, cForall, cForall_uptype, cExists, cExists_uptype, list_subtype) =
         readRegistry /List.AfterListAllEnv/
            /[constant constant constant constant constant constant constant]/

      val () =
         List.app
            (fn (const, lemma) =>
                ConstantTable.insert Partiality.uptypeTactics const (applyRaw (ETerm.literal (Term.Const lemma))))
            [(list, list_uptype),
             (cForall, cForall_uptype),
             (cExists, cExists_uptype)]

      val () =
         List.app Registry.delete
            (parseLongidents
                /List.AfterListEnv List.AfterListAllEnv/)

      val () =
         Constant2Table.insert TypecheckInternal.subtypeTactics (list, list)
         (Backchain.applyRaw /\Term.Const list_subtype\/)

   end
