
File.import "logic-load.iml";
File.import "bool-load.iml";
File.import "partial-load.iml";

File.import "symbol-aux.iml";

openModule /Bool/;


beginModule "Symbol";


Namespace.aliasExport (parseIdent /symbol/) Prim.symbol;
Namespace.aliasExport (parseIdent /symbol_eqb/) Prim.symbol_eqb;


lemma "symbol_type"
/
  symbol : U 0
/;

typecheck.
qed ();
recordTyping "symbol_type";



lemma "symbol_eqb_type"
/
  symbol_eqb : symbol -> symbol -> bool
/;

Tactic.refine Rule.symbol_eqbType.
qed ();
recordTyping "symbol_eqb_type";



lemma "istrue_symbol_eqb"
/
  forall s t .
    istrue (symbol_eqb s t) <-> s = t : symbol
/;

inference.
intro /s t/.
split.
  {
  intro /H/.
  Tactic.refine (Rule.symbol_eqbSpec2 (Term.evar ()) (Term.evar ())).
  apply /istrue_iff_eq_true/ >> auto.
  }

  {
  intro /H/.
  apply /istrue_iff_eq_true/.
  Tactic.refine (Rule.symbol_eqbSpec1 (Term.evar ()) (Term.evar ())).
  hyp /H/.
  }
qed ();

val istrue_symbol_eqb = parseConstant /istrue_symbol_eqb/;



lemma "symbol_total"
/
  Partial.total symbol
/;

unfold /Partial.total/.
exists /()/.
intro /x/.
RuleTactic.symbolTotal.
hypof.
qed ();

val symbol_total = parseConstant /symbol_total/;



writeRegistry /AfterSymbolAllEnv/
  /[constant constant]/
  (Collapse (istrue_symbol_eqb, symbol_total));


endModule ();
