(* File generated by CM-Yacc version 2.1 *)

functor ParseMainFun
   (structure Streamable : STREAMABLE
    structure Arg :
       sig
          type symbol_pos
          type pos
          type idents
          type sub
          type subs
          type term
          type class
          type hyp
          type hyps
          type context
          type pcontext
          type rhs
          type premise
          type lpremise
          type premises
          type lpremises
          type concl
          type lconcl
          type rule
          type lrule
          type clause
          type clauses

          val cons_clauses : clause * clauses -> clauses
          val nil_clauses : unit -> clauses
          val lrule_clause : symbol_pos * lrule -> clause
          val rule_clause : symbol_pos * rule -> clause
          val make_lrule : lconcl * lpremises -> lrule
          val make_rule : concl * premises -> rule
          val noext_lconcl : hyps * term -> lconcl
          val ext_lconcl : hyps * term * term -> lconcl
          val noext_concl : term -> concl
          val ext_concl : term * term -> concl
          val cons_lpremises : lpremise * lpremises -> lpremises
          val nil_lpremises : unit -> lpremises
          val cons_premises : premise * premises -> premises
          val nil_premises : unit -> premises
          val make_lpremise : pcontext * rhs -> lpremise
          val make_premise : context * rhs -> premise
          val noext_rhs : term -> rhs
          val ext_rhs : term * symbol_pos -> rhs
          val short_pcontext : context -> pcontext
          val longsub_pcontext : context * subs -> pcontext
          val long_pcontext : context -> pcontext
          val make_ccontext : hyps -> hyps
          val ordinary_context : hyps -> context
          val promote_context : hyps -> context
          val id_hyps : hyps -> hyps
          val nil_hyps : unit -> hyps
          val cons_hyps : hyp * hyps -> hyps
          val sing_hyps : hyp -> hyps
          val make_hyp : symbol_pos * class -> hyp
          val tph_class : unit -> class
          val tpl_class : unit -> class
          val tp_class : unit -> class
          val tmh_class : term -> class
          val tml_class : term -> class
          val tm_class : term -> class
          val subtype_term : term * term -> term
          val istp_term : term -> term
          val eqtp_term : term * term -> term
          val of_term : term * term -> term
          val equal_term : term * term * term -> term
          val fn_term : idents * term -> term
          val bind_term : symbol_pos * symbol_pos * term * term -> term
          val next_term : term -> term
          val prev_term : term -> term
          val pi2_term : term -> term
          val pi1_term : term -> term
          val app_term : term * term -> term
          val ui_term : unit -> term
          val ki_term : unit -> term
          val triv_term : unit -> term
          val pair_term : term * term -> term
          val metavar_subs_term : symbol_pos * subs -> term
          val metavar_term : symbol_pos -> term
          val var_term : symbol_pos -> term
          val const_term : symbol_pos -> term
          val id_term : term -> term
          val cons_subs : sub * subs -> subs
          val sing_subs : sub -> subs
          val make_sub : term * symbol_pos -> sub
          val cons_idents : symbol_pos * idents -> idents
          val sing_idents : symbol_pos -> idents

          datatype terminal =
             UIDENT of symbol_pos
           | LIDENT of symbol_pos
           | PI1 of pos
           | PI2 of pos
           | PREV of pos
           | LPAREN of pos
           | RPAREN of pos
           | LBRACKET of pos
           | RBRACKET of pos
           | LBRACE of pos
           | RBRACE of pos
           | COLON of pos
           | COMMA of pos
           | DOLLAR of pos
           | DOT of pos
           | ELLIPSIS of pos
           | EQUAL of pos
           | IF of pos
           | SEMICOLON of pos
           | SLASH of pos
           | SUBTYPE of pos
           | TURNSTILE of pos
           | DEMOTE of pos
           | EXT of pos
           | FN of pos
           | HIDE of pos
           | LRULE of pos
           | NEXT of pos
           | PROMOTE of pos
           | RULE of pos
           | TYPE of pos
           | KI of pos
           | UI of pos
           | EOF of pos

          val error : terminal Streamable.t -> exn
       end)
   :>
   sig
      val parse : Arg.terminal Streamable.t -> Arg.clauses * Arg.terminal Streamable.t
   end
=

(*

AUTOMATON LISTING
=================

State 0:

start -> . Clauses  / 0
59 : Clause -> . RULE LIDENT Rule  / 1
60 : Clause -> . LRULE LIDENT LRule  / 1
61 : Clauses -> .  / 0
62 : Clauses -> . Clause Clauses  / 0

$ => reduce 61
LRULE => shift 3
RULE => shift 2
EOF => reduce 61
Clause => goto 1
Clauses => goto 4

-----

State 1:

59 : Clause -> . RULE LIDENT Rule  / 1
60 : Clause -> . LRULE LIDENT LRule  / 1
61 : Clauses -> .  / 0
62 : Clauses -> . Clause Clauses  / 0
62 : Clauses -> Clause . Clauses  / 0

$ => reduce 61
LRULE => shift 3
RULE => shift 2
EOF => reduce 61
Clause => goto 1
Clauses => goto 5

-----

State 2:

59 : Clause -> RULE . LIDENT Rule  / 1

LIDENT => shift 6

-----

State 3:

60 : Clause -> LRULE . LIDENT LRule  / 1

LIDENT => shift 7

-----

State 4:

start -> Clauses .  / 0

$ => accept
EOF => accept

-----

State 5:

62 : Clauses -> Clause Clauses .  / 0

$ => reduce 62
EOF => reduce 62

-----

State 6:

5 : TermAtom -> . LPAREN Term RPAREN  / 2
6 : TermAtom -> . LIDENT  / 2
7 : TermAtom -> . DOLLAR LIDENT  / 2
8 : TermAtom -> . UIDENT  / 2
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 2
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 2
11 : TermAtom -> . LPAREN RPAREN  / 2
12 : TermAtom -> . KI  / 2
13 : TermAtom -> . UI  / 2
14 : TermApp -> . TermAtom  / 2
15 : TermApp -> . TermApp TermAtom  / 2
16 : TermApp -> . TermApp PI1  / 2
17 : TermApp -> . TermApp PI2  / 2
18 : TermApp -> . TermApp PREV  / 2
19 : TermApp -> . NEXT TermAtom  / 2
20 : TermApp -> . LIDENT LBRACE LIDENT COLON TermAtom RBRACE TermAtom  / 2
21 : Term -> . TermApp  / 3
22 : Term -> . FN Idents DOT TermApp  / 3
23 : Term -> . TermApp EQUAL TermApp COLON TermApp  / 3
24 : Term -> . TermApp COLON TermApp  / 3
25 : Term -> . TermApp EQUAL TermApp COLON TYPE  / 3
26 : Term -> . TermApp COLON TYPE  / 3
27 : Term -> . TermApp SUBTYPE TermApp  / 3
53 : Concl -> . Term EXT Term  / 4
54 : Concl -> . Term  / 4
57 : Rule -> . Concl IF Premises  / 1
59 : Clause -> RULE LIDENT . Rule  / 1

UIDENT => shift 16
LIDENT => shift 15
LPAREN => shift 17
DOLLAR => shift 14
FN => shift 13
NEXT => shift 19
KI => shift 18
UI => shift 12
Term => goto 11
TermAtom => goto 20
TermApp => goto 10
Concl => goto 9
Rule => goto 8

-----

State 7:

34 : Hyp -> . LIDENT COLON Class  / 5
35 : HypsNonempty -> . Hyp  / 5
36 : HypsNonempty -> . Hyps COMMA Hyp  / 5
37 : Hyps -> .  / 5
38 : Hyps -> . HypsNonempty  / 5
41 : CContext -> . Hyps ELLIPSIS  / 6
55 : LConcl -> . CContext TURNSTILE Term EXT Term  / 4
56 : LConcl -> . CContext TURNSTILE Term  / 4
58 : LRule -> . LConcl IF LPremises  / 1
60 : Clause -> LRULE LIDENT . LRule  / 1

LIDENT => shift 27
COMMA => reduce 37
ELLIPSIS => reduce 37
Hyp => goto 26
HypsNonempty => goto 25
Hyps => goto 24
CContext => goto 23
LConcl => goto 22
LRule => goto 21

-----

State 8:

59 : Clause -> RULE LIDENT Rule .  / 1

$ => reduce 59
LRULE => reduce 59
RULE => reduce 59
EOF => reduce 59

-----

State 9:

57 : Rule -> Concl . IF Premises  / 1

IF => shift 28

-----

State 10:

5 : TermAtom -> . LPAREN Term RPAREN  / 7
6 : TermAtom -> . LIDENT  / 7
7 : TermAtom -> . DOLLAR LIDENT  / 7
8 : TermAtom -> . UIDENT  / 7
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 7
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 7
11 : TermAtom -> . LPAREN RPAREN  / 7
12 : TermAtom -> . KI  / 7
13 : TermAtom -> . UI  / 7
15 : TermApp -> TermApp . TermAtom  / 7
16 : TermApp -> TermApp . PI1  / 7
17 : TermApp -> TermApp . PI2  / 7
18 : TermApp -> TermApp . PREV  / 7
21 : Term -> TermApp .  / 8
23 : Term -> TermApp . EQUAL TermApp COLON TermApp  / 8
24 : Term -> TermApp . COLON TermApp  / 8
25 : Term -> TermApp . EQUAL TermApp COLON TYPE  / 8
26 : Term -> TermApp . COLON TYPE  / 8
27 : Term -> TermApp . SUBTYPE TermApp  / 8

UIDENT => shift 16
LIDENT => shift 35
PI1 => shift 34
PI2 => shift 33
PREV => shift 32
LPAREN => shift 17
RPAREN => reduce 21
COLON => shift 31
COMMA => reduce 21
DOLLAR => shift 14
EQUAL => shift 30
IF => reduce 21
SEMICOLON => reduce 21
SLASH => reduce 21
SUBTYPE => shift 29
EXT => reduce 21
KI => shift 18
UI => shift 12
TermAtom => goto 36

-----

State 11:

53 : Concl -> Term . EXT Term  / 4
54 : Concl -> Term .  / 4

IF => reduce 54
EXT => shift 37

-----

State 12:

13 : TermAtom -> UI .  / 9

UIDENT => reduce 13
LIDENT => reduce 13
PI1 => reduce 13
PI2 => reduce 13
PREV => reduce 13
LPAREN => reduce 13
RPAREN => reduce 13
RBRACE => reduce 13
COLON => reduce 13
COMMA => reduce 13
DOLLAR => reduce 13
ELLIPSIS => reduce 13
EQUAL => reduce 13
IF => reduce 13
SEMICOLON => reduce 13
SLASH => reduce 13
SUBTYPE => reduce 13
TURNSTILE => reduce 13
EXT => reduce 13
KI => reduce 13
UI => reduce 13

-----

State 13:

0 : Idents -> . LIDENT  / 10
1 : Idents -> . LIDENT Idents  / 10
22 : Term -> FN . Idents DOT TermApp  / 8

LIDENT => shift 39
Idents => goto 38

-----

State 14:

7 : TermAtom -> DOLLAR . LIDENT  / 9

LIDENT => shift 40

-----

State 15:

6 : TermAtom -> LIDENT .  / 7
20 : TermApp -> LIDENT . LBRACE LIDENT COLON TermAtom RBRACE TermAtom  / 7

UIDENT => reduce 6
LIDENT => reduce 6
PI1 => reduce 6
PI2 => reduce 6
PREV => reduce 6
LPAREN => reduce 6
RPAREN => reduce 6
LBRACE => shift 41
COLON => reduce 6
COMMA => reduce 6
DOLLAR => reduce 6
EQUAL => reduce 6
IF => reduce 6
SEMICOLON => reduce 6
SLASH => reduce 6
SUBTYPE => reduce 6
EXT => reduce 6
KI => reduce 6
UI => reduce 6

-----

State 16:

8 : TermAtom -> UIDENT .  / 9
9 : TermAtom -> UIDENT . LBRACKET Subs RBRACKET  / 9

UIDENT => reduce 8
LIDENT => reduce 8
PI1 => reduce 8
PI2 => reduce 8
PREV => reduce 8
LPAREN => reduce 8
RPAREN => reduce 8
LBRACKET => shift 42
RBRACE => reduce 8
COLON => reduce 8
COMMA => reduce 8
DOLLAR => reduce 8
ELLIPSIS => reduce 8
EQUAL => reduce 8
IF => reduce 8
SEMICOLON => reduce 8
SLASH => reduce 8
SUBTYPE => reduce 8
TURNSTILE => reduce 8
EXT => reduce 8
KI => reduce 8
UI => reduce 8

-----

State 17:

5 : TermAtom -> . LPAREN Term RPAREN  / 11
5 : TermAtom -> LPAREN . Term RPAREN  / 9
6 : TermAtom -> . LIDENT  / 11
7 : TermAtom -> . DOLLAR LIDENT  / 11
8 : TermAtom -> . UIDENT  / 11
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 11
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 11
10 : TermAtom -> LPAREN . Term COMMA Term RPAREN  / 9
11 : TermAtom -> . LPAREN RPAREN  / 11
11 : TermAtom -> LPAREN . RPAREN  / 9
12 : TermAtom -> . KI  / 11
13 : TermAtom -> . UI  / 11
14 : TermApp -> . TermAtom  / 11
15 : TermApp -> . TermApp TermAtom  / 11
16 : TermApp -> . TermApp PI1  / 11
17 : TermApp -> . TermApp PI2  / 11
18 : TermApp -> . TermApp PREV  / 11
19 : TermApp -> . NEXT TermAtom  / 11
20 : TermApp -> . LIDENT LBRACE LIDENT COLON TermAtom RBRACE TermAtom  / 11
21 : Term -> . TermApp  / 12
22 : Term -> . FN Idents DOT TermApp  / 12
23 : Term -> . TermApp EQUAL TermApp COLON TermApp  / 12
24 : Term -> . TermApp COLON TermApp  / 12
25 : Term -> . TermApp EQUAL TermApp COLON TYPE  / 12
26 : Term -> . TermApp COLON TYPE  / 12
27 : Term -> . TermApp SUBTYPE TermApp  / 12

UIDENT => shift 16
LIDENT => shift 15
LPAREN => shift 17
RPAREN => shift 43
DOLLAR => shift 14
FN => shift 13
NEXT => shift 19
KI => shift 18
UI => shift 12
Term => goto 44
TermAtom => goto 20
TermApp => goto 10

-----

State 18:

12 : TermAtom -> KI .  / 9

UIDENT => reduce 12
LIDENT => reduce 12
PI1 => reduce 12
PI2 => reduce 12
PREV => reduce 12
LPAREN => reduce 12
RPAREN => reduce 12
RBRACE => reduce 12
COLON => reduce 12
COMMA => reduce 12
DOLLAR => reduce 12
ELLIPSIS => reduce 12
EQUAL => reduce 12
IF => reduce 12
SEMICOLON => reduce 12
SLASH => reduce 12
SUBTYPE => reduce 12
TURNSTILE => reduce 12
EXT => reduce 12
KI => reduce 12
UI => reduce 12

-----

State 19:

5 : TermAtom -> . LPAREN Term RPAREN  / 7
6 : TermAtom -> . LIDENT  / 7
7 : TermAtom -> . DOLLAR LIDENT  / 7
8 : TermAtom -> . UIDENT  / 7
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 7
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 7
11 : TermAtom -> . LPAREN RPAREN  / 7
12 : TermAtom -> . KI  / 7
13 : TermAtom -> . UI  / 7
19 : TermApp -> NEXT . TermAtom  / 7

UIDENT => shift 16
LIDENT => shift 35
LPAREN => shift 17
DOLLAR => shift 14
KI => shift 18
UI => shift 12
TermAtom => goto 45

-----

State 20:

14 : TermApp -> TermAtom .  / 7

UIDENT => reduce 14
LIDENT => reduce 14
PI1 => reduce 14
PI2 => reduce 14
PREV => reduce 14
LPAREN => reduce 14
RPAREN => reduce 14
COLON => reduce 14
COMMA => reduce 14
DOLLAR => reduce 14
EQUAL => reduce 14
IF => reduce 14
SEMICOLON => reduce 14
SLASH => reduce 14
SUBTYPE => reduce 14
EXT => reduce 14
KI => reduce 14
UI => reduce 14

-----

State 21:

60 : Clause -> LRULE LIDENT LRule .  / 1

$ => reduce 60
LRULE => reduce 60
RULE => reduce 60
EOF => reduce 60

-----

State 22:

58 : LRule -> LConcl . IF LPremises  / 1

IF => shift 46

-----

State 23:

55 : LConcl -> CContext . TURNSTILE Term EXT Term  / 4
56 : LConcl -> CContext . TURNSTILE Term  / 4

TURNSTILE => shift 47

-----

State 24:

36 : HypsNonempty -> Hyps . COMMA Hyp  / 5
41 : CContext -> Hyps . ELLIPSIS  / 6

COMMA => shift 49
ELLIPSIS => shift 48

-----

State 25:

38 : Hyps -> HypsNonempty .  / 13

COMMA => reduce 38
ELLIPSIS => reduce 38
TURNSTILE => reduce 38

-----

State 26:

35 : HypsNonempty -> Hyp .  / 13

COMMA => reduce 35
ELLIPSIS => reduce 35
TURNSTILE => reduce 35

-----

State 27:

34 : Hyp -> LIDENT . COLON Class  / 13

COLON => shift 50

-----

State 28:

34 : Hyp -> . LIDENT COLON Class  / 14
35 : HypsNonempty -> . Hyp  / 14
36 : HypsNonempty -> . Hyps COMMA Hyp  / 14
37 : Hyps -> .  / 14
38 : Hyps -> . HypsNonempty  / 14
39 : Context -> . PROMOTE Hyps  / 6
40 : Context -> . Hyps  / 6
47 : Premise -> . Context TURNSTILE Rhs  / 15
49 : Premises -> .  / 1
50 : Premises -> . Premise SEMICOLON Premises  / 1
57 : Rule -> Concl IF . Premises  / 1

$ => reduce 49
LIDENT => shift 27
COMMA => reduce 37
TURNSTILE => reduce 37
LRULE => reduce 49
PROMOTE => shift 55
RULE => reduce 49
EOF => reduce 49
Hyp => goto 26
HypsNonempty => goto 25
Hyps => goto 54
Context => goto 53
Premise => goto 52
Premises => goto 51

-----

State 29:

5 : TermAtom -> . LPAREN Term RPAREN  / 16
6 : TermAtom -> . LIDENT  / 16
7 : TermAtom -> . DOLLAR LIDENT  / 16
8 : TermAtom -> . UIDENT  / 16
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 16
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 16
11 : TermAtom -> . LPAREN RPAREN  / 16
12 : TermAtom -> . KI  / 16
13 : TermAtom -> . UI  / 16
14 : TermApp -> . TermAtom  / 16
15 : TermApp -> . TermApp TermAtom  / 16
16 : TermApp -> . TermApp PI1  / 16
17 : TermApp -> . TermApp PI2  / 16
18 : TermApp -> . TermApp PREV  / 16
19 : TermApp -> . NEXT TermAtom  / 16
20 : TermApp -> . LIDENT LBRACE LIDENT COLON TermAtom RBRACE TermAtom  / 16
27 : Term -> TermApp SUBTYPE . TermApp  / 8

UIDENT => shift 16
LIDENT => shift 15
LPAREN => shift 17
DOLLAR => shift 14
NEXT => shift 19
KI => shift 18
UI => shift 12
TermAtom => goto 20
TermApp => goto 56

-----

State 30:

5 : TermAtom -> . LPAREN Term RPAREN  / 17
6 : TermAtom -> . LIDENT  / 17
7 : TermAtom -> . DOLLAR LIDENT  / 17
8 : TermAtom -> . UIDENT  / 17
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 17
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 17
11 : TermAtom -> . LPAREN RPAREN  / 17
12 : TermAtom -> . KI  / 17
13 : TermAtom -> . UI  / 17
14 : TermApp -> . TermAtom  / 17
15 : TermApp -> . TermApp TermAtom  / 17
16 : TermApp -> . TermApp PI1  / 17
17 : TermApp -> . TermApp PI2  / 17
18 : TermApp -> . TermApp PREV  / 17
19 : TermApp -> . NEXT TermAtom  / 17
20 : TermApp -> . LIDENT LBRACE LIDENT COLON TermAtom RBRACE TermAtom  / 17
23 : Term -> TermApp EQUAL . TermApp COLON TermApp  / 8
25 : Term -> TermApp EQUAL . TermApp COLON TYPE  / 8

UIDENT => shift 16
LIDENT => shift 15
LPAREN => shift 17
DOLLAR => shift 14
NEXT => shift 19
KI => shift 18
UI => shift 12
TermAtom => goto 20
TermApp => goto 57

-----

State 31:

5 : TermAtom -> . LPAREN Term RPAREN  / 16
6 : TermAtom -> . LIDENT  / 16
7 : TermAtom -> . DOLLAR LIDENT  / 16
8 : TermAtom -> . UIDENT  / 16
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 16
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 16
11 : TermAtom -> . LPAREN RPAREN  / 16
12 : TermAtom -> . KI  / 16
13 : TermAtom -> . UI  / 16
14 : TermApp -> . TermAtom  / 16
15 : TermApp -> . TermApp TermAtom  / 16
16 : TermApp -> . TermApp PI1  / 16
17 : TermApp -> . TermApp PI2  / 16
18 : TermApp -> . TermApp PREV  / 16
19 : TermApp -> . NEXT TermAtom  / 16
20 : TermApp -> . LIDENT LBRACE LIDENT COLON TermAtom RBRACE TermAtom  / 16
24 : Term -> TermApp COLON . TermApp  / 8
26 : Term -> TermApp COLON . TYPE  / 8

UIDENT => shift 16
LIDENT => shift 15
LPAREN => shift 17
DOLLAR => shift 14
NEXT => shift 19
TYPE => shift 58
KI => shift 18
UI => shift 12
TermAtom => goto 20
TermApp => goto 59

-----

State 32:

18 : TermApp -> TermApp PREV .  / 7

UIDENT => reduce 18
LIDENT => reduce 18
PI1 => reduce 18
PI2 => reduce 18
PREV => reduce 18
LPAREN => reduce 18
RPAREN => reduce 18
COLON => reduce 18
COMMA => reduce 18
DOLLAR => reduce 18
EQUAL => reduce 18
IF => reduce 18
SEMICOLON => reduce 18
SLASH => reduce 18
SUBTYPE => reduce 18
EXT => reduce 18
KI => reduce 18
UI => reduce 18

-----

State 33:

17 : TermApp -> TermApp PI2 .  / 7

UIDENT => reduce 17
LIDENT => reduce 17
PI1 => reduce 17
PI2 => reduce 17
PREV => reduce 17
LPAREN => reduce 17
RPAREN => reduce 17
COLON => reduce 17
COMMA => reduce 17
DOLLAR => reduce 17
EQUAL => reduce 17
IF => reduce 17
SEMICOLON => reduce 17
SLASH => reduce 17
SUBTYPE => reduce 17
EXT => reduce 17
KI => reduce 17
UI => reduce 17

-----

State 34:

16 : TermApp -> TermApp PI1 .  / 7

UIDENT => reduce 16
LIDENT => reduce 16
PI1 => reduce 16
PI2 => reduce 16
PREV => reduce 16
LPAREN => reduce 16
RPAREN => reduce 16
COLON => reduce 16
COMMA => reduce 16
DOLLAR => reduce 16
EQUAL => reduce 16
IF => reduce 16
SEMICOLON => reduce 16
SLASH => reduce 16
SUBTYPE => reduce 16
EXT => reduce 16
KI => reduce 16
UI => reduce 16

-----

State 35:

6 : TermAtom -> LIDENT .  / 9

UIDENT => reduce 6
LIDENT => reduce 6
PI1 => reduce 6
PI2 => reduce 6
PREV => reduce 6
LPAREN => reduce 6
RPAREN => reduce 6
RBRACE => reduce 6
COLON => reduce 6
COMMA => reduce 6
DOLLAR => reduce 6
ELLIPSIS => reduce 6
EQUAL => reduce 6
IF => reduce 6
SEMICOLON => reduce 6
SLASH => reduce 6
SUBTYPE => reduce 6
TURNSTILE => reduce 6
EXT => reduce 6
KI => reduce 6
UI => reduce 6

-----

State 36:

15 : TermApp -> TermApp TermAtom .  / 7

UIDENT => reduce 15
LIDENT => reduce 15
PI1 => reduce 15
PI2 => reduce 15
PREV => reduce 15
LPAREN => reduce 15
RPAREN => reduce 15
COLON => reduce 15
COMMA => reduce 15
DOLLAR => reduce 15
EQUAL => reduce 15
IF => reduce 15
SEMICOLON => reduce 15
SLASH => reduce 15
SUBTYPE => reduce 15
EXT => reduce 15
KI => reduce 15
UI => reduce 15

-----

State 37:

5 : TermAtom -> . LPAREN Term RPAREN  / 18
6 : TermAtom -> . LIDENT  / 18
7 : TermAtom -> . DOLLAR LIDENT  / 18
8 : TermAtom -> . UIDENT  / 18
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 18
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 18
11 : TermAtom -> . LPAREN RPAREN  / 18
12 : TermAtom -> . KI  / 18
13 : TermAtom -> . UI  / 18
14 : TermApp -> . TermAtom  / 18
15 : TermApp -> . TermApp TermAtom  / 18
16 : TermApp -> . TermApp PI1  / 18
17 : TermApp -> . TermApp PI2  / 18
18 : TermApp -> . TermApp PREV  / 18
19 : TermApp -> . NEXT TermAtom  / 18
20 : TermApp -> . LIDENT LBRACE LIDENT COLON TermAtom RBRACE TermAtom  / 18
21 : Term -> . TermApp  / 4
22 : Term -> . FN Idents DOT TermApp  / 4
23 : Term -> . TermApp EQUAL TermApp COLON TermApp  / 4
24 : Term -> . TermApp COLON TermApp  / 4
25 : Term -> . TermApp EQUAL TermApp COLON TYPE  / 4
26 : Term -> . TermApp COLON TYPE  / 4
27 : Term -> . TermApp SUBTYPE TermApp  / 4
53 : Concl -> Term EXT . Term  / 4

UIDENT => shift 16
LIDENT => shift 15
LPAREN => shift 17
DOLLAR => shift 14
FN => shift 13
NEXT => shift 19
KI => shift 18
UI => shift 12
Term => goto 60
TermAtom => goto 20
TermApp => goto 10

-----

State 38:

22 : Term -> FN Idents . DOT TermApp  / 8

DOT => shift 61

-----

State 39:

0 : Idents -> . LIDENT  / 10
0 : Idents -> LIDENT .  / 10
1 : Idents -> . LIDENT Idents  / 10
1 : Idents -> LIDENT . Idents  / 10

LIDENT => shift 39
DOT => reduce 0
Idents => goto 62

-----

State 40:

7 : TermAtom -> DOLLAR LIDENT .  / 9

UIDENT => reduce 7
LIDENT => reduce 7
PI1 => reduce 7
PI2 => reduce 7
PREV => reduce 7
LPAREN => reduce 7
RPAREN => reduce 7
RBRACE => reduce 7
COLON => reduce 7
COMMA => reduce 7
DOLLAR => reduce 7
ELLIPSIS => reduce 7
EQUAL => reduce 7
IF => reduce 7
SEMICOLON => reduce 7
SLASH => reduce 7
SUBTYPE => reduce 7
TURNSTILE => reduce 7
EXT => reduce 7
KI => reduce 7
UI => reduce 7

-----

State 41:

20 : TermApp -> LIDENT LBRACE . LIDENT COLON TermAtom RBRACE TermAtom  / 7

LIDENT => shift 63

-----

State 42:

2 : Sub -> . Term SLASH LIDENT  / 19
3 : Subs -> . Sub  / 20
4 : Subs -> . Sub COMMA Subs  / 20
5 : TermAtom -> . LPAREN Term RPAREN  / 21
6 : TermAtom -> . LIDENT  / 21
7 : TermAtom -> . DOLLAR LIDENT  / 21
8 : TermAtom -> . UIDENT  / 21
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 21
9 : TermAtom -> UIDENT LBRACKET . Subs RBRACKET  / 9
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 21
11 : TermAtom -> . LPAREN RPAREN  / 21
12 : TermAtom -> . KI  / 21
13 : TermAtom -> . UI  / 21
14 : TermApp -> . TermAtom  / 21
15 : TermApp -> . TermApp TermAtom  / 21
16 : TermApp -> . TermApp PI1  / 21
17 : TermApp -> . TermApp PI2  / 21
18 : TermApp -> . TermApp PREV  / 21
19 : TermApp -> . NEXT TermAtom  / 21
20 : TermApp -> . LIDENT LBRACE LIDENT COLON TermAtom RBRACE TermAtom  / 21
21 : Term -> . TermApp  / 22
22 : Term -> . FN Idents DOT TermApp  / 22
23 : Term -> . TermApp EQUAL TermApp COLON TermApp  / 22
24 : Term -> . TermApp COLON TermApp  / 22
25 : Term -> . TermApp EQUAL TermApp COLON TYPE  / 22
26 : Term -> . TermApp COLON TYPE  / 22
27 : Term -> . TermApp SUBTYPE TermApp  / 22

UIDENT => shift 16
LIDENT => shift 15
LPAREN => shift 17
DOLLAR => shift 14
FN => shift 13
NEXT => shift 19
KI => shift 18
UI => shift 12
Sub => goto 64
Term => goto 66
Subs => goto 65
TermAtom => goto 20
TermApp => goto 10

-----

State 43:

11 : TermAtom -> LPAREN RPAREN .  / 9

UIDENT => reduce 11
LIDENT => reduce 11
PI1 => reduce 11
PI2 => reduce 11
PREV => reduce 11
LPAREN => reduce 11
RPAREN => reduce 11
RBRACE => reduce 11
COLON => reduce 11
COMMA => reduce 11
DOLLAR => reduce 11
ELLIPSIS => reduce 11
EQUAL => reduce 11
IF => reduce 11
SEMICOLON => reduce 11
SLASH => reduce 11
SUBTYPE => reduce 11
TURNSTILE => reduce 11
EXT => reduce 11
KI => reduce 11
UI => reduce 11

-----

State 44:

5 : TermAtom -> LPAREN Term . RPAREN  / 9
10 : TermAtom -> LPAREN Term . COMMA Term RPAREN  / 9

RPAREN => shift 68
COMMA => shift 67

-----

State 45:

19 : TermApp -> NEXT TermAtom .  / 7

UIDENT => reduce 19
LIDENT => reduce 19
PI1 => reduce 19
PI2 => reduce 19
PREV => reduce 19
LPAREN => reduce 19
RPAREN => reduce 19
COLON => reduce 19
COMMA => reduce 19
DOLLAR => reduce 19
EQUAL => reduce 19
IF => reduce 19
SEMICOLON => reduce 19
SLASH => reduce 19
SUBTYPE => reduce 19
EXT => reduce 19
KI => reduce 19
UI => reduce 19

-----

State 46:

34 : Hyp -> . LIDENT COLON Class  / 13
35 : HypsNonempty -> . Hyp  / 13
36 : HypsNonempty -> . Hyps COMMA Hyp  / 13
37 : Hyps -> .  / 13
38 : Hyps -> . HypsNonempty  / 13
39 : Context -> . PROMOTE Hyps  / 23
40 : Context -> . Hyps  / 23
42 : PContext -> . Context ELLIPSIS  / 6
43 : PContext -> . Context ELLIPSIS LBRACKET Subs RBRACKET  / 6
44 : PContext -> . Context  / 6
48 : LPremise -> . PContext TURNSTILE Rhs  / 15
51 : LPremises -> .  / 1
52 : LPremises -> . LPremise SEMICOLON LPremises  / 1
58 : LRule -> LConcl IF . LPremises  / 1

$ => reduce 51
LIDENT => shift 27
COMMA => reduce 37
ELLIPSIS => reduce 37
TURNSTILE => reduce 37
LRULE => reduce 51
PROMOTE => shift 55
RULE => reduce 51
EOF => reduce 51
Hyp => goto 26
HypsNonempty => goto 25
Hyps => goto 54
Context => goto 72
PContext => goto 71
LPremise => goto 70
LPremises => goto 69

-----

State 47:

5 : TermAtom -> . LPAREN Term RPAREN  / 2
6 : TermAtom -> . LIDENT  / 2
7 : TermAtom -> . DOLLAR LIDENT  / 2
8 : TermAtom -> . UIDENT  / 2
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 2
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 2
11 : TermAtom -> . LPAREN RPAREN  / 2
12 : TermAtom -> . KI  / 2
13 : TermAtom -> . UI  / 2
14 : TermApp -> . TermAtom  / 2
15 : TermApp -> . TermApp TermAtom  / 2
16 : TermApp -> . TermApp PI1  / 2
17 : TermApp -> . TermApp PI2  / 2
18 : TermApp -> . TermApp PREV  / 2
19 : TermApp -> . NEXT TermAtom  / 2
20 : TermApp -> . LIDENT LBRACE LIDENT COLON TermAtom RBRACE TermAtom  / 2
21 : Term -> . TermApp  / 3
22 : Term -> . FN Idents DOT TermApp  / 3
23 : Term -> . TermApp EQUAL TermApp COLON TermApp  / 3
24 : Term -> . TermApp COLON TermApp  / 3
25 : Term -> . TermApp EQUAL TermApp COLON TYPE  / 3
26 : Term -> . TermApp COLON TYPE  / 3
27 : Term -> . TermApp SUBTYPE TermApp  / 3
55 : LConcl -> CContext TURNSTILE . Term EXT Term  / 4
56 : LConcl -> CContext TURNSTILE . Term  / 4

UIDENT => shift 16
LIDENT => shift 15
LPAREN => shift 17
DOLLAR => shift 14
FN => shift 13
NEXT => shift 19
KI => shift 18
UI => shift 12
Term => goto 73
TermAtom => goto 20
TermApp => goto 10

-----

State 48:

41 : CContext -> Hyps ELLIPSIS .  / 6

TURNSTILE => reduce 41

-----

State 49:

34 : Hyp -> . LIDENT COLON Class  / 13
36 : HypsNonempty -> Hyps COMMA . Hyp  / 13

LIDENT => shift 27
Hyp => goto 74

-----

State 50:

5 : TermAtom -> . LPAREN Term RPAREN  / 13
6 : TermAtom -> . LIDENT  / 13
7 : TermAtom -> . DOLLAR LIDENT  / 13
8 : TermAtom -> . UIDENT  / 13
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 13
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 13
11 : TermAtom -> . LPAREN RPAREN  / 13
12 : TermAtom -> . KI  / 13
13 : TermAtom -> . UI  / 13
28 : Class -> . TermAtom  / 13
29 : Class -> . DEMOTE TermAtom  / 13
30 : Class -> . HIDE TermAtom  / 13
31 : Class -> . TYPE  / 13
32 : Class -> . DEMOTE TYPE  / 13
33 : Class -> . HIDE TYPE  / 13
34 : Hyp -> LIDENT COLON . Class  / 13

UIDENT => shift 16
LIDENT => shift 35
LPAREN => shift 17
DOLLAR => shift 14
DEMOTE => shift 78
HIDE => shift 77
TYPE => shift 79
KI => shift 18
UI => shift 12
TermAtom => goto 76
Class => goto 75

-----

State 51:

57 : Rule -> Concl IF Premises .  / 1

$ => reduce 57
LRULE => reduce 57
RULE => reduce 57
EOF => reduce 57

-----

State 52:

50 : Premises -> Premise . SEMICOLON Premises  / 1

SEMICOLON => shift 80

-----

State 53:

47 : Premise -> Context . TURNSTILE Rhs  / 15

TURNSTILE => shift 81

-----

State 54:

36 : HypsNonempty -> Hyps . COMMA Hyp  / 13
40 : Context -> Hyps .  / 23

COMMA => shift 49
ELLIPSIS => reduce 40
TURNSTILE => reduce 40

-----

State 55:

34 : Hyp -> . LIDENT COLON Class  / 13
35 : HypsNonempty -> . Hyp  / 13
36 : HypsNonempty -> . Hyps COMMA Hyp  / 13
37 : Hyps -> .  / 13
38 : Hyps -> . HypsNonempty  / 13
39 : Context -> PROMOTE . Hyps  / 23

LIDENT => shift 27
COMMA => reduce 37
ELLIPSIS => reduce 37
TURNSTILE => reduce 37
Hyp => goto 26
HypsNonempty => goto 25
Hyps => goto 82

-----

State 56:

5 : TermAtom -> . LPAREN Term RPAREN  / 16
6 : TermAtom -> . LIDENT  / 16
7 : TermAtom -> . DOLLAR LIDENT  / 16
8 : TermAtom -> . UIDENT  / 16
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 16
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 16
11 : TermAtom -> . LPAREN RPAREN  / 16
12 : TermAtom -> . KI  / 16
13 : TermAtom -> . UI  / 16
15 : TermApp -> TermApp . TermAtom  / 16
16 : TermApp -> TermApp . PI1  / 16
17 : TermApp -> TermApp . PI2  / 16
18 : TermApp -> TermApp . PREV  / 16
27 : Term -> TermApp SUBTYPE TermApp .  / 8

UIDENT => shift 16
LIDENT => shift 35
PI1 => shift 34
PI2 => shift 33
PREV => shift 32
LPAREN => shift 17
RPAREN => reduce 27
COMMA => reduce 27
DOLLAR => shift 14
IF => reduce 27
SEMICOLON => reduce 27
SLASH => reduce 27
EXT => reduce 27
KI => shift 18
UI => shift 12
TermAtom => goto 36

-----

State 57:

5 : TermAtom -> . LPAREN Term RPAREN  / 17
6 : TermAtom -> . LIDENT  / 17
7 : TermAtom -> . DOLLAR LIDENT  / 17
8 : TermAtom -> . UIDENT  / 17
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 17
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 17
11 : TermAtom -> . LPAREN RPAREN  / 17
12 : TermAtom -> . KI  / 17
13 : TermAtom -> . UI  / 17
15 : TermApp -> TermApp . TermAtom  / 17
16 : TermApp -> TermApp . PI1  / 17
17 : TermApp -> TermApp . PI2  / 17
18 : TermApp -> TermApp . PREV  / 17
23 : Term -> TermApp EQUAL TermApp . COLON TermApp  / 8
25 : Term -> TermApp EQUAL TermApp . COLON TYPE  / 8

UIDENT => shift 16
LIDENT => shift 35
PI1 => shift 34
PI2 => shift 33
PREV => shift 32
LPAREN => shift 17
COLON => shift 83
DOLLAR => shift 14
KI => shift 18
UI => shift 12
TermAtom => goto 36

-----

State 58:

26 : Term -> TermApp COLON TYPE .  / 8

RPAREN => reduce 26
COMMA => reduce 26
IF => reduce 26
SEMICOLON => reduce 26
SLASH => reduce 26
EXT => reduce 26

-----

State 59:

5 : TermAtom -> . LPAREN Term RPAREN  / 16
6 : TermAtom -> . LIDENT  / 16
7 : TermAtom -> . DOLLAR LIDENT  / 16
8 : TermAtom -> . UIDENT  / 16
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 16
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 16
11 : TermAtom -> . LPAREN RPAREN  / 16
12 : TermAtom -> . KI  / 16
13 : TermAtom -> . UI  / 16
15 : TermApp -> TermApp . TermAtom  / 16
16 : TermApp -> TermApp . PI1  / 16
17 : TermApp -> TermApp . PI2  / 16
18 : TermApp -> TermApp . PREV  / 16
24 : Term -> TermApp COLON TermApp .  / 8

UIDENT => shift 16
LIDENT => shift 35
PI1 => shift 34
PI2 => shift 33
PREV => shift 32
LPAREN => shift 17
RPAREN => reduce 24
COMMA => reduce 24
DOLLAR => shift 14
IF => reduce 24
SEMICOLON => reduce 24
SLASH => reduce 24
EXT => reduce 24
KI => shift 18
UI => shift 12
TermAtom => goto 36

-----

State 60:

53 : Concl -> Term EXT Term .  / 4

IF => reduce 53

-----

State 61:

5 : TermAtom -> . LPAREN Term RPAREN  / 16
6 : TermAtom -> . LIDENT  / 16
7 : TermAtom -> . DOLLAR LIDENT  / 16
8 : TermAtom -> . UIDENT  / 16
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 16
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 16
11 : TermAtom -> . LPAREN RPAREN  / 16
12 : TermAtom -> . KI  / 16
13 : TermAtom -> . UI  / 16
14 : TermApp -> . TermAtom  / 16
15 : TermApp -> . TermApp TermAtom  / 16
16 : TermApp -> . TermApp PI1  / 16
17 : TermApp -> . TermApp PI2  / 16
18 : TermApp -> . TermApp PREV  / 16
19 : TermApp -> . NEXT TermAtom  / 16
20 : TermApp -> . LIDENT LBRACE LIDENT COLON TermAtom RBRACE TermAtom  / 16
22 : Term -> FN Idents DOT . TermApp  / 8

UIDENT => shift 16
LIDENT => shift 15
LPAREN => shift 17
DOLLAR => shift 14
NEXT => shift 19
KI => shift 18
UI => shift 12
TermAtom => goto 20
TermApp => goto 84

-----

State 62:

1 : Idents -> LIDENT Idents .  / 10

DOT => reduce 1

-----

State 63:

20 : TermApp -> LIDENT LBRACE LIDENT . COLON TermAtom RBRACE TermAtom  / 7

COLON => shift 85

-----

State 64:

3 : Subs -> Sub .  / 20
4 : Subs -> Sub . COMMA Subs  / 20

RBRACKET => reduce 3
COMMA => shift 86

-----

State 65:

9 : TermAtom -> UIDENT LBRACKET Subs . RBRACKET  / 9

RBRACKET => shift 87

-----

State 66:

2 : Sub -> Term . SLASH LIDENT  / 19

SLASH => shift 88

-----

State 67:

5 : TermAtom -> . LPAREN Term RPAREN  / 24
6 : TermAtom -> . LIDENT  / 24
7 : TermAtom -> . DOLLAR LIDENT  / 24
8 : TermAtom -> . UIDENT  / 24
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 24
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 24
10 : TermAtom -> LPAREN Term COMMA . Term RPAREN  / 9
11 : TermAtom -> . LPAREN RPAREN  / 24
12 : TermAtom -> . KI  / 24
13 : TermAtom -> . UI  / 24
14 : TermApp -> . TermAtom  / 24
15 : TermApp -> . TermApp TermAtom  / 24
16 : TermApp -> . TermApp PI1  / 24
17 : TermApp -> . TermApp PI2  / 24
18 : TermApp -> . TermApp PREV  / 24
19 : TermApp -> . NEXT TermAtom  / 24
20 : TermApp -> . LIDENT LBRACE LIDENT COLON TermAtom RBRACE TermAtom  / 24
21 : Term -> . TermApp  / 25
22 : Term -> . FN Idents DOT TermApp  / 25
23 : Term -> . TermApp EQUAL TermApp COLON TermApp  / 25
24 : Term -> . TermApp COLON TermApp  / 25
25 : Term -> . TermApp EQUAL TermApp COLON TYPE  / 25
26 : Term -> . TermApp COLON TYPE  / 25
27 : Term -> . TermApp SUBTYPE TermApp  / 25

UIDENT => shift 16
LIDENT => shift 15
LPAREN => shift 17
DOLLAR => shift 14
FN => shift 13
NEXT => shift 19
KI => shift 18
UI => shift 12
Term => goto 89
TermAtom => goto 20
TermApp => goto 10

-----

State 68:

5 : TermAtom -> LPAREN Term RPAREN .  / 9

UIDENT => reduce 5
LIDENT => reduce 5
PI1 => reduce 5
PI2 => reduce 5
PREV => reduce 5
LPAREN => reduce 5
RPAREN => reduce 5
RBRACE => reduce 5
COLON => reduce 5
COMMA => reduce 5
DOLLAR => reduce 5
ELLIPSIS => reduce 5
EQUAL => reduce 5
IF => reduce 5
SEMICOLON => reduce 5
SLASH => reduce 5
SUBTYPE => reduce 5
TURNSTILE => reduce 5
EXT => reduce 5
KI => reduce 5
UI => reduce 5

-----

State 69:

58 : LRule -> LConcl IF LPremises .  / 1

$ => reduce 58
LRULE => reduce 58
RULE => reduce 58
EOF => reduce 58

-----

State 70:

52 : LPremises -> LPremise . SEMICOLON LPremises  / 1

SEMICOLON => shift 90

-----

State 71:

48 : LPremise -> PContext . TURNSTILE Rhs  / 15

TURNSTILE => shift 91

-----

State 72:

42 : PContext -> Context . ELLIPSIS  / 6
43 : PContext -> Context . ELLIPSIS LBRACKET Subs RBRACKET  / 6
44 : PContext -> Context .  / 6

ELLIPSIS => shift 92
TURNSTILE => reduce 44

-----

State 73:

55 : LConcl -> CContext TURNSTILE Term . EXT Term  / 4
56 : LConcl -> CContext TURNSTILE Term .  / 4

IF => reduce 56
EXT => shift 93

-----

State 74:

36 : HypsNonempty -> Hyps COMMA Hyp .  / 13

COMMA => reduce 36
ELLIPSIS => reduce 36
TURNSTILE => reduce 36

-----

State 75:

34 : Hyp -> LIDENT COLON Class .  / 13

COMMA => reduce 34
ELLIPSIS => reduce 34
TURNSTILE => reduce 34

-----

State 76:

28 : Class -> TermAtom .  / 13

COMMA => reduce 28
ELLIPSIS => reduce 28
TURNSTILE => reduce 28

-----

State 77:

5 : TermAtom -> . LPAREN Term RPAREN  / 13
6 : TermAtom -> . LIDENT  / 13
7 : TermAtom -> . DOLLAR LIDENT  / 13
8 : TermAtom -> . UIDENT  / 13
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 13
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 13
11 : TermAtom -> . LPAREN RPAREN  / 13
12 : TermAtom -> . KI  / 13
13 : TermAtom -> . UI  / 13
30 : Class -> HIDE . TermAtom  / 13
33 : Class -> HIDE . TYPE  / 13

UIDENT => shift 16
LIDENT => shift 35
LPAREN => shift 17
DOLLAR => shift 14
TYPE => shift 94
KI => shift 18
UI => shift 12
TermAtom => goto 95

-----

State 78:

5 : TermAtom -> . LPAREN Term RPAREN  / 13
6 : TermAtom -> . LIDENT  / 13
7 : TermAtom -> . DOLLAR LIDENT  / 13
8 : TermAtom -> . UIDENT  / 13
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 13
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 13
11 : TermAtom -> . LPAREN RPAREN  / 13
12 : TermAtom -> . KI  / 13
13 : TermAtom -> . UI  / 13
29 : Class -> DEMOTE . TermAtom  / 13
32 : Class -> DEMOTE . TYPE  / 13

UIDENT => shift 16
LIDENT => shift 35
LPAREN => shift 17
DOLLAR => shift 14
TYPE => shift 96
KI => shift 18
UI => shift 12
TermAtom => goto 97

-----

State 79:

31 : Class -> TYPE .  / 13

COMMA => reduce 31
ELLIPSIS => reduce 31
TURNSTILE => reduce 31

-----

State 80:

34 : Hyp -> . LIDENT COLON Class  / 14
35 : HypsNonempty -> . Hyp  / 14
36 : HypsNonempty -> . Hyps COMMA Hyp  / 14
37 : Hyps -> .  / 14
38 : Hyps -> . HypsNonempty  / 14
39 : Context -> . PROMOTE Hyps  / 6
40 : Context -> . Hyps  / 6
47 : Premise -> . Context TURNSTILE Rhs  / 15
49 : Premises -> .  / 1
50 : Premises -> . Premise SEMICOLON Premises  / 1
50 : Premises -> Premise SEMICOLON . Premises  / 1

$ => reduce 49
LIDENT => shift 27
COMMA => reduce 37
TURNSTILE => reduce 37
LRULE => reduce 49
PROMOTE => shift 55
RULE => reduce 49
EOF => reduce 49
Hyp => goto 26
HypsNonempty => goto 25
Hyps => goto 54
Context => goto 53
Premise => goto 52
Premises => goto 98

-----

State 81:

5 : TermAtom -> . LPAREN Term RPAREN  / 26
6 : TermAtom -> . LIDENT  / 26
7 : TermAtom -> . DOLLAR LIDENT  / 26
8 : TermAtom -> . UIDENT  / 26
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 26
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 26
11 : TermAtom -> . LPAREN RPAREN  / 26
12 : TermAtom -> . KI  / 26
13 : TermAtom -> . UI  / 26
14 : TermApp -> . TermAtom  / 26
15 : TermApp -> . TermApp TermAtom  / 26
16 : TermApp -> . TermApp PI1  / 26
17 : TermApp -> . TermApp PI2  / 26
18 : TermApp -> . TermApp PREV  / 26
19 : TermApp -> . NEXT TermAtom  / 26
20 : TermApp -> . LIDENT LBRACE LIDENT COLON TermAtom RBRACE TermAtom  / 26
21 : Term -> . TermApp  / 27
22 : Term -> . FN Idents DOT TermApp  / 27
23 : Term -> . TermApp EQUAL TermApp COLON TermApp  / 27
24 : Term -> . TermApp COLON TermApp  / 27
25 : Term -> . TermApp EQUAL TermApp COLON TYPE  / 27
26 : Term -> . TermApp COLON TYPE  / 27
27 : Term -> . TermApp SUBTYPE TermApp  / 27
45 : Rhs -> . Term EXT UIDENT  / 15
46 : Rhs -> . Term  / 15
47 : Premise -> Context TURNSTILE . Rhs  / 15

UIDENT => shift 16
LIDENT => shift 15
LPAREN => shift 17
DOLLAR => shift 14
FN => shift 13
NEXT => shift 19
KI => shift 18
UI => shift 12
Term => goto 100
TermAtom => goto 20
TermApp => goto 10
Rhs => goto 99

-----

State 82:

36 : HypsNonempty -> Hyps . COMMA Hyp  / 13
39 : Context -> PROMOTE Hyps .  / 23

COMMA => shift 49
ELLIPSIS => reduce 39
TURNSTILE => reduce 39

-----

State 83:

5 : TermAtom -> . LPAREN Term RPAREN  / 16
6 : TermAtom -> . LIDENT  / 16
7 : TermAtom -> . DOLLAR LIDENT  / 16
8 : TermAtom -> . UIDENT  / 16
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 16
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 16
11 : TermAtom -> . LPAREN RPAREN  / 16
12 : TermAtom -> . KI  / 16
13 : TermAtom -> . UI  / 16
14 : TermApp -> . TermAtom  / 16
15 : TermApp -> . TermApp TermAtom  / 16
16 : TermApp -> . TermApp PI1  / 16
17 : TermApp -> . TermApp PI2  / 16
18 : TermApp -> . TermApp PREV  / 16
19 : TermApp -> . NEXT TermAtom  / 16
20 : TermApp -> . LIDENT LBRACE LIDENT COLON TermAtom RBRACE TermAtom  / 16
23 : Term -> TermApp EQUAL TermApp COLON . TermApp  / 8
25 : Term -> TermApp EQUAL TermApp COLON . TYPE  / 8

UIDENT => shift 16
LIDENT => shift 15
LPAREN => shift 17
DOLLAR => shift 14
NEXT => shift 19
TYPE => shift 101
KI => shift 18
UI => shift 12
TermAtom => goto 20
TermApp => goto 102

-----

State 84:

5 : TermAtom -> . LPAREN Term RPAREN  / 16
6 : TermAtom -> . LIDENT  / 16
7 : TermAtom -> . DOLLAR LIDENT  / 16
8 : TermAtom -> . UIDENT  / 16
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 16
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 16
11 : TermAtom -> . LPAREN RPAREN  / 16
12 : TermAtom -> . KI  / 16
13 : TermAtom -> . UI  / 16
15 : TermApp -> TermApp . TermAtom  / 16
16 : TermApp -> TermApp . PI1  / 16
17 : TermApp -> TermApp . PI2  / 16
18 : TermApp -> TermApp . PREV  / 16
22 : Term -> FN Idents DOT TermApp .  / 8

UIDENT => shift 16
LIDENT => shift 35
PI1 => shift 34
PI2 => shift 33
PREV => shift 32
LPAREN => shift 17
RPAREN => reduce 22
COMMA => reduce 22
DOLLAR => shift 14
IF => reduce 22
SEMICOLON => reduce 22
SLASH => reduce 22
EXT => reduce 22
KI => shift 18
UI => shift 12
TermAtom => goto 36

-----

State 85:

5 : TermAtom -> . LPAREN Term RPAREN  / 28
6 : TermAtom -> . LIDENT  / 28
7 : TermAtom -> . DOLLAR LIDENT  / 28
8 : TermAtom -> . UIDENT  / 28
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 28
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 28
11 : TermAtom -> . LPAREN RPAREN  / 28
12 : TermAtom -> . KI  / 28
13 : TermAtom -> . UI  / 28
20 : TermApp -> LIDENT LBRACE LIDENT COLON . TermAtom RBRACE TermAtom  / 7

UIDENT => shift 16
LIDENT => shift 35
LPAREN => shift 17
DOLLAR => shift 14
KI => shift 18
UI => shift 12
TermAtom => goto 103

-----

State 86:

2 : Sub -> . Term SLASH LIDENT  / 19
3 : Subs -> . Sub  / 20
4 : Subs -> . Sub COMMA Subs  / 20
4 : Subs -> Sub COMMA . Subs  / 20
5 : TermAtom -> . LPAREN Term RPAREN  / 21
6 : TermAtom -> . LIDENT  / 21
7 : TermAtom -> . DOLLAR LIDENT  / 21
8 : TermAtom -> . UIDENT  / 21
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 21
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 21
11 : TermAtom -> . LPAREN RPAREN  / 21
12 : TermAtom -> . KI  / 21
13 : TermAtom -> . UI  / 21
14 : TermApp -> . TermAtom  / 21
15 : TermApp -> . TermApp TermAtom  / 21
16 : TermApp -> . TermApp PI1  / 21
17 : TermApp -> . TermApp PI2  / 21
18 : TermApp -> . TermApp PREV  / 21
19 : TermApp -> . NEXT TermAtom  / 21
20 : TermApp -> . LIDENT LBRACE LIDENT COLON TermAtom RBRACE TermAtom  / 21
21 : Term -> . TermApp  / 22
22 : Term -> . FN Idents DOT TermApp  / 22
23 : Term -> . TermApp EQUAL TermApp COLON TermApp  / 22
24 : Term -> . TermApp COLON TermApp  / 22
25 : Term -> . TermApp EQUAL TermApp COLON TYPE  / 22
26 : Term -> . TermApp COLON TYPE  / 22
27 : Term -> . TermApp SUBTYPE TermApp  / 22

UIDENT => shift 16
LIDENT => shift 15
LPAREN => shift 17
DOLLAR => shift 14
FN => shift 13
NEXT => shift 19
KI => shift 18
UI => shift 12
Sub => goto 64
Term => goto 66
Subs => goto 104
TermAtom => goto 20
TermApp => goto 10

-----

State 87:

9 : TermAtom -> UIDENT LBRACKET Subs RBRACKET .  / 9

UIDENT => reduce 9
LIDENT => reduce 9
PI1 => reduce 9
PI2 => reduce 9
PREV => reduce 9
LPAREN => reduce 9
RPAREN => reduce 9
RBRACE => reduce 9
COLON => reduce 9
COMMA => reduce 9
DOLLAR => reduce 9
ELLIPSIS => reduce 9
EQUAL => reduce 9
IF => reduce 9
SEMICOLON => reduce 9
SLASH => reduce 9
SUBTYPE => reduce 9
TURNSTILE => reduce 9
EXT => reduce 9
KI => reduce 9
UI => reduce 9

-----

State 88:

2 : Sub -> Term SLASH . LIDENT  / 19

LIDENT => shift 105

-----

State 89:

10 : TermAtom -> LPAREN Term COMMA Term . RPAREN  / 9

RPAREN => shift 106

-----

State 90:

34 : Hyp -> . LIDENT COLON Class  / 13
35 : HypsNonempty -> . Hyp  / 13
36 : HypsNonempty -> . Hyps COMMA Hyp  / 13
37 : Hyps -> .  / 13
38 : Hyps -> . HypsNonempty  / 13
39 : Context -> . PROMOTE Hyps  / 23
40 : Context -> . Hyps  / 23
42 : PContext -> . Context ELLIPSIS  / 6
43 : PContext -> . Context ELLIPSIS LBRACKET Subs RBRACKET  / 6
44 : PContext -> . Context  / 6
48 : LPremise -> . PContext TURNSTILE Rhs  / 15
51 : LPremises -> .  / 1
52 : LPremises -> . LPremise SEMICOLON LPremises  / 1
52 : LPremises -> LPremise SEMICOLON . LPremises  / 1

$ => reduce 51
LIDENT => shift 27
COMMA => reduce 37
ELLIPSIS => reduce 37
TURNSTILE => reduce 37
LRULE => reduce 51
PROMOTE => shift 55
RULE => reduce 51
EOF => reduce 51
Hyp => goto 26
HypsNonempty => goto 25
Hyps => goto 54
Context => goto 72
PContext => goto 71
LPremise => goto 70
LPremises => goto 107

-----

State 91:

5 : TermAtom -> . LPAREN Term RPAREN  / 26
6 : TermAtom -> . LIDENT  / 26
7 : TermAtom -> . DOLLAR LIDENT  / 26
8 : TermAtom -> . UIDENT  / 26
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 26
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 26
11 : TermAtom -> . LPAREN RPAREN  / 26
12 : TermAtom -> . KI  / 26
13 : TermAtom -> . UI  / 26
14 : TermApp -> . TermAtom  / 26
15 : TermApp -> . TermApp TermAtom  / 26
16 : TermApp -> . TermApp PI1  / 26
17 : TermApp -> . TermApp PI2  / 26
18 : TermApp -> . TermApp PREV  / 26
19 : TermApp -> . NEXT TermAtom  / 26
20 : TermApp -> . LIDENT LBRACE LIDENT COLON TermAtom RBRACE TermAtom  / 26
21 : Term -> . TermApp  / 27
22 : Term -> . FN Idents DOT TermApp  / 27
23 : Term -> . TermApp EQUAL TermApp COLON TermApp  / 27
24 : Term -> . TermApp COLON TermApp  / 27
25 : Term -> . TermApp EQUAL TermApp COLON TYPE  / 27
26 : Term -> . TermApp COLON TYPE  / 27
27 : Term -> . TermApp SUBTYPE TermApp  / 27
45 : Rhs -> . Term EXT UIDENT  / 15
46 : Rhs -> . Term  / 15
48 : LPremise -> PContext TURNSTILE . Rhs  / 15

UIDENT => shift 16
LIDENT => shift 15
LPAREN => shift 17
DOLLAR => shift 14
FN => shift 13
NEXT => shift 19
KI => shift 18
UI => shift 12
Term => goto 100
TermAtom => goto 20
TermApp => goto 10
Rhs => goto 108

-----

State 92:

42 : PContext -> Context ELLIPSIS .  / 6
43 : PContext -> Context ELLIPSIS . LBRACKET Subs RBRACKET  / 6

LBRACKET => shift 109
TURNSTILE => reduce 42

-----

State 93:

5 : TermAtom -> . LPAREN Term RPAREN  / 18
6 : TermAtom -> . LIDENT  / 18
7 : TermAtom -> . DOLLAR LIDENT  / 18
8 : TermAtom -> . UIDENT  / 18
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 18
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 18
11 : TermAtom -> . LPAREN RPAREN  / 18
12 : TermAtom -> . KI  / 18
13 : TermAtom -> . UI  / 18
14 : TermApp -> . TermAtom  / 18
15 : TermApp -> . TermApp TermAtom  / 18
16 : TermApp -> . TermApp PI1  / 18
17 : TermApp -> . TermApp PI2  / 18
18 : TermApp -> . TermApp PREV  / 18
19 : TermApp -> . NEXT TermAtom  / 18
20 : TermApp -> . LIDENT LBRACE LIDENT COLON TermAtom RBRACE TermAtom  / 18
21 : Term -> . TermApp  / 4
22 : Term -> . FN Idents DOT TermApp  / 4
23 : Term -> . TermApp EQUAL TermApp COLON TermApp  / 4
24 : Term -> . TermApp COLON TermApp  / 4
25 : Term -> . TermApp EQUAL TermApp COLON TYPE  / 4
26 : Term -> . TermApp COLON TYPE  / 4
27 : Term -> . TermApp SUBTYPE TermApp  / 4
55 : LConcl -> CContext TURNSTILE Term EXT . Term  / 4

UIDENT => shift 16
LIDENT => shift 15
LPAREN => shift 17
DOLLAR => shift 14
FN => shift 13
NEXT => shift 19
KI => shift 18
UI => shift 12
Term => goto 110
TermAtom => goto 20
TermApp => goto 10

-----

State 94:

33 : Class -> HIDE TYPE .  / 13

COMMA => reduce 33
ELLIPSIS => reduce 33
TURNSTILE => reduce 33

-----

State 95:

30 : Class -> HIDE TermAtom .  / 13

COMMA => reduce 30
ELLIPSIS => reduce 30
TURNSTILE => reduce 30

-----

State 96:

32 : Class -> DEMOTE TYPE .  / 13

COMMA => reduce 32
ELLIPSIS => reduce 32
TURNSTILE => reduce 32

-----

State 97:

29 : Class -> DEMOTE TermAtom .  / 13

COMMA => reduce 29
ELLIPSIS => reduce 29
TURNSTILE => reduce 29

-----

State 98:

50 : Premises -> Premise SEMICOLON Premises .  / 1

$ => reduce 50
LRULE => reduce 50
RULE => reduce 50
EOF => reduce 50

-----

State 99:

47 : Premise -> Context TURNSTILE Rhs .  / 15

SEMICOLON => reduce 47

-----

State 100:

45 : Rhs -> Term . EXT UIDENT  / 15
46 : Rhs -> Term .  / 15

SEMICOLON => reduce 46
EXT => shift 111

-----

State 101:

25 : Term -> TermApp EQUAL TermApp COLON TYPE .  / 8

RPAREN => reduce 25
COMMA => reduce 25
IF => reduce 25
SEMICOLON => reduce 25
SLASH => reduce 25
EXT => reduce 25

-----

State 102:

5 : TermAtom -> . LPAREN Term RPAREN  / 16
6 : TermAtom -> . LIDENT  / 16
7 : TermAtom -> . DOLLAR LIDENT  / 16
8 : TermAtom -> . UIDENT  / 16
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 16
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 16
11 : TermAtom -> . LPAREN RPAREN  / 16
12 : TermAtom -> . KI  / 16
13 : TermAtom -> . UI  / 16
15 : TermApp -> TermApp . TermAtom  / 16
16 : TermApp -> TermApp . PI1  / 16
17 : TermApp -> TermApp . PI2  / 16
18 : TermApp -> TermApp . PREV  / 16
23 : Term -> TermApp EQUAL TermApp COLON TermApp .  / 8

UIDENT => shift 16
LIDENT => shift 35
PI1 => shift 34
PI2 => shift 33
PREV => shift 32
LPAREN => shift 17
RPAREN => reduce 23
COMMA => reduce 23
DOLLAR => shift 14
IF => reduce 23
SEMICOLON => reduce 23
SLASH => reduce 23
EXT => reduce 23
KI => shift 18
UI => shift 12
TermAtom => goto 36

-----

State 103:

20 : TermApp -> LIDENT LBRACE LIDENT COLON TermAtom . RBRACE TermAtom  / 7

RBRACE => shift 112

-----

State 104:

4 : Subs -> Sub COMMA Subs .  / 20

RBRACKET => reduce 4

-----

State 105:

2 : Sub -> Term SLASH LIDENT .  / 19

RBRACKET => reduce 2
COMMA => reduce 2

-----

State 106:

10 : TermAtom -> LPAREN Term COMMA Term RPAREN .  / 9

UIDENT => reduce 10
LIDENT => reduce 10
PI1 => reduce 10
PI2 => reduce 10
PREV => reduce 10
LPAREN => reduce 10
RPAREN => reduce 10
RBRACE => reduce 10
COLON => reduce 10
COMMA => reduce 10
DOLLAR => reduce 10
ELLIPSIS => reduce 10
EQUAL => reduce 10
IF => reduce 10
SEMICOLON => reduce 10
SLASH => reduce 10
SUBTYPE => reduce 10
TURNSTILE => reduce 10
EXT => reduce 10
KI => reduce 10
UI => reduce 10

-----

State 107:

52 : LPremises -> LPremise SEMICOLON LPremises .  / 1

$ => reduce 52
LRULE => reduce 52
RULE => reduce 52
EOF => reduce 52

-----

State 108:

48 : LPremise -> PContext TURNSTILE Rhs .  / 15

SEMICOLON => reduce 48

-----

State 109:

2 : Sub -> . Term SLASH LIDENT  / 19
3 : Subs -> . Sub  / 20
4 : Subs -> . Sub COMMA Subs  / 20
5 : TermAtom -> . LPAREN Term RPAREN  / 21
6 : TermAtom -> . LIDENT  / 21
7 : TermAtom -> . DOLLAR LIDENT  / 21
8 : TermAtom -> . UIDENT  / 21
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 21
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 21
11 : TermAtom -> . LPAREN RPAREN  / 21
12 : TermAtom -> . KI  / 21
13 : TermAtom -> . UI  / 21
14 : TermApp -> . TermAtom  / 21
15 : TermApp -> . TermApp TermAtom  / 21
16 : TermApp -> . TermApp PI1  / 21
17 : TermApp -> . TermApp PI2  / 21
18 : TermApp -> . TermApp PREV  / 21
19 : TermApp -> . NEXT TermAtom  / 21
20 : TermApp -> . LIDENT LBRACE LIDENT COLON TermAtom RBRACE TermAtom  / 21
21 : Term -> . TermApp  / 22
22 : Term -> . FN Idents DOT TermApp  / 22
23 : Term -> . TermApp EQUAL TermApp COLON TermApp  / 22
24 : Term -> . TermApp COLON TermApp  / 22
25 : Term -> . TermApp EQUAL TermApp COLON TYPE  / 22
26 : Term -> . TermApp COLON TYPE  / 22
27 : Term -> . TermApp SUBTYPE TermApp  / 22
43 : PContext -> Context ELLIPSIS LBRACKET . Subs RBRACKET  / 6

UIDENT => shift 16
LIDENT => shift 15
LPAREN => shift 17
DOLLAR => shift 14
FN => shift 13
NEXT => shift 19
KI => shift 18
UI => shift 12
Sub => goto 64
Term => goto 66
Subs => goto 113
TermAtom => goto 20
TermApp => goto 10

-----

State 110:

55 : LConcl -> CContext TURNSTILE Term EXT Term .  / 4

IF => reduce 55

-----

State 111:

45 : Rhs -> Term EXT . UIDENT  / 15

UIDENT => shift 114

-----

State 112:

5 : TermAtom -> . LPAREN Term RPAREN  / 7
6 : TermAtom -> . LIDENT  / 7
7 : TermAtom -> . DOLLAR LIDENT  / 7
8 : TermAtom -> . UIDENT  / 7
9 : TermAtom -> . UIDENT LBRACKET Subs RBRACKET  / 7
10 : TermAtom -> . LPAREN Term COMMA Term RPAREN  / 7
11 : TermAtom -> . LPAREN RPAREN  / 7
12 : TermAtom -> . KI  / 7
13 : TermAtom -> . UI  / 7
20 : TermApp -> LIDENT LBRACE LIDENT COLON TermAtom RBRACE . TermAtom  / 7

UIDENT => shift 16
LIDENT => shift 35
LPAREN => shift 17
DOLLAR => shift 14
KI => shift 18
UI => shift 12
TermAtom => goto 115

-----

State 113:

43 : PContext -> Context ELLIPSIS LBRACKET Subs . RBRACKET  / 6

RBRACKET => shift 116

-----

State 114:

45 : Rhs -> Term EXT UIDENT .  / 15

SEMICOLON => reduce 45

-----

State 115:

20 : TermApp -> LIDENT LBRACE LIDENT COLON TermAtom RBRACE TermAtom .  / 7

UIDENT => reduce 20
LIDENT => reduce 20
PI1 => reduce 20
PI2 => reduce 20
PREV => reduce 20
LPAREN => reduce 20
RPAREN => reduce 20
COLON => reduce 20
COMMA => reduce 20
DOLLAR => reduce 20
EQUAL => reduce 20
IF => reduce 20
SEMICOLON => reduce 20
SLASH => reduce 20
SUBTYPE => reduce 20
EXT => reduce 20
KI => reduce 20
UI => reduce 20

-----

State 116:

43 : PContext -> Context ELLIPSIS LBRACKET Subs RBRACKET .  / 6

TURNSTILE => reduce 43

-----

lookahead 0 = $ EOF 
lookahead 1 = $ LRULE RULE EOF 
lookahead 2 = UIDENT LIDENT PI1 PI2 PREV LPAREN COLON DOLLAR EQUAL IF SUBTYPE EXT KI UI 
lookahead 3 = IF EXT 
lookahead 4 = IF 
lookahead 5 = COMMA ELLIPSIS 
lookahead 6 = TURNSTILE 
lookahead 7 = UIDENT LIDENT PI1 PI2 PREV LPAREN RPAREN COLON COMMA DOLLAR EQUAL IF SEMICOLON SLASH SUBTYPE EXT KI UI 
lookahead 8 = RPAREN COMMA IF SEMICOLON SLASH EXT 
lookahead 9 = UIDENT LIDENT PI1 PI2 PREV LPAREN RPAREN RBRACE COLON COMMA DOLLAR ELLIPSIS EQUAL IF SEMICOLON SLASH SUBTYPE TURNSTILE EXT KI UI 
lookahead 10 = DOT 
lookahead 11 = UIDENT LIDENT PI1 PI2 PREV LPAREN RPAREN COLON COMMA DOLLAR EQUAL SUBTYPE KI UI 
lookahead 12 = RPAREN COMMA 
lookahead 13 = COMMA ELLIPSIS TURNSTILE 
lookahead 14 = COMMA TURNSTILE 
lookahead 15 = SEMICOLON 
lookahead 16 = UIDENT LIDENT PI1 PI2 PREV LPAREN RPAREN COMMA DOLLAR IF SEMICOLON SLASH EXT KI UI 
lookahead 17 = UIDENT LIDENT PI1 PI2 PREV LPAREN COLON DOLLAR KI UI 
lookahead 18 = UIDENT LIDENT PI1 PI2 PREV LPAREN COLON DOLLAR EQUAL IF SUBTYPE KI UI 
lookahead 19 = RBRACKET COMMA 
lookahead 20 = RBRACKET 
lookahead 21 = UIDENT LIDENT PI1 PI2 PREV LPAREN COLON DOLLAR EQUAL SLASH SUBTYPE KI UI 
lookahead 22 = SLASH 
lookahead 23 = ELLIPSIS TURNSTILE 
lookahead 24 = UIDENT LIDENT PI1 PI2 PREV LPAREN RPAREN COLON DOLLAR EQUAL SUBTYPE KI UI 
lookahead 25 = RPAREN 
lookahead 26 = UIDENT LIDENT PI1 PI2 PREV LPAREN COLON DOLLAR EQUAL SEMICOLON SUBTYPE EXT KI UI 
lookahead 27 = SEMICOLON EXT 
lookahead 28 = RBRACE 

*)

struct
local
structure Value = struct
datatype nonterminal =
nonterminal
| symbol_pos of Arg.symbol_pos
| pos of Arg.pos
| idents of Arg.idents
| sub of Arg.sub
| subs of Arg.subs
| term of Arg.term
| class of Arg.class
| hyp of Arg.hyp
| hyps of Arg.hyps
| context of Arg.context
| pcontext of Arg.pcontext
| rhs of Arg.rhs
| premise of Arg.premise
| lpremise of Arg.lpremise
| premises of Arg.premises
| lpremises of Arg.lpremises
| concl of Arg.concl
| lconcl of Arg.lconcl
| rule of Arg.rule
| lrule of Arg.lrule
| clause of Arg.clause
| clauses of Arg.clauses
end
structure ParseEngine = ParseEngineFun (structure Streamable = Streamable
type terminal = Arg.terminal
type value = Value.nonterminal
val dummy = Value.nonterminal
fun read terminal =
(case terminal of
Arg.UIDENT x => (1, Value.symbol_pos x)
| Arg.LIDENT x => (2, Value.symbol_pos x)
| Arg.PI1 x => (3, Value.pos x)
| Arg.PI2 x => (4, Value.pos x)
| Arg.PREV x => (5, Value.pos x)
| Arg.LPAREN x => (6, Value.pos x)
| Arg.RPAREN x => (7, Value.pos x)
| Arg.LBRACKET x => (8, Value.pos x)
| Arg.RBRACKET x => (9, Value.pos x)
| Arg.LBRACE x => (10, Value.pos x)
| Arg.RBRACE x => (11, Value.pos x)
| Arg.COLON x => (12, Value.pos x)
| Arg.COMMA x => (13, Value.pos x)
| Arg.DOLLAR x => (14, Value.pos x)
| Arg.DOT x => (15, Value.pos x)
| Arg.ELLIPSIS x => (16, Value.pos x)
| Arg.EQUAL x => (17, Value.pos x)
| Arg.IF x => (18, Value.pos x)
| Arg.SEMICOLON x => (19, Value.pos x)
| Arg.SLASH x => (20, Value.pos x)
| Arg.SUBTYPE x => (21, Value.pos x)
| Arg.TURNSTILE x => (22, Value.pos x)
| Arg.DEMOTE x => (23, Value.pos x)
| Arg.EXT x => (24, Value.pos x)
| Arg.FN x => (25, Value.pos x)
| Arg.HIDE x => (26, Value.pos x)
| Arg.LRULE x => (27, Value.pos x)
| Arg.NEXT x => (28, Value.pos x)
| Arg.PROMOTE x => (29, Value.pos x)
| Arg.RULE x => (30, Value.pos x)
| Arg.TYPE x => (31, Value.pos x)
| Arg.KI x => (32, Value.pos x)
| Arg.UI x => (33, Value.pos x)
| Arg.EOF x => (34, Value.pos x)
)
)
in
val parse = ParseEngine.parse (
ParseEngine.next6xi\128\128\128\128\160i\143\128\128\159iii\158\128\128i\128\128\128\128\128\128\128\147\141\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128H\128\128\128\128\128\166\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128qqqqqqq\128\128\128qqqq\128qqqqqqq\128q\128\128\128\128\128\128\128qqxxxxxxx\128\128\170\128xxx\128\128xxxxx\128\128x\128\128\128\128\128\128\128xx\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128vvvvvvv\171\128\128vvvv\128vvvvvvv\128v\128\128\128\128\128\128\128vv\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\145\144\128\128\128\146\172\128\128\128\128\128\128\143\128\128\128\128\128\128\128\128\128\128\142\128\128\148\128\128\128\147\141\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128rrrrrrr\128\128\128rrrr\128rrrrrrr\128r\128\128\128\128\128\128\128rr\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\145\164\128\128\128\146\128\128\128\128\128\128\128\143\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\147\141\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128ppppppp\128\128\128\128ppp\128\128ppppp\128\128p\128\128\128\128\128\128\128pplllllll\128\128\128\128lll\128\128lllll\128\128l\128\128\128\128\128\128\128ll\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128mmmmmmm\128\128\128\128mmm\128\128mmmmm\128\128m\128\128\128\128\128\128\128mm\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128nnnnnnn\128\128\128\128nnn\128\128nnnnn\128\128n\128\128\128\128\128\128\128nn\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128xxxxxxx\128\128\128xxxx\128xxxxxxx\128x\128\128\128\128\128\128\128xx\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128ooooooo\128\128\128\128ooo\128\128ooooo\128\128o\128\128\128\128\128\128\128oo~\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128wwwwwww\128\128\128wwww\128wwwwwww\128w\128\128\128\128\128\128\128ww\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\192\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\145\144\128\128\128\146\128\128\128\128\128\128\128\143\128\128\128\128\128\128\128\128\128\128\142\128\128\148\128\128\128\147\141\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128sssssss\128\128\128ssss\128sssssss\128s\128\128\128\128\128\128\128ss\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\197\128\128\128\128\128\196\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128kkkkkkk\128\128\128\128kkk\128\128kkkkk\128\128k\128\128\128\128\128\128\128kkc\128\128\128\128\128c\143\128\128\128ccc\128\128\128c\128\128\128\128\128\128\128\147\141\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\145\164\163\162\161\146\128\128\128\128\128\212\128\143\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\147\141\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128d\128\128\128\128\128d\128\128\128\128ddd\128\128\128d\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\145\164\163\162\161\146f\128\128\128\128\128f\143\128\128\128fff\128\128\128f}\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\214\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128{yyyyyyy\128\128\128yyyy\128yyyyyyy\128y\128\128\128\128\128\128\128yyb\128\128b\128\128\128\128\128bh\128\128\128\128\128h\143\128\128\128hhh\128\128\128huuuuuuu\128\128\128uuuu\128uuuuuuu\128u\128\128\128\128\128\128\128uu`\128\128`\128\128\128\128\128`\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128^\128\128^\128\128\128\128\128^\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128a\128\128a\128\128\128\128\128ae\128\128\128\128\128e\128\128\128\128eee\128\128\128e\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\145\164\163\162\161\146g\128\128\128\128\128g\143\128\128\128ggg\128\128\128g\128\128\128\128\128\128\128\147\141\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\241\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128z\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128|\128\128\128|\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128ttttttt\128\128\128tttt\128ttttttt\128t\128\128\128\128\128\128\128ttjjjjjjj\128\128\128\128jjj\128\128jjjjj\128\128j\128\128\128\128\128\128\128jj\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128S\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128",
ParseEngine.next6x
Vector.fromList [(0,1,(fn Value.symbol_pos(arg0)::rest => Value.idents(Arg.sing_idents arg0)::rest|_=>raise (Fail "bad parser"))),
(0,2,(fn Value.idents(arg0)::Value.symbol_pos(arg1)::rest => Value.idents(Arg.cons_idents {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(1,3,(fn Value.symbol_pos(arg0)::_::Value.term(arg1)::rest => Value.sub(Arg.make_sub {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(3,1,(fn Value.sub(arg0)::rest => Value.subs(Arg.sing_subs arg0)::rest|_=>raise (Fail "bad parser"))),
(3,3,(fn Value.subs(arg0)::_::Value.sub(arg1)::rest => Value.subs(Arg.cons_subs {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(4,3,(fn _::Value.term(arg0)::_::rest => Value.term(Arg.id_term arg0)::rest|_=>raise (Fail "bad parser"))),
(4,1,(fn Value.symbol_pos(arg0)::rest => Value.term(Arg.const_term arg0)::rest|_=>raise (Fail "bad parser"))),
(4,2,(fn Value.symbol_pos(arg0)::_::rest => Value.term(Arg.var_term arg0)::rest|_=>raise (Fail "bad parser"))),
(4,1,(fn Value.symbol_pos(arg0)::rest => Value.term(Arg.metavar_term arg0)::rest|_=>raise (Fail "bad parser"))),
(4,4,(fn _::Value.subs(arg0)::_::Value.symbol_pos(arg1)::rest => Value.term(Arg.metavar_subs_term {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(4,5,(fn _::Value.term(arg0)::_::Value.term(arg1)::_::rest => Value.term(Arg.pair_term {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(4,2,(fn _::_::rest => Value.term(Arg.triv_term {})::rest|_=>raise (Fail "bad parser"))),
(4,1,(fn _::rest => Value.term(Arg.ki_term {})::rest|_=>raise (Fail "bad parser"))),
(4,1,(fn _::rest => Value.term(Arg.ui_term {})::rest|_=>raise (Fail "bad parser"))),
(5,1,(fn Value.term(arg0)::rest => Value.term(Arg.id_term arg0)::rest|_=>raise (Fail "bad parser"))),
(5,2,(fn Value.term(arg0)::Value.term(arg1)::rest => Value.term(Arg.app_term {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(5,2,(fn _::Value.term(arg0)::rest => Value.term(Arg.pi1_term arg0)::rest|_=>raise (Fail "bad parser"))),
(5,2,(fn _::Value.term(arg0)::rest => Value.term(Arg.pi2_term arg0)::rest|_=>raise (Fail "bad parser"))),
(5,2,(fn _::Value.term(arg0)::rest => Value.term(Arg.prev_term arg0)::rest|_=>raise (Fail "bad parser"))),
(5,2,(fn Value.term(arg0)::_::rest => Value.term(Arg.next_term arg0)::rest|_=>raise (Fail "bad parser"))),
(5,7,(fn Value.term(arg0)::_::Value.term(arg1)::_::Value.symbol_pos(arg2)::_::Value.symbol_pos(arg3)::rest => Value.term(Arg.bind_term {4=arg0,3=arg1,2=arg2,1=arg3})::rest|_=>raise (Fail "bad parser"))),
(2,1,(fn Value.term(arg0)::rest => Value.term(Arg.id_term arg0)::rest|_=>raise (Fail "bad parser"))),
(2,4,(fn Value.term(arg0)::_::Value.idents(arg1)::_::rest => Value.term(Arg.fn_term {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(2,5,(fn Value.term(arg0)::_::Value.term(arg1)::_::Value.term(arg2)::rest => Value.term(Arg.equal_term {3=arg0,2=arg1,1=arg2})::rest|_=>raise (Fail "bad parser"))),
(2,3,(fn Value.term(arg0)::_::Value.term(arg1)::rest => Value.term(Arg.of_term {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(2,5,(fn _::_::Value.term(arg0)::_::Value.term(arg1)::rest => Value.term(Arg.eqtp_term {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(2,3,(fn _::_::Value.term(arg0)::rest => Value.term(Arg.istp_term arg0)::rest|_=>raise (Fail "bad parser"))),
(2,3,(fn Value.term(arg0)::_::Value.term(arg1)::rest => Value.term(Arg.subtype_term {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(6,1,(fn Value.term(arg0)::rest => Value.class(Arg.tm_class arg0)::rest|_=>raise (Fail "bad parser"))),
(6,2,(fn Value.term(arg0)::_::rest => Value.class(Arg.tml_class arg0)::rest|_=>raise (Fail "bad parser"))),
(6,2,(fn Value.term(arg0)::_::rest => Value.class(Arg.tmh_class arg0)::rest|_=>raise (Fail "bad parser"))),
(6,1,(fn _::rest => Value.class(Arg.tp_class {})::rest|_=>raise (Fail "bad parser"))),
(6,2,(fn _::_::rest => Value.class(Arg.tpl_class {})::rest|_=>raise (Fail "bad parser"))),
(6,2,(fn _::_::rest => Value.class(Arg.tph_class {})::rest|_=>raise (Fail "bad parser"))),
(7,3,(fn Value.class(arg0)::_::Value.symbol_pos(arg1)::rest => Value.hyp(Arg.make_hyp {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(8,1,(fn Value.hyp(arg0)::rest => Value.hyps(Arg.sing_hyps arg0)::rest|_=>raise (Fail "bad parser"))),
(8,3,(fn Value.hyp(arg0)::_::Value.hyps(arg1)::rest => Value.hyps(Arg.cons_hyps {1=arg0,2=arg1})::rest|_=>raise (Fail "bad parser"))),
(9,0,(fn rest => Value.hyps(Arg.nil_hyps {})::rest)),
(9,1,(fn Value.hyps(arg0)::rest => Value.hyps(Arg.id_hyps arg0)::rest|_=>raise (Fail "bad parser"))),
(10,2,(fn Value.hyps(arg0)::_::rest => Value.context(Arg.promote_context arg0)::rest|_=>raise (Fail "bad parser"))),
(10,1,(fn Value.hyps(arg0)::rest => Value.context(Arg.ordinary_context arg0)::rest|_=>raise (Fail "bad parser"))),
(11,2,(fn _::Value.hyps(arg0)::rest => Value.hyps(Arg.make_ccontext arg0)::rest|_=>raise (Fail "bad parser"))),
(12,2,(fn _::Value.context(arg0)::rest => Value.pcontext(Arg.long_pcontext arg0)::rest|_=>raise (Fail "bad parser"))),
(12,5,(fn _::Value.subs(arg0)::_::_::Value.context(arg1)::rest => Value.pcontext(Arg.longsub_pcontext {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(12,1,(fn Value.context(arg0)::rest => Value.pcontext(Arg.short_pcontext arg0)::rest|_=>raise (Fail "bad parser"))),
(13,3,(fn Value.symbol_pos(arg0)::_::Value.term(arg1)::rest => Value.rhs(Arg.ext_rhs {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(13,1,(fn Value.term(arg0)::rest => Value.rhs(Arg.noext_rhs arg0)::rest|_=>raise (Fail "bad parser"))),
(14,3,(fn Value.rhs(arg0)::_::Value.context(arg1)::rest => Value.premise(Arg.make_premise {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(15,3,(fn Value.rhs(arg0)::_::Value.pcontext(arg1)::rest => Value.lpremise(Arg.make_lpremise {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(16,0,(fn rest => Value.premises(Arg.nil_premises {})::rest)),
(16,3,(fn Value.premises(arg0)::_::Value.premise(arg1)::rest => Value.premises(Arg.cons_premises {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(17,0,(fn rest => Value.lpremises(Arg.nil_lpremises {})::rest)),
(17,3,(fn Value.lpremises(arg0)::_::Value.lpremise(arg1)::rest => Value.lpremises(Arg.cons_lpremises {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(18,3,(fn Value.term(arg0)::_::Value.term(arg1)::rest => Value.concl(Arg.ext_concl {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(18,1,(fn Value.term(arg0)::rest => Value.concl(Arg.noext_concl arg0)::rest|_=>raise (Fail "bad parser"))),
(19,5,(fn Value.term(arg0)::_::Value.term(arg1)::_::Value.hyps(arg2)::rest => Value.lconcl(Arg.ext_lconcl {3=arg0,2=arg1,1=arg2})::rest|_=>raise (Fail "bad parser"))),
(19,3,(fn Value.term(arg0)::_::Value.hyps(arg1)::rest => Value.lconcl(Arg.noext_lconcl {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(20,3,(fn Value.premises(arg0)::_::Value.concl(arg1)::rest => Value.rule(Arg.make_rule {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(21,3,(fn Value.lpremises(arg0)::_::Value.lconcl(arg1)::rest => Value.lrule(Arg.make_lrule {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(22,3,(fn Value.rule(arg0)::Value.symbol_pos(arg1)::_::rest => Value.clause(Arg.rule_clause {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(22,3,(fn Value.lrule(arg0)::Value.symbol_pos(arg1)::_::rest => Value.clause(Arg.lrule_clause {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(23,0,(fn rest => Value.clauses(Arg.nil_clauses {})::rest)),
(23,2,(fn Value.clauses(arg0)::Value.clause(arg1)::rest => Value.clauses(Arg.cons_clauses {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser")))],
(fn Value.clauses x => x | _ => raise (Fail "bad parser")), Arg.error)
end
end
