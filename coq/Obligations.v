(* This file is generated by Rulegen. *)

Require Import Defs.

Definition forallForm_obligation : Type := forall G A B ext1 ext0, tr G (dof ext1 (app istp A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app istp B)) -> tr G (dof triv (app istp (app (app pi A) (lam B)))).
Definition forallEq_obligation : Type := forall G A A' B B' ext1 ext0, tr G (dof ext1 (app (app eqtp A) A')) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app eqtp B) B')) -> tr G (dof triv (app (app eqtp (app (app pi A) (lam B))) (app (app pi A') (lam B')))).
Definition forallFormUniv_obligation : Type := forall G A B I ext1 ext0, tr G (dof ext1 (app (app of (app univ I)) A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app of (app univ (subst (sh 1) I))) B)) -> tr G (dof triv (app (app of (app univ I)) (app (app pi A) (lam B)))).
Definition forallEqUniv_obligation : Type := forall G A A' B B' I ext1 ext0, tr G (dof ext1 (app (app (app eq (app univ I)) A) A')) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app (app eq (app univ (subst (sh 1) I))) B) B')) -> tr G (dof triv (app (app (app eq (app univ I)) (app (app pi A) (lam B))) (app (app pi A') (lam B')))).
Definition forallSub_obligation : Type := forall G A A' B B' ext2 ext1 ext0, tr G (dof ext2 (app (app subtype A') A)) -> tr (cons (hyp_tm A') G) (dof ext1 (app (app subtype B) B')) -> tr (cons (hyp_tm A) G) (dof ext0 (app istp B)) -> tr G (dof triv (app (app subtype (app (app pi A) (lam B))) (app (app pi A') (lam B')))).
Definition forallIntroOf_obligation : Type := forall G A B M ext1 ext0, tr G (dof ext1 (app istp A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app of B) M)) -> tr G (dof triv (app (app of (app (app pi A) (lam B))) (lam M))).
Definition forallIntroEq_obligation : Type := forall G A B M N ext1 ext0, tr G (dof ext1 (app istp A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app (app eq B) M) N)) -> tr G (dof triv (app (app (app eq (app (app pi A) (lam B))) (lam M)) (lam N))).
Definition forallIntro_obligation : Type := forall G A B ext0 M, tr G (dof ext0 (app istp A)) -> tr (cons (hyp_tm A) G) (dof M B) -> tr G (dof (lam M) (app (app pi A) (lam B))).
Definition forallElimOf_obligation : Type := forall G A B M P ext1 ext0, tr G (dof ext1 (app (app of (app (app pi A) (lam B))) M)) -> tr G (dof ext0 (app (app of A) P)) -> tr G (dof triv (app (app of (subst (dot P (sh 0)) B)) (app M P))).
Definition forallElimEq_obligation : Type := forall G A B M N P Q ext1 ext0, tr G (dof ext1 (app (app (app eq (app (app pi A) (lam B))) M) N)) -> tr G (dof ext0 (app (app (app eq A) P) Q)) -> tr G (dof triv (app (app (app eq (subst (dot P (sh 0)) B)) (app M P)) (app N Q))).
Definition forallElim_obligation : Type := forall G A B P M ext0, tr G (dof M (app (app pi A) (lam B))) -> tr G (dof ext0 (app (app of A) P)) -> tr G (dof (app M P) (subst (dot P (sh 0)) B)).
Definition forallEta_obligation : Type := forall G A B M ext0, tr G (dof ext0 (app (app of (app (app pi A) (lam B))) M)) -> tr G (dof triv (app (app (app eq (app (app pi A) (lam B))) M) (lam (app (subst (sh 1) M) (var 0))))).
Definition forallExt_obligation : Type := forall G A B M N ext2 ext1 ext0, tr G (dof ext2 (app (app of (app (app pi A) (lam B))) M)) -> tr G (dof ext1 (app (app of (app (app pi A) (lam B))) N)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app (app eq B) (app (subst (sh 1) M) (var 0))) (app (subst (sh 1) N) (var 0)))) -> tr G (dof triv (app (app (app eq (app (app pi A) (lam B))) M) N)).
Definition forallOfExt_obligation : Type := forall G A A' B B' M ext2 ext1 ext0, tr G (dof ext2 (app istp A)) -> tr G (dof ext1 (app (app of (app (app pi A') (lam B'))) M)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app of B) (app (subst (sh 1) M) (var 0)))) -> tr G (dof triv (app (app of (app (app pi A) (lam B))) M)).
Definition forallFormInv1_obligation : Type := forall G A B ext0, tr G (dof ext0 (app istp (app (app pi A) (lam B)))) -> tr G (dof triv (app istp A)).
Definition forallFormInv2_obligation : Type := forall G A B M ext1 ext0, tr G (dof ext1 (app istp (app (app pi A) (lam B)))) -> tr G (dof ext0 (app (app of A) M)) -> tr G (dof triv (app istp (subst (dot M (sh 0)) B))).
Definition arrowForm_obligation : Type := forall G A B ext1 ext0, tr G (dof ext1 (app istp A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app istp (subst (sh 1) B))) -> tr G (dof triv (app istp (app (app arrow A) B))).
Definition arrowEq_obligation : Type := forall G A A' B B' ext1 ext0, tr G (dof ext1 (app (app eqtp A) A')) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app eqtp (subst (sh 1) B)) (subst (sh 1) B'))) -> tr G (dof triv (app (app eqtp (app (app arrow A) B)) (app (app arrow A') B'))).
Definition arrowFormUniv_obligation : Type := forall G A B I ext1 ext0, tr G (dof ext1 (app (app of (app univ I)) A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app of (app univ (subst (sh 1) I))) (subst (sh 1) B))) -> tr G (dof triv (app (app of (app univ I)) (app (app arrow A) B))).
Definition arrowEqUniv_obligation : Type := forall G A A' B B' I ext1 ext0, tr G (dof ext1 (app (app (app eq (app univ I)) A) A')) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app (app eq (app univ (subst (sh 1) I))) (subst (sh 1) B)) (subst (sh 1) B'))) -> tr G (dof triv (app (app (app eq (app univ I)) (app (app arrow A) B)) (app (app arrow A') B'))).
Definition arrowForallEq_obligation : Type := forall G A A' B B' ext1 ext0, tr G (dof ext1 (app (app eqtp A) A')) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app eqtp (subst (sh 1) B)) B')) -> tr G (dof triv (app (app eqtp (app (app arrow A) B)) (app (app pi A') (lam B')))).
Definition arrowForallEqUniv_obligation : Type := forall G A A' B B' I ext1 ext0, tr G (dof ext1 (app (app (app eq (app univ I)) A) A')) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app (app eq (app univ (subst (sh 1) I))) (subst (sh 1) B)) B')) -> tr G (dof triv (app (app (app eq (app univ I)) (app (app arrow A) B)) (app (app pi A') (lam B')))).
Definition arrowSub_obligation : Type := forall G A A' B B' ext1 ext0, tr G (dof ext1 (app (app subtype A') A)) -> tr G (dof ext0 (app (app subtype B) B')) -> tr G (dof triv (app (app subtype (app (app arrow A) B)) (app (app arrow A') B'))).
Definition arrowForallSub_obligation : Type := forall G A A' B B' ext2 ext1 ext0, tr G (dof ext2 (app (app subtype A') A)) -> tr (cons (hyp_tm A') G) (dof ext1 (app (app subtype (subst (sh 1) B)) B')) -> tr G (dof ext0 (app istp B)) -> tr G (dof triv (app (app subtype (app (app arrow A) B)) (app (app pi A') (lam B')))).
Definition forallArrowSub_obligation : Type := forall G A A' B B' ext2 ext1 ext0, tr G (dof ext2 (app (app subtype A') A)) -> tr (cons (hyp_tm A') G) (dof ext1 (app (app subtype B) (subst (sh 1) B'))) -> tr (cons (hyp_tm A) G) (dof ext0 (app istp B)) -> tr G (dof triv (app (app subtype (app (app pi A) (lam B))) (app (app arrow A') B'))).
Definition arrowIntroOf_obligation : Type := forall G A B M ext1 ext0, tr G (dof ext1 (app istp A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app of (subst (sh 1) B)) M)) -> tr G (dof triv (app (app of (app (app arrow A) B)) (lam M))).
Definition arrowIntroEq_obligation : Type := forall G A B M N ext1 ext0, tr G (dof ext1 (app istp A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app (app eq (subst (sh 1) B)) M) N)) -> tr G (dof triv (app (app (app eq (app (app arrow A) B)) (lam M)) (lam N))).
Definition arrowIntro_obligation : Type := forall G A B ext0 M, tr G (dof ext0 (app istp A)) -> tr (cons (hyp_tm A) G) (dof M (subst (sh 1) B)) -> tr G (dof (lam M) (app (app arrow A) B)).
Definition arrowElimOf_obligation : Type := forall G A B M P ext1 ext0, tr G (dof ext1 (app (app of (app (app arrow A) B)) M)) -> tr G (dof ext0 (app (app of A) P)) -> tr G (dof triv (app (app of B) (app M P))).
Definition arrowElimEq_obligation : Type := forall G A B M N P Q ext1 ext0, tr G (dof ext1 (app (app (app eq (app (app arrow A) B)) M) N)) -> tr G (dof ext0 (app (app (app eq A) P) Q)) -> tr G (dof triv (app (app (app eq B) (app M P)) (app N Q))).
Definition arrowElim_obligation : Type := forall G A B M P, tr G (dof M (app (app arrow A) B)) -> tr G (dof P A) -> tr G (dof (app M P) B).
Definition arrowEta_obligation : Type := forall G A B M ext0, tr G (dof ext0 (app (app of (app (app arrow A) B)) M)) -> tr G (dof triv (app (app (app eq (app (app arrow A) B)) M) (lam (app (subst (sh 1) M) (var 0))))).
Definition arrowExt_obligation : Type := forall G A B M N ext2 ext1 ext0, tr G (dof ext2 (app (app of (app (app arrow A) B)) M)) -> tr G (dof ext1 (app (app of (app (app arrow A) B)) N)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app (app eq (subst (sh 1) B)) (app (subst (sh 1) M) (var 0))) (app (subst (sh 1) N) (var 0)))) -> tr G (dof triv (app (app (app eq (app (app arrow A) B)) M) N)).
Definition arrowOfExt_obligation : Type := forall G A A' B B' M ext2 ext1 ext0, tr G (dof ext2 (app istp A)) -> tr G (dof ext1 (app (app of (app (app pi A') (lam B'))) M)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app of (subst (sh 1) B)) (app (subst (sh 1) M) (var 0)))) -> tr G (dof triv (app (app of (app (app arrow A) B)) M)).
Definition arrowFormInv1_obligation : Type := forall G A B ext0, tr G (dof ext0 (app istp (app (app arrow A) B))) -> tr G (dof triv (app istp A)).
Definition arrowFormInv2_obligation : Type := forall G A B M ext1 ext0, tr G (dof ext1 (app istp (app (app arrow A) B))) -> tr G (dof ext0 (app (app of A) M)) -> tr G (dof triv (app istp B)).
Definition tarrowKind_obligation : Type := forall G A I K ext1 ext0, tr G (dof ext1 (app (app of (app univ I)) A)) -> tr G (dof ext0 (app (app of (app kind I)) K)) -> tr G (dof triv (app (app of (app kind I)) (app (app tarrow A) K))).
Definition tarrowKindEq_obligation : Type := forall G A A' I K K' ext1 ext0, tr G (dof ext1 (app (app (app eq (app univ I)) A) A')) -> tr G (dof ext0 (app (app (app eq (app kind I)) K) K')) -> tr G (dof triv (app (app (app eq (app kind I)) (app (app tarrow A) K)) (app (app tarrow A') K'))).
Definition tarrowForm_obligation : Type := forall G A B ext1 ext0, tr G (dof ext1 (app istp A)) -> tr G (dof ext0 (app istp B)) -> tr G (dof triv (app istp (app (app tarrow A) B))).
Definition tarrowEq_obligation : Type := forall G A A' B B' ext1 ext0, tr G (dof ext1 (app (app eqtp A) A')) -> tr G (dof ext0 (app (app eqtp B) B')) -> tr G (dof triv (app (app eqtp (app (app tarrow A) B)) (app (app tarrow A') B'))).
Definition tarrowFormUniv_obligation : Type := forall G A B I ext1 ext0, tr G (dof ext1 (app (app of (app univ I)) A)) -> tr G (dof ext0 (app (app of (app univ I)) B)) -> tr G (dof triv (app (app of (app univ I)) (app (app tarrow A) B))).
Definition tarrowEqUniv_obligation : Type := forall G A A' B B' I ext1 ext0, tr G (dof ext1 (app (app (app eq (app univ I)) A) A')) -> tr G (dof ext0 (app (app (app eq (app univ I)) B) B')) -> tr G (dof triv (app (app (app eq (app univ I)) (app (app tarrow A) B)) (app (app tarrow A') B'))).
Definition tarrowArrowEq_obligation : Type := forall G A A' B B' ext1 ext0, tr G (dof ext1 (app (app eqtp A) A')) -> tr G (dof ext0 (app (app eqtp B) B')) -> tr G (dof triv (app (app eqtp (app (app tarrow A) B)) (app (app arrow A') B'))).
Definition tarrowArrowEqUniv_obligation : Type := forall G A A' B B' I ext1 ext0, tr G (dof ext1 (app (app (app eq (app univ I)) A) A')) -> tr G (dof ext0 (app (app (app eq (app univ I)) B) B')) -> tr G (dof triv (app (app (app eq (app univ I)) (app (app tarrow A) B)) (app (app arrow A') B'))).
Definition tarrowForallEq_obligation : Type := forall G A A' B B' ext2 ext1 ext0, tr G (dof ext2 (app (app eqtp A) A')) -> tr (cons (hyp_tm A) G) (dof ext1 (app (app eqtp (subst (sh 1) B)) B')) -> tr G (dof ext0 (app istp B)) -> tr G (dof triv (app (app eqtp (app (app tarrow A) B)) (app (app pi A') (lam B')))).
Definition tarrowForallEqUniv_obligation : Type := forall G A A' B B' I ext2 ext1 ext0, tr G (dof ext2 (app (app (app eq (app univ I)) A) A')) -> tr (cons (hyp_tm A) G) (dof ext1 (app (app (app eq (app univ (subst (sh 1) I))) (subst (sh 1) B)) B')) -> tr G (dof ext0 (app (app of (app univ I)) B)) -> tr G (dof triv (app (app (app eq (app univ I)) (app (app tarrow A) B)) (app (app pi A') (lam B')))).
Definition tarrowIntroOf_obligation : Type := forall G A B M ext2 ext1 ext0, tr G (dof ext2 (app istp A)) -> tr G (dof ext1 (app istp B)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app of (subst (sh 1) B)) M)) -> tr G (dof triv (app (app of (app (app tarrow A) B)) (lam M))).
Definition tarrowIntroEq_obligation : Type := forall G A B M N ext2 ext1 ext0, tr G (dof ext2 (app istp A)) -> tr G (dof ext1 (app istp B)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app (app eq (subst (sh 1) B)) M) N)) -> tr G (dof triv (app (app (app eq (app (app tarrow A) B)) (lam M)) (lam N))).
Definition tarrowIntro_obligation : Type := forall G A B ext1 ext0 M, tr G (dof ext1 (app istp A)) -> tr G (dof ext0 (app istp B)) -> tr (cons (hyp_tm A) G) (dof M (subst (sh 1) B)) -> tr G (dof (lam M) (app (app tarrow A) B)).
Definition tarrowElimOf_obligation : Type := forall G A B M P ext1 ext0, tr G (dof ext1 (app (app of (app (app tarrow A) B)) M)) -> tr G (dof ext0 (app (app of A) P)) -> tr G (dof triv (app (app of B) (app M P))).
Definition tarrowElimEq_obligation : Type := forall G A B M N P Q ext1 ext0, tr G (dof ext1 (app (app (app eq (app (app tarrow A) B)) M) N)) -> tr G (dof ext0 (app (app (app eq A) P) Q)) -> tr G (dof triv (app (app (app eq B) (app M P)) (app N Q))).
Definition tarrowElim_obligation : Type := forall G A B M P, tr G (dof M (app (app tarrow A) B)) -> tr G (dof P A) -> tr G (dof (app M P) B).
Definition tarrowEta_obligation : Type := forall G A B M ext0, tr G (dof ext0 (app (app of (app (app tarrow A) B)) M)) -> tr G (dof triv (app (app (app eq (app (app tarrow A) B)) M) (lam (app (subst (sh 1) M) (var 0))))).
Definition tarrowExt_obligation : Type := forall G A B M N ext3 ext2 ext1 ext0, tr G (dof ext3 (app istp B)) -> tr G (dof ext2 (app (app of (app (app tarrow A) B)) M)) -> tr G (dof ext1 (app (app of (app (app tarrow A) B)) N)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app (app eq (subst (sh 1) B)) (app (subst (sh 1) M) (var 0))) (app (subst (sh 1) N) (var 0)))) -> tr G (dof triv (app (app (app eq (app (app tarrow A) B)) M) N)).
Definition tarrowOfExt_obligation : Type := forall G A A' B B' M ext3 ext2 ext1 ext0, tr G (dof ext3 (app istp A)) -> tr G (dof ext2 (app istp B)) -> tr G (dof ext1 (app (app of (app (app pi A') (lam B'))) M)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app of (subst (sh 1) B)) (app (subst (sh 1) M) (var 0)))) -> tr G (dof triv (app (app of (app (app tarrow A) B)) M)).
Definition karrowKind_obligation : Type := forall G I K L ext1 ext0, tr G (dof ext1 (app (app of (app kind I)) K)) -> tr G (dof ext0 (app (app of (app kind I)) L)) -> tr G (dof triv (app (app of (app kind I)) (app (app karrow K) L))).
Definition karrowKindEq_obligation : Type := forall G I K K' L L' ext1 ext0, tr G (dof ext1 (app (app (app eq (app kind I)) K) K')) -> tr G (dof ext0 (app (app (app eq (app kind I)) L) L')) -> tr G (dof triv (app (app (app eq (app kind I)) (app (app karrow K) L)) (app (app karrow K') L'))).
Definition karrowForm_obligation : Type := forall G A B ext1 ext0, tr G (dof ext1 (app istp A)) -> tr G (dof ext0 (app istp B)) -> tr G (dof triv (app istp (app (app karrow A) B))).
Definition karrowEq_obligation : Type := forall G A A' B B' ext1 ext0, tr G (dof ext1 (app (app eqtp A) A')) -> tr G (dof ext0 (app (app eqtp B) B')) -> tr G (dof triv (app (app eqtp (app (app karrow A) B)) (app (app karrow A') B'))).
Definition karrowFormUniv_obligation : Type := forall G A B I ext1 ext0, tr G (dof ext1 (app (app of (app univ I)) A)) -> tr G (dof ext0 (app (app of (app univ I)) B)) -> tr G (dof triv (app (app of (app univ I)) (app (app karrow A) B))).
Definition karrowEqUniv_obligation : Type := forall G A A' B B' I ext1 ext0, tr G (dof ext1 (app (app (app eq (app univ I)) A) A')) -> tr G (dof ext0 (app (app (app eq (app univ I)) B) B')) -> tr G (dof triv (app (app (app eq (app univ I)) (app (app karrow A) B)) (app (app karrow A') B'))).
Definition karrowArrowEq_obligation : Type := forall G A A' B B' ext1 ext0, tr G (dof ext1 (app (app eqtp A) A')) -> tr G (dof ext0 (app (app eqtp B) B')) -> tr G (dof triv (app (app eqtp (app (app karrow A) B)) (app (app arrow A') B'))).
Definition karrowArrowEqUniv_obligation : Type := forall G A A' B B' I ext1 ext0, tr G (dof ext1 (app (app (app eq (app univ I)) A) A')) -> tr G (dof ext0 (app (app (app eq (app univ I)) B) B')) -> tr G (dof triv (app (app (app eq (app univ I)) (app (app karrow A) B)) (app (app arrow A') B'))).
Definition karrowForallEq_obligation : Type := forall G A A' B B' ext2 ext1 ext0, tr G (dof ext2 (app (app eqtp A) A')) -> tr (cons (hyp_tm A) G) (dof ext1 (app (app eqtp (subst (sh 1) B)) B')) -> tr G (dof ext0 (app istp B)) -> tr G (dof triv (app (app eqtp (app (app karrow A) B)) (app (app pi A') (lam B')))).
Definition karrowForallEqUniv_obligation : Type := forall G A A' B B' I ext2 ext1 ext0, tr G (dof ext2 (app (app (app eq (app univ I)) A) A')) -> tr (cons (hyp_tm A) G) (dof ext1 (app (app (app eq (app univ (subst (sh 1) I))) (subst (sh 1) B)) B')) -> tr G (dof ext0 (app (app of (app univ I)) B)) -> tr G (dof triv (app (app (app eq (app univ I)) (app (app karrow A) B)) (app (app pi A') (lam B')))).
Definition karrowIntroOf_obligation : Type := forall G A B M ext2 ext1 ext0, tr G (dof ext2 (app istp A)) -> tr G (dof ext1 (app istp B)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app of (subst (sh 1) B)) M)) -> tr G (dof triv (app (app of (app (app karrow A) B)) (lam M))).
Definition karrowIntroEq_obligation : Type := forall G A B M N ext2 ext1 ext0, tr G (dof ext2 (app istp A)) -> tr G (dof ext1 (app istp B)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app (app eq (subst (sh 1) B)) M) N)) -> tr G (dof triv (app (app (app eq (app (app karrow A) B)) (lam M)) (lam N))).
Definition karrowIntro_obligation : Type := forall G A B ext1 ext0 M, tr G (dof ext1 (app istp A)) -> tr G (dof ext0 (app istp B)) -> tr (cons (hyp_tm A) G) (dof M (subst (sh 1) B)) -> tr G (dof (lam M) (app (app karrow A) B)).
Definition karrowElimOf_obligation : Type := forall G A B M P ext1 ext0, tr G (dof ext1 (app (app of (app (app karrow A) B)) M)) -> tr G (dof ext0 (app (app of A) P)) -> tr G (dof triv (app (app of B) (app M P))).
Definition karrowElimEq_obligation : Type := forall G A B M N P Q ext1 ext0, tr G (dof ext1 (app (app (app eq (app (app karrow A) B)) M) N)) -> tr G (dof ext0 (app (app (app eq A) P) Q)) -> tr G (dof triv (app (app (app eq B) (app M P)) (app N Q))).
Definition karrowElim_obligation : Type := forall G A B M P, tr G (dof M (app (app karrow A) B)) -> tr G (dof P A) -> tr G (dof (app M P) B).
Definition karrowEta_obligation : Type := forall G A B M ext0, tr G (dof ext0 (app (app of (app (app karrow A) B)) M)) -> tr G (dof triv (app (app (app eq (app (app karrow A) B)) M) (lam (app (subst (sh 1) M) (var 0))))).
Definition karrowExt_obligation : Type := forall G A B M N ext3 ext2 ext1 ext0, tr G (dof ext3 (app istp B)) -> tr G (dof ext2 (app (app of (app (app karrow A) B)) M)) -> tr G (dof ext1 (app (app of (app (app karrow A) B)) N)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app (app eq (subst (sh 1) B)) (app (subst (sh 1) M) (var 0))) (app (subst (sh 1) N) (var 0)))) -> tr G (dof triv (app (app (app eq (app (app karrow A) B)) M) N)).
Definition karrowOfExt_obligation : Type := forall G A A' B B' M ext3 ext2 ext1 ext0, tr G (dof ext3 (app istp A)) -> tr G (dof ext2 (app istp B)) -> tr G (dof ext1 (app (app of (app (app pi A') (lam B'))) M)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app of (subst (sh 1) B)) (app (subst (sh 1) M) (var 0)))) -> tr G (dof triv (app (app of (app (app karrow A) B)) M)).
Definition intersectForm_obligation : Type := forall G A B ext1 ext0, tr G (dof ext1 (app istp A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app istp B)) -> tr G (dof triv (app istp (app (app intersect A) (lam B)))).
Definition intersectEq_obligation : Type := forall G A A' B B' ext1 ext0, tr G (dof ext1 (app (app eqtp A) A')) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app eqtp B) B')) -> tr G (dof triv (app (app eqtp (app (app intersect A) (lam B))) (app (app intersect A') (lam B')))).
Definition intersectFormUniv_obligation : Type := forall G A B I ext1 ext0, tr G (dof ext1 (app (app of (app univ I)) A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app of (app univ (subst (sh 1) I))) B)) -> tr G (dof triv (app (app of (app univ I)) (app (app intersect A) (lam B)))).
Definition intersectEqUniv_obligation : Type := forall G A A' B B' I ext1 ext0, tr G (dof ext1 (app (app (app eq (app univ I)) A) A')) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app (app eq (app univ (subst (sh 1) I))) B) B')) -> tr G (dof triv (app (app (app eq (app univ I)) (app (app intersect A) (lam B))) (app (app intersect A') (lam B')))).
Definition intersectIntroOf_obligation : Type := forall G A B M ext1 ext0, tr G (dof ext1 (app istp A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app of B) (subst (sh 1) M))) -> tr G (dof triv (app (app of (app (app intersect A) (lam B))) M)).
Definition intersectIntroEq_obligation : Type := forall G A B M N ext1 ext0, tr G (dof ext1 (app istp A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app (app eq B) (subst (sh 1) M)) (subst (sh 1) N))) -> tr G (dof triv (app (app (app eq (app (app intersect A) (lam B))) M) N)).
Definition intersectIntro_obligation : Type := forall G A B ext0 M, hygiene (fun i => i <> 0) M -> tr G (dof ext0 (app istp A)) -> tr (cons (hyp_tm A) G) (dof M B) -> tr G (dof (subst (dot triv (sh 0)) M) (app (app intersect A) (lam B))).
Definition intersectElimOf_obligation : Type := forall G A B M P ext1 ext0, tr G (dof ext1 (app (app of (app (app intersect A) (lam B))) M)) -> tr G (dof ext0 (app (app of A) P)) -> tr G (dof triv (app (app of (subst (dot P (sh 0)) B)) M)).
Definition intersectElimEq_obligation : Type := forall G A B M N P ext1 ext0, tr G (dof ext1 (app (app (app eq (app (app intersect A) (lam B))) M) N)) -> tr G (dof ext0 (app (app of A) P)) -> tr G (dof triv (app (app (app eq (subst (dot P (sh 0)) B)) M) N)).
Definition intersectElim_obligation : Type := forall G A B P M ext0, tr G (dof M (app (app intersect A) (lam B))) -> tr G (dof ext0 (app (app of A) P)) -> tr G (dof M (subst (dot P (sh 0)) B)).
Definition intersectFormInv1_obligation : Type := forall G A B ext0, tr G (dof ext0 (app istp (app (app intersect A) (lam B)))) -> tr G (dof triv (app istp A)).
Definition intersectFormInv2_obligation : Type := forall G A B M ext1 ext0, tr G (dof ext1 (app istp (app (app intersect A) (lam B)))) -> tr G (dof ext0 (app (app of A) M)) -> tr G (dof triv (app istp (subst (dot M (sh 0)) B))).
Definition guardForm_obligation : Type := forall G A B ext1 ext0, tr G (dof ext1 (app istp A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app istp (subst (sh 1) B))) -> tr G (dof triv (app istp (app (app guard A) B))).
Definition guardEq_obligation : Type := forall G A A' B B' ext1 ext0, tr G (dof ext1 (app (app eqtp A) A')) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app eqtp (subst (sh 1) B)) (subst (sh 1) B'))) -> tr G (dof triv (app (app eqtp (app (app guard A) B)) (app (app guard A') B'))).
Definition guardFormUniv_obligation : Type := forall G A B I ext1 ext0, tr G (dof ext1 (app (app of (app univ I)) A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app of (app univ (subst (sh 1) I))) (subst (sh 1) B))) -> tr G (dof triv (app (app of (app univ I)) (app (app guard A) B))).
Definition guardEqUniv_obligation : Type := forall G A A' B B' I ext1 ext0, tr G (dof ext1 (app (app (app eq (app univ I)) A) A')) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app (app eq (app univ (subst (sh 1) I))) (subst (sh 1) B)) (subst (sh 1) B'))) -> tr G (dof triv (app (app (app eq (app univ I)) (app (app guard A) B)) (app (app guard A') B'))).
Definition guardIntroOf_obligation : Type := forall G A B M ext1 ext0, tr G (dof ext1 (app istp A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app of (subst (sh 1) B)) (subst (sh 1) M))) -> tr G (dof triv (app (app of (app (app guard A) B)) M)).
Definition guardIntroEq_obligation : Type := forall G A B M N ext1 ext0, tr G (dof ext1 (app istp A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app (app eq (subst (sh 1) B)) (subst (sh 1) M)) (subst (sh 1) N))) -> tr G (dof triv (app (app (app eq (app (app guard A) B)) M) N)).
Definition guardIntro_obligation : Type := forall G A B ext0 M, hygiene (fun i => i <> 0) M -> tr G (dof ext0 (app istp A)) -> tr (cons (hyp_tm A) G) (dof M (subst (sh 1) B)) -> tr G (dof (subst (dot triv (sh 0)) M) (app (app guard A) B)).
Definition guardElimOf_obligation : Type := forall G A B M ext1 ext0, tr G (dof ext1 (app (app of (app (app guard A) B)) M)) -> tr G (dof ext0 A) -> tr G (dof triv (app (app of B) M)).
Definition guardElimEq_obligation : Type := forall G A B M N ext1 ext0, tr G (dof ext1 (app (app (app eq (app (app guard A) B)) M) N)) -> tr G (dof ext0 A) -> tr G (dof triv (app (app (app eq B) M) N)).
Definition guardElim_obligation : Type := forall G A B M ext0, tr G (dof M (app (app guard A) B)) -> tr G (dof ext0 A) -> tr G (dof M B).
Definition guardSatEq_obligation : Type := forall G A B ext1 ext0, tr G (dof ext1 (app istp B)) -> tr G (dof ext0 A) -> tr G (dof triv (app (app eqtp B) (app (app guard A) B))).
Definition existsForm_obligation : Type := forall G A B ext1 ext0, tr G (dof ext1 (app istp A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app istp B)) -> tr G (dof triv (app istp (app (app sigma A) (lam B)))).
Definition existsEq_obligation : Type := forall G A A' B B' ext1 ext0, tr G (dof ext1 (app (app eqtp A) A')) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app eqtp B) B')) -> tr G (dof triv (app (app eqtp (app (app sigma A) (lam B))) (app (app sigma A') (lam B')))).
Definition existsFormUniv_obligation : Type := forall G A B I ext1 ext0, tr G (dof ext1 (app (app of (app univ I)) A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app of (app univ (subst (sh 1) I))) B)) -> tr G (dof triv (app (app of (app univ I)) (app (app sigma A) (lam B)))).
Definition existsEqUniv_obligation : Type := forall G A A' B B' I ext1 ext0, tr G (dof ext1 (app (app (app eq (app univ I)) A) A')) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app (app eq (app univ (subst (sh 1) I))) B) B')) -> tr G (dof triv (app (app (app eq (app univ I)) (app (app sigma A) (lam B))) (app (app sigma A') (lam B')))).
Definition existsSub_obligation : Type := forall G A A' B B' ext2 ext1 ext0, tr G (dof ext2 (app (app subtype A) A')) -> tr (cons (hyp_tm A) G) (dof ext1 (app (app subtype B) B')) -> tr (cons (hyp_tm A') G) (dof ext0 (app istp B')) -> tr G (dof triv (app (app subtype (app (app sigma A) (lam B))) (app (app sigma A') (lam B')))).
Definition existsIntroOf_obligation : Type := forall G A B M N ext2 ext1 ext0, tr (cons (hyp_tm A) G) (dof ext2 (app istp B)) -> tr G (dof ext1 (app (app of A) M)) -> tr G (dof ext0 (app (app of (subst (dot M (sh 0)) B)) N)) -> tr G (dof triv (app (app of (app (app sigma A) (lam B))) (ppair M N))).
Definition existsIntroEq_obligation : Type := forall G A B M M' N N' ext2 ext1 ext0, tr (cons (hyp_tm A) G) (dof ext2 (app istp B)) -> tr G (dof ext1 (app (app (app eq A) M) M')) -> tr G (dof ext0 (app (app (app eq (subst (dot M (sh 0)) B)) N) N')) -> tr G (dof triv (app (app (app eq (app (app sigma A) (lam B))) (ppair M N)) (ppair M' N'))).
Definition existsIntro_obligation : Type := forall G A B M ext1 ext0 N, tr (cons (hyp_tm A) G) (dof ext1 (app istp B)) -> tr G (dof ext0 (app (app of A) M)) -> tr G (dof N (subst (dot M (sh 0)) B)) -> tr G (dof (ppair M N) (app (app sigma A) (lam B))).
Definition existsElim1Of_obligation : Type := forall G A B M ext0, tr G (dof ext0 (app (app of (app (app sigma A) (lam B))) M)) -> tr G (dof triv (app (app of A) (ppi1 M))).
Definition existsElim1Eq_obligation : Type := forall G A B M N ext0, tr G (dof ext0 (app (app (app eq (app (app sigma A) (lam B))) M) N)) -> tr G (dof triv (app (app (app eq A) (ppi1 M)) (ppi1 N))).
Definition existsElim1_obligation : Type := forall G A B M, tr G (dof M (app (app sigma A) (lam B))) -> tr G (dof (ppi1 M) A).
Definition existsElim2Of_obligation : Type := forall G A B M ext0, tr G (dof ext0 (app (app of (app (app sigma A) (lam B))) M)) -> tr G (dof triv (app (app of (subst (dot (ppi1 M) (sh 0)) B)) (ppi2 M))).
Definition existsElim2Eq_obligation : Type := forall G A B M N ext0, tr G (dof ext0 (app (app (app eq (app (app sigma A) (lam B))) M) N)) -> tr G (dof triv (app (app (app eq (subst (dot (ppi1 M) (sh 0)) B)) (ppi2 M)) (ppi2 N))).
Definition existsEta_obligation : Type := forall G A B M ext0, tr G (dof ext0 (app (app of (app (app sigma A) (lam B))) M)) -> tr G (dof triv (app (app (app eq (app (app sigma A) (lam B))) M) (ppair (ppi1 M) (ppi2 M)))).
Definition existsExt_obligation : Type := forall G A B M N ext3 ext2 ext1 ext0, tr G (dof ext3 (app (app of (app (app sigma A) (lam B))) M)) -> tr G (dof ext2 (app (app of (app (app sigma A) (lam B))) N)) -> tr G (dof ext1 (app (app (app eq A) (ppi1 M)) (ppi1 N))) -> tr G (dof ext0 (app (app (app eq (subst (dot (ppi1 M) (sh 0)) B)) (ppi2 M)) (ppi2 N))) -> tr G (dof triv (app (app (app eq (app (app sigma A) (lam B))) M) N)).
Definition existsLeft_obligation : Type := forall G1 G2 A B C M, tr (List.app (substctx (dot (ppair (var 1) (var 0)) (sh 2)) G2) (cons (hyp_tm B) (cons (hyp_tm A) G1))) (dof M (subst (under (length G2) (dot (ppair (var 1) (var 0)) (sh 2))) C)) -> tr (List.app G2 (cons (hyp_tm (app (app sigma A) (lam B))) G1)) (dof (subst (under (length G2) (dot (ppi2 (var 0)) (dot (ppi1 (var 0)) (sh 1)))) M) C).
Definition existsFormInv1_obligation : Type := forall G A B ext0, tr G (dof ext0 (app istp (app (app sigma A) (lam B)))) -> tr G (dof triv (app istp A)).
Definition existsFormInv2_obligation : Type := forall G A B M ext1 ext0, tr G (dof ext1 (app istp (app (app sigma A) (lam B)))) -> tr G (dof ext0 (app (app of A) M)) -> tr G (dof triv (app istp (subst (dot M (sh 0)) B))).
Definition existsFormInv2Eq_obligation : Type := forall G A B M N ext1 ext0, tr G (dof ext1 (app istp (app (app sigma A) (lam B)))) -> tr G (dof ext0 (app (app (app eq A) M) N)) -> tr G (dof triv (app (app eqtp (subst (dot M (sh 0)) B)) (subst (dot N (sh 0)) B))).
Definition prodKind_obligation : Type := forall G I K L ext1 ext0, tr G (dof ext1 (app (app of (app kind I)) K)) -> tr G (dof ext0 (app (app of (app kind I)) L)) -> tr G (dof triv (app (app of (app kind I)) (app (app prod K) L))).
Definition prodKindEq_obligation : Type := forall G I K K' L L' ext1 ext0, tr G (dof ext1 (app (app (app eq (app kind I)) K) K')) -> tr G (dof ext0 (app (app (app eq (app kind I)) L) L')) -> tr G (dof triv (app (app (app eq (app kind I)) (app (app prod K) L)) (app (app prod K') L'))).
Definition prodForm_obligation : Type := forall G A B ext1 ext0, tr G (dof ext1 (app istp A)) -> tr G (dof ext0 (app istp B)) -> tr G (dof triv (app istp (app (app prod A) B))).
Definition prodEq_obligation : Type := forall G A A' B B' ext1 ext0, tr G (dof ext1 (app (app eqtp A) A')) -> tr G (dof ext0 (app (app eqtp B) B')) -> tr G (dof triv (app (app eqtp (app (app prod A) B)) (app (app prod A') B'))).
Definition prodFormUniv_obligation : Type := forall G A B I ext1 ext0, tr G (dof ext1 (app (app of (app univ I)) A)) -> tr G (dof ext0 (app (app of (app univ I)) B)) -> tr G (dof triv (app (app of (app univ I)) (app (app prod A) B))).
Definition prodEqUniv_obligation : Type := forall G A A' B B' I ext1 ext0, tr G (dof ext1 (app (app (app eq (app univ I)) A) A')) -> tr G (dof ext0 (app (app (app eq (app univ I)) B) B')) -> tr G (dof triv (app (app (app eq (app univ I)) (app (app prod A) B)) (app (app prod A') B'))).
Definition prodExistsEq_obligation : Type := forall G A A' B B' ext1 ext0, tr G (dof ext1 (app (app eqtp A) A')) -> tr G (dof ext0 (app (app eqtp B) B')) -> tr G (dof triv (app (app eqtp (app (app prod A) B)) (app (app sigma A) (lam (subst (sh 1) B))))).
Definition prodExistsEqUniv_obligation : Type := forall G A A' B B' I ext1 ext0, tr G (dof ext1 (app (app (app eq (app univ I)) A) A')) -> tr G (dof ext0 (app (app (app eq (app univ I)) B) B')) -> tr G (dof triv (app (app (app eq (app univ I)) (app (app prod A) B)) (app (app sigma A) (lam (subst (sh 1) B))))).
Definition prodSub_obligation : Type := forall G A A' B B' ext1 ext0, tr G (dof ext1 (app (app subtype A) A')) -> tr G (dof ext0 (app (app subtype B) B')) -> tr G (dof triv (app (app subtype (app (app prod A) B)) (app (app prod A') B'))).
Definition prodExistsSub_obligation : Type := forall G A A' B B' ext3 ext2 ext1 ext0, tr G (dof ext3 (app (app subtype A) A')) -> tr (cons (hyp_tm A) G) (dof ext2 (app (app subtype (subst (sh 1) B)) B')) -> tr G (dof ext1 (app istp B)) -> tr (cons (hyp_tm A') G) (dof ext0 (app istp B')) -> tr G (dof triv (app (app subtype (app (app prod A) B)) (app (app sigma A') (lam B')))).
Definition existsProdSub_obligation : Type := forall G A A' B B' ext2 ext1 ext0, tr G (dof ext2 (app (app subtype A) A')) -> tr (cons (hyp_tm A) G) (dof ext1 (app (app subtype B) (subst (sh 1) B'))) -> tr G (dof ext0 (app istp B')) -> tr G (dof triv (app (app subtype (app (app sigma A) (lam B))) (app (app prod A') B'))).
Definition prodIntroOf_obligation : Type := forall G A B M N ext1 ext0, tr G (dof ext1 (app (app of A) M)) -> tr G (dof ext0 (app (app of B) N)) -> tr G (dof triv (app (app of (app (app prod A) B)) (ppair M N))).
Definition prodIntroEq_obligation : Type := forall G A B M M' N N' ext1 ext0, tr G (dof ext1 (app (app (app eq A) M) M')) -> tr G (dof ext0 (app (app (app eq B) N) N')) -> tr G (dof triv (app (app (app eq (app (app prod A) B)) (ppair M N)) (ppair M' N'))).
Definition prodIntro_obligation : Type := forall G A B M N, tr G (dof M A) -> tr G (dof N B) -> tr G (dof (ppair M N) (app (app prod A) B)).
Definition prodElim1Of_obligation : Type := forall G A B M ext0, tr G (dof ext0 (app (app of (app (app prod A) B)) M)) -> tr G (dof triv (app (app of A) (ppi1 M))).
Definition prodElim1Eq_obligation : Type := forall G A B M N ext0, tr G (dof ext0 (app (app (app eq (app (app prod A) B)) M) N)) -> tr G (dof triv (app (app (app eq A) (ppi1 M)) (ppi1 N))).
Definition prodElim1_obligation : Type := forall G A B M, tr G (dof M (app (app prod A) B)) -> tr G (dof (ppi1 M) A).
Definition prodElim2Of_obligation : Type := forall G A B M ext0, tr G (dof ext0 (app (app of (app (app prod A) B)) M)) -> tr G (dof triv (app (app of B) (ppi2 M))).
Definition prodElim2Eq_obligation : Type := forall G A B M N ext0, tr G (dof ext0 (app (app (app eq (app (app prod A) B)) M) N)) -> tr G (dof triv (app (app (app eq B) (ppi2 M)) (ppi2 N))).
Definition prodElim2_obligation : Type := forall G A B M, tr G (dof M (app (app prod A) B)) -> tr G (dof (ppi2 M) B).
Definition prodEta_obligation : Type := forall G A B M ext0, tr G (dof ext0 (app (app of (app (app prod A) B)) M)) -> tr G (dof triv (app (app (app eq (app (app prod A) B)) M) (ppair (ppi1 M) (ppi2 M)))).
Definition prodExt_obligation : Type := forall G A B M N ext3 ext2 ext1 ext0, tr G (dof ext3 (app (app of (app (app prod A) B)) M)) -> tr G (dof ext2 (app (app of (app (app prod A) B)) N)) -> tr G (dof ext1 (app (app (app eq A) (ppi1 M)) (ppi1 N))) -> tr G (dof ext0 (app (app (app eq B) (ppi2 M)) (ppi2 N))) -> tr G (dof triv (app (app (app eq (app (app prod A) B)) M) N)).
Definition prodLeft_obligation : Type := forall G1 G2 A B C M, tr (List.app (substctx (dot (ppair (var 1) (var 0)) (sh 2)) G2) (cons (hyp_tm (subst (sh 1) B)) (cons (hyp_tm A) G1))) (dof M (subst (under (length G2) (dot (ppair (var 1) (var 0)) (sh 2))) C)) -> tr (List.app G2 (cons (hyp_tm (app (app prod A) B)) G1)) (dof (subst (under (length G2) (dot (ppi2 (var 0)) (dot (ppi1 (var 0)) (sh 1)))) M) C).
Definition prodFormInv1_obligation : Type := forall G A B ext0, tr G (dof ext0 (app istp (app (app prod A) B))) -> tr G (dof triv (app istp A)).
Definition prodFormInv2_obligation : Type := forall G A B ext1 ext0, tr G (dof ext1 (app istp (app (app prod A) B))) -> tr G (dof ext0 A) -> tr G (dof triv (app istp B)).
Definition unionForm_obligation : Type := forall G A B ext1 ext0, tr G (dof ext1 (app istp A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app istp B)) -> tr G (dof triv (app istp (app (app union A) (lam B)))).
Definition unionEq_obligation : Type := forall G A A' B B' ext1 ext0, tr G (dof ext1 (app (app eqtp A) A')) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app eqtp B) B')) -> tr G (dof triv (app (app eqtp (app (app union A) (lam B))) (app (app union A') (lam B')))).
Definition unionFormUniv_obligation : Type := forall G A B I ext1 ext0, tr G (dof ext1 (app (app of (app univ I)) A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app of (app univ (subst (sh 1) I))) B)) -> tr G (dof triv (app (app of (app univ I)) (app (app union A) (lam B)))).
Definition unionEqUniv_obligation : Type := forall G A A' B B' I ext1 ext0, tr G (dof ext1 (app (app (app eq (app univ I)) A) A')) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app (app eq (app univ (subst (sh 1) I))) B) B')) -> tr G (dof triv (app (app (app eq (app univ I)) (app (app union A) (lam B))) (app (app union A') (lam B')))).
Definition unionIntroOf_obligation : Type := forall G A B M N ext2 ext1 ext0, tr (cons (hyp_tm A) G) (dof ext2 (app istp B)) -> tr G (dof ext1 (app (app of A) M)) -> tr G (dof ext0 (app (app of (subst (dot M (sh 0)) B)) N)) -> tr G (dof triv (app (app of (app (app union A) (lam B))) N)).
Definition unionIntroEq_obligation : Type := forall G A B M N N' ext2 ext1 ext0, tr (cons (hyp_tm A) G) (dof ext2 (app istp B)) -> tr G (dof ext1 (app (app of A) M)) -> tr G (dof ext0 (app (app (app eq (subst (dot M (sh 0)) B)) N) N')) -> tr G (dof triv (app (app (app eq (app (app union A) (lam B))) N) N')).
Definition unionIntro_obligation : Type := forall G A B M ext1 ext0 N, tr (cons (hyp_tm A) G) (dof ext1 (app istp B)) -> tr G (dof ext0 (app (app of A) M)) -> tr G (dof N (subst (dot M (sh 0)) B)) -> tr G (dof N (app (app union A) (lam B))).
Definition unionElimOf_obligation : Type := forall G A B C M P ext1 ext0, tr (cons (hyp_tm B) (cons (hyp_tm A) G)) (dof ext1 (app (app of (subst (sh 2) C)) (subst (dot (var 0) (sh 2)) P))) -> tr G (dof ext0 (app (app of (app (app union A) (lam B))) M)) -> tr G (dof triv (app (app of C) (subst (dot M (sh 0)) P))).
Definition unionElimEq_obligation : Type := forall G A B C M N P Q ext1 ext0, tr (cons (hyp_tm B) (cons (hyp_tm A) G)) (dof ext1 (app (app (app eq (subst (sh 2) C)) (subst (dot (var 0) (sh 2)) P)) (subst (dot (var 0) (sh 2)) Q))) -> tr G (dof ext0 (app (app (app eq (app (app union A) (lam B))) M) N)) -> tr G (dof triv (app (app (app eq C) (subst (dot M (sh 0)) P)) (subst (dot N (sh 0)) Q))).
Definition unionElim_obligation : Type := forall G A B C M P ext0, hygiene (fun i => i <> 1) P -> tr (cons (hyp_tm B) (cons (hyp_tm A) G)) (dof P (subst (sh 2) C)) -> tr G (dof ext0 (app (app of (app (app union A) (lam B))) M)) -> tr G (dof (subst (dot M (dot triv (sh 0))) P) C).
Definition unionElimOfDep_obligation : Type := forall G A B C M P ext1 ext0, tr (cons (hyp_tm B) (cons (hyp_tm A) G)) (dof ext1 (app (app of (subst (dot (var 0) (sh 2)) C)) (subst (dot (var 0) (sh 2)) P))) -> tr G (dof ext0 (app (app of (app (app union A) (lam B))) M)) -> tr G (dof triv (app (app of (subst (dot M (sh 0)) C)) (subst (dot M (sh 0)) P))).
Definition unionElimEqDep_obligation : Type := forall G A B C M N P Q ext1 ext0, tr (cons (hyp_tm B) (cons (hyp_tm A) G)) (dof ext1 (app (app (app eq (subst (dot (var 0) (sh 2)) C)) (subst (dot (var 0) (sh 2)) P)) (subst (dot (var 0) (sh 2)) Q))) -> tr G (dof ext0 (app (app (app eq (app (app union A) (lam B))) M) N)) -> tr G (dof triv (app (app (app eq (subst (dot M (sh 0)) C)) (subst (dot M (sh 0)) P)) (subst (dot N (sh 0)) Q))).
Definition unionElimDep_obligation : Type := forall G A B C M P ext0, hygiene (fun i => i <> 1) P -> tr (cons (hyp_tm B) (cons (hyp_tm A) G)) (dof P (subst (dot (var 0) (sh 2)) C)) -> tr G (dof ext0 (app (app of (app (app union A) (lam B))) M)) -> tr G (dof (subst (dot M (dot triv (sh 0))) P) (subst (dot M (sh 0)) C)).
Definition unionElimIstype_obligation : Type := forall G A B C M ext1 ext0, tr (cons (hyp_tm B) (cons (hyp_tm A) G)) (dof ext1 (app istp (subst (dot (var 0) (sh 2)) C))) -> tr G (dof ext0 (app (app of (app (app union A) (lam B))) M)) -> tr G (dof triv (app istp (subst (dot M (sh 0)) C))).
Definition unionElimEqtype_obligation : Type := forall G A B C D M N ext1 ext0, tr (cons (hyp_tm B) (cons (hyp_tm A) G)) (dof ext1 (app (app eqtp (subst (dot (var 0) (sh 2)) C)) (subst (dot (var 0) (sh 2)) D))) -> tr G (dof ext0 (app (app (app eq (app (app union A) (lam B))) M) N)) -> tr G (dof triv (app (app eqtp (subst (dot M (sh 0)) C)) (subst (dot N (sh 0)) D))).
Definition sumForm_obligation : Type := forall G A B ext1 ext0, tr G (dof ext1 (app istp A)) -> tr G (dof ext0 (app istp B)) -> tr G (dof triv (app istp (app (app sum A) B))).
Definition sumEq_obligation : Type := forall G A A' B B' ext1 ext0, tr G (dof ext1 (app (app eqtp A) A')) -> tr G (dof ext0 (app (app eqtp B) B')) -> tr G (dof triv (app (app eqtp (app (app sum A) B)) (app (app sum A') B'))).
Definition sumFormUniv_obligation : Type := forall G A B I ext1 ext0, tr G (dof ext1 (app (app of (app univ I)) A)) -> tr G (dof ext0 (app (app of (app univ I)) B)) -> tr G (dof triv (app (app of (app univ I)) (app (app sum A) B))).
Definition sumEqUniv_obligation : Type := forall G A A' B B' I ext1 ext0, tr G (dof ext1 (app (app (app eq (app univ I)) A) A')) -> tr G (dof ext0 (app (app (app eq (app univ I)) B) B')) -> tr G (dof triv (app (app (app eq (app univ I)) (app (app sum A) B)) (app (app sum A') B'))).
Definition sumSub_obligation : Type := forall G A A' B B' ext1 ext0, tr G (dof ext1 (app (app subtype A) A')) -> tr G (dof ext0 (app (app subtype B) B')) -> tr G (dof triv (app (app subtype (app (app sum A) B)) (app (app sum A') B'))).
Definition sumIntro1Of_obligation : Type := forall G A B M ext1 ext0, tr G (dof ext1 (app istp B)) -> tr G (dof ext0 (app (app of A) M)) -> tr G (dof triv (app (app of (app (app sum A) B)) (app inl M))).
Definition sumIntro1Eq_obligation : Type := forall G A B M N ext1 ext0, tr G (dof ext1 (app istp B)) -> tr G (dof ext0 (app (app (app eq A) M) N)) -> tr G (dof triv (app (app (app eq (app (app sum A) B)) (app inl M)) (app inl N))).
Definition sumIntro1_obligation : Type := forall G A B ext0 M, tr G (dof ext0 (app istp B)) -> tr G (dof M A) -> tr G (dof (app inl M) (app (app sum A) B)).
Definition sumIntro2Of_obligation : Type := forall G A B M ext1 ext0, tr G (dof ext1 (app istp A)) -> tr G (dof ext0 (app (app of B) M)) -> tr G (dof triv (app (app of (app (app sum A) B)) (app inr M))).
Definition sumIntro2Eq_obligation : Type := forall G A B M N ext1 ext0, tr G (dof ext1 (app istp A)) -> tr G (dof ext0 (app (app (app eq B) M) N)) -> tr G (dof triv (app (app (app eq (app (app sum A) B)) (app inr M)) (app inr N))).
Definition sumIntro2_obligation : Type := forall G A B ext0 M, tr G (dof ext0 (app istp A)) -> tr G (dof M B) -> tr G (dof (app inr M) (app (app sum A) B)).
Definition sumElimOf_obligation : Type := forall G A B C M P R ext2 ext1 ext0, tr G (dof ext2 (app (app of (app (app sum A) B)) M)) -> tr (cons (hyp_tm A) G) (dof ext1 (app (app of (subst (dot (app inl (var 0)) (sh 1)) C)) P)) -> tr (cons (hyp_tm B) G) (dof ext0 (app (app of (subst (dot (app inr (var 0)) (sh 1)) C)) R)) -> tr G (dof triv (app (app of (subst (dot M (sh 0)) C)) (app (app (app sum_case M) (lam P)) (lam R)))).
Definition sumElimOfNondep_obligation : Type := forall G A B C M P R ext2 ext1 ext0, tr G (dof ext2 (app (app of (app (app sum A) B)) M)) -> tr (cons (hyp_tm A) G) (dof ext1 (app (app of (subst (sh 1) C)) P)) -> tr (cons (hyp_tm B) G) (dof ext0 (app (app of (subst (sh 1) C)) R)) -> tr G (dof triv (app (app of C) (app (app (app sum_case M) (lam P)) (lam R)))).
Definition sumElimEq_obligation : Type := forall G A B C M N P Q R S ext2 ext1 ext0, tr G (dof ext2 (app (app (app eq (app (app sum A) B)) M) N)) -> tr (cons (hyp_tm A) G) (dof ext1 (app (app (app eq (subst (dot (app inl (var 0)) (sh 1)) C)) P) Q)) -> tr (cons (hyp_tm B) G) (dof ext0 (app (app (app eq (subst (dot (app inr (var 0)) (sh 1)) C)) R) S)) -> tr G (dof triv (app (app (app eq (subst (dot M (sh 0)) C)) (app (app (app sum_case M) (lam P)) (lam R))) (app (app (app sum_case N) (lam Q)) (lam S)))).
Definition sumElim_obligation : Type := forall G A B C M ext0 P R, tr G (dof ext0 (app (app of (app (app sum A) B)) M)) -> tr (cons (hyp_tm A) G) (dof P (subst (dot (app inl (var 0)) (sh 1)) C)) -> tr (cons (hyp_tm B) G) (dof R (subst (dot (app inr (var 0)) (sh 1)) C)) -> tr G (dof (app (app (app sum_case M) (lam P)) (lam R)) (subst (dot M (sh 0)) C)).
Definition sumElimNondep_obligation : Type := forall G A B C M P R, tr G (dof M (app (app sum A) B)) -> tr (cons (hyp_tm A) G) (dof P (subst (sh 1) C)) -> tr (cons (hyp_tm B) G) (dof R (subst (sh 1) C)) -> tr G (dof (app (app (app sum_case M) (lam P)) (lam R)) C).
Definition sumElimIstype_obligation : Type := forall G A B C E M ext2 ext1 ext0, tr G (dof ext2 (app (app of (app (app sum A) B)) M)) -> tr (cons (hyp_tm A) G) (dof ext1 (app istp C)) -> tr (cons (hyp_tm B) G) (dof ext0 (app istp E)) -> tr G (dof triv (app istp (app (app (app sum_case M) (lam C)) (lam E)))).
Definition sumElimEqtype_obligation : Type := forall G A B C D E F M N ext2 ext1 ext0, tr G (dof ext2 (app (app (app eq (app (app sum A) B)) M) N)) -> tr (cons (hyp_tm A) G) (dof ext1 (app (app eqtp C) D)) -> tr (cons (hyp_tm B) G) (dof ext0 (app (app eqtp E) F)) -> tr G (dof triv (app (app eqtp (app (app (app sum_case M) (lam C)) (lam E))) (app (app (app sum_case N) (lam D)) (lam F)))).
Definition sumContradiction_obligation : Type := forall G A B C M N ext0, tr G (dof ext0 (app (app (app eq (app (app sum A) B)) (app inl M)) (app inr N))) -> tr G (dof triv C).
Definition sumInjection1_obligation : Type := forall G A B M N ext0, tr G (dof ext0 (app (app (app eq (app (app sum A) B)) (app inl M)) (app inl N))) -> tr G (dof triv (app (app (app eq A) M) N)).
Definition sumInjection2_obligation : Type := forall G A B M N ext0, tr G (dof ext0 (app (app (app eq (app (app sum A) B)) (app inr M)) (app inr N))) -> tr G (dof triv (app (app (app eq B) M) N)).
Definition sum_caseType_obligation : Type := forall G, tr G (dof triv (app (app of (app (app intersect level) (lam (app (app intersect (app univ (var 0))) (lam (app (app intersect (app univ (var 1))) (lam (app (app intersect (app univ (var 2))) (lam (app (app arrow (app (app sum (var 2)) (var 1))) (app (app arrow (app (app arrow (var 2)) (var 0))) (app (app arrow (app (app arrow (var 1)) (var 0))) (var 0))))))))))))) sum_case)).
Definition sumFormInv1_obligation : Type := forall G A B ext0, tr G (dof ext0 (app istp (app (app sum A) B))) -> tr G (dof triv (app istp A)).
Definition sumFormInv2_obligation : Type := forall G A B ext0, tr G (dof ext0 (app istp (app (app sum A) B))) -> tr G (dof triv (app istp B)).
Definition futureKind_obligation : Type := forall G I K ext1 ext0, tr G (dof ext1 (app (app of level) I)) -> tr (promote G) (dof ext0 (app (app of (app kind I)) K)) -> tr G (dof triv (app (app of (app kind I)) (app future K))).
Definition futureKindEq_obligation : Type := forall G I K L ext1 ext0, tr G (dof ext1 (app (app of level) I)) -> tr (promote G) (dof ext0 (app (app (app eq (app kind I)) K) L)) -> tr G (dof triv (app (app (app eq (app kind I)) (app future K)) (app future L))).
Definition futureForm_obligation : Type := forall G A ext0, tr (promote G) (dof ext0 (app istp A)) -> tr G (dof triv (app istp (app future A))).
Definition futureEq_obligation : Type := forall G A B ext0, tr (promote G) (dof ext0 (app (app eqtp A) B)) -> tr G (dof triv (app (app eqtp (app future A)) (app future B))).
Definition futureFormUniv_obligation : Type := forall G A I ext1 ext0, tr G (dof ext1 (app (app of level) I)) -> tr (promote G) (dof ext0 (app (app of (app univ I)) A)) -> tr G (dof triv (app (app of (app univ I)) (app future A))).
Definition futureEqUniv_obligation : Type := forall G A B I ext1 ext0, tr G (dof ext1 (app (app of level) I)) -> tr (promote G) (dof ext0 (app (app (app eq (app univ I)) A) B)) -> tr G (dof triv (app (app (app eq (app univ I)) (app future A)) (app future B))).
Definition futureSub_obligation : Type := forall G A B ext0, tr (promote G) (dof ext0 (app (app subtype A) B)) -> tr G (dof triv (app (app subtype (app future A)) (app future B))).
Definition futureIntroOf_obligation : Type := forall G A M ext0, tr (promote G) (dof ext0 (app (app of A) M)) -> tr G (dof triv (app (app of (app future A)) (next M))).
Definition futureIntroEq_obligation : Type := forall G A M N ext0, tr (promote G) (dof ext0 (app (app (app eq A) M) N)) -> tr G (dof triv (app (app (app eq (app future A)) (next M)) (next N))).
Definition futureIntro_obligation : Type := forall G A M, tr (promote G) (dof M A) -> tr G (dof (next M) (app future A)).
Definition futureElimOf_obligation : Type := forall G A B M P ext2 ext1 ext0, tr (promote G) (dof ext2 (app istp A)) -> tr G (dof ext1 (app (app of (app future A)) M)) -> tr (cons (hyp_tml A) G) (dof ext0 (app (app of B) P)) -> tr G (dof triv (app (app of (subst (dot (prev M) (sh 0)) B)) (subst (dot (prev M) (sh 0)) P))).
Definition futureElimOfLetnext_obligation : Type := forall G A B M P ext2 ext1 ext0, tr (promote G) (dof ext2 (app istp A)) -> tr G (dof ext1 (app (app of (app future A)) M)) -> tr (cons (hyp_tml A) G) (dof ext0 (app (app of B) P)) -> tr G (dof triv (app (app of (subst (dot (prev M) (sh 0)) B)) (app (app letnext M) (lam P)))).
Definition futureElimOfLetnextNondep_obligation : Type := forall G A B M P ext2 ext1 ext0, tr (promote G) (dof ext2 (app istp A)) -> tr G (dof ext1 (app (app of (app future A)) M)) -> tr (cons (hyp_tml A) G) (dof ext0 (app (app of (subst (sh 1) B)) P)) -> tr G (dof triv (app (app of B) (app (app letnext M) (lam P)))).
Definition futureElimEq_obligation : Type := forall G A B M N P Q ext2 ext1 ext0, tr (promote G) (dof ext2 (app istp A)) -> tr G (dof ext1 (app (app (app eq (app future A)) M) N)) -> tr (cons (hyp_tml A) G) (dof ext0 (app (app (app eq B) P) Q)) -> tr G (dof triv (app (app (app eq (subst (dot (prev M) (sh 0)) B)) (subst (dot (prev M) (sh 0)) P)) (subst (dot (prev N) (sh 0)) Q))).
Definition futureElim_obligation : Type := forall G A B M ext1 ext0 P, tr (promote G) (dof ext1 (app istp A)) -> tr G (dof ext0 (app (app of (app future A)) M)) -> tr (cons (hyp_tml A) G) (dof P B) -> tr G (dof (subst (dot (prev M) (sh 0)) P) (subst (dot (prev M) (sh 0)) B)).
Definition futureElimIstype_obligation : Type := forall G A B M ext2 ext1 ext0, tr (promote G) (dof ext2 (app istp A)) -> tr G (dof ext1 (app (app of (app future A)) M)) -> tr (cons (hyp_tml A) G) (dof ext0 (app istp B)) -> tr G (dof triv (app istp (subst (dot (prev M) (sh 0)) B))).
Definition futureElimIstypeLetnext_obligation : Type := forall G A B M ext2 ext1 ext0, tr (promote G) (dof ext2 (app istp A)) -> tr G (dof ext1 (app (app of (app future A)) M)) -> tr (cons (hyp_tml A) G) (dof ext0 (app istp B)) -> tr G (dof triv (app istp (app (app letnext M) (lam B)))).
Definition futureElimEqtype_obligation : Type := forall G A B C M N ext2 ext1 ext0, tr (promote G) (dof ext2 (app istp A)) -> tr G (dof ext1 (app (app (app eq (app future A)) M) N)) -> tr (cons (hyp_tml A) G) (dof ext0 (app (app eqtp B) C)) -> tr G (dof triv (app (app eqtp (subst (dot (prev M) (sh 0)) B)) (subst (dot (prev N) (sh 0)) C))).
Definition futureEta_obligation : Type := forall G A M ext0, tr G (dof ext0 (app (app of (app future A)) M)) -> tr G (dof triv (app (app (app eq (app future A)) M) (next (prev M)))).
Definition futureExt_obligation : Type := forall G A M N ext2 ext1 ext0, tr G (dof ext2 (app (app of (app future A)) M)) -> tr G (dof ext1 (app (app of (app future A)) N)) -> tr (promote G) (dof ext0 (app (app (app eq A) (prev M)) (prev N))) -> tr G (dof triv (app (app (app eq (app future A)) M) N)).
Definition futureLeft_obligation : Type := forall G1 G2 A B ext0 M, tr ((promote G1)) (dof ext0 (app istp A)) -> tr (List.app (substctx (dot (next (var 0)) (sh 1)) G2) (cons (hyp_tml A) G1)) (dof M (subst (under (length G2) (dot (next (var 0)) (sh 1))) B)) -> tr (List.app G2 (cons (hyp_tm (app future A)) G1)) (dof (subst (under (length G2) (dot (prev (var 0)) (sh 1))) M) B).
Definition futureInjection_obligation : Type := forall G A M N ext1 ext0, tr (promote G) (dof ext1 (app istp A)) -> tr G (dof ext0 (app (app (app eq (app future A)) (next M)) (next N))) -> tr G (dof (next triv) (app future (app (app (app eq A) M) N))).
Definition recKind_obligation : Type := forall G I K ext1 ext0, tr G (dof ext1 (app (app of level) I)) -> tr (cons (hyp_tml (app kind I)) G) (dof ext0 (app (app of (app kind (subst (sh 1) I))) K)) -> tr G (dof triv (app (app of (app kind I)) (app rec (lam K)))).
Definition recKindEq_obligation : Type := forall G I K L ext1 ext0, tr G (dof ext1 (app (app of level) I)) -> tr (cons (hyp_tml (app kind I)) G) (dof ext0 (app (app (app eq (app kind (subst (sh 1) I))) K) L)) -> tr G (dof triv (app (app (app eq (app kind I)) (app rec (lam K))) (app rec (lam L)))).
Definition recForm_obligation : Type := forall G A ext0, tr (cons hyp_tpl G) (dof ext0 (app istp A)) -> tr G (dof triv (app istp (app rec (lam A)))).
Definition recEq_obligation : Type := forall G A B ext0, tr (cons hyp_tpl G) (dof ext0 (app (app eqtp A) B)) -> tr G (dof triv (app (app eqtp (app rec (lam A))) (app rec (lam B)))).
Definition recFormUniv_obligation : Type := forall G A I ext1 ext0, tr G (dof ext1 (app (app of level) I)) -> tr (cons (hyp_tml (app univ I)) G) (dof ext0 (app (app of (app univ (subst (sh 1) I))) A)) -> tr G (dof triv (app (app of (app univ I)) (app rec (lam A)))).
Definition recEqUniv_obligation : Type := forall G A B I ext1 ext0, tr G (dof ext1 (app (app of level) I)) -> tr (cons (hyp_tml (app univ I)) G) (dof ext0 (app (app (app eq (app univ (subst (sh 1) I))) A) B)) -> tr G (dof triv (app (app (app eq (app univ I)) (app rec (lam A))) (app rec (lam B)))).
Definition recUnroll_obligation : Type := forall G A ext0, tr (cons hyp_tpl G) (dof ext0 (app istp A)) -> tr G (dof triv (app (app eqtp (app rec (lam A))) (subst (dot (app rec (lam A)) (sh 0)) A))).
Definition recUnrollUniv_obligation : Type := forall G A I ext1 ext0, tr G (dof ext1 (app (app of level) I)) -> tr (cons (hyp_tml (app univ I)) G) (dof ext0 (app (app of (app univ (subst (sh 1) I))) A)) -> tr G (dof triv (app (app (app eq (app univ I)) (app rec (lam A))) (subst (dot (app rec (lam A)) (sh 0)) A))).
Definition recBisimilar_obligation : Type := forall G A B ext1 ext0, tr (cons hyp_tpl G) (dof ext1 (app istp A)) -> tr G (dof ext0 (app (app eqtp B) (subst (dot B (sh 0)) A))) -> tr G (dof triv (app (app eqtp B) (app rec (lam A)))).
Definition muForm_obligation : Type := forall G A ext1 ext0, tr (cons hyp_tp G) (dof ext1 (app istp A)) -> tr G (dof ext0 (app positive (lam A))) -> tr G (dof triv (app istp (app mu (lam A)))).
Definition muEq_obligation : Type := forall G A B ext2 ext1 ext0, tr (cons hyp_tp G) (dof ext2 (app (app eqtp A) B)) -> tr G (dof ext1 (app positive (lam A))) -> tr G (dof ext0 (app positive (lam B))) -> tr G (dof triv (app (app eqtp (app mu (lam A))) (app mu (lam B)))).
Definition muFormUniv_obligation : Type := forall G A I ext2 ext1 ext0, tr G (dof ext2 (app (app of level) I)) -> tr (cons (hyp_tm (app univ I)) G) (dof ext1 (app (app of (app univ (subst (sh 1) I))) A)) -> tr G (dof ext0 (app positive (lam A))) -> tr G (dof triv (app (app of (app univ I)) (app mu (lam A)))).
Definition muEqUniv_obligation : Type := forall G A B I ext3 ext2 ext1 ext0, tr G (dof ext3 (app (app of level) I)) -> tr (cons (hyp_tm (app univ I)) G) (dof ext2 (app (app (app eq (app univ (subst (sh 1) I))) A) B)) -> tr G (dof ext1 (app positive (lam A))) -> tr G (dof ext0 (app positive (lam B))) -> tr G (dof triv (app (app (app eq (app univ I)) (app mu (lam A))) (app mu (lam B)))).
Definition muUnroll_obligation : Type := forall G A ext1 ext0, tr (cons hyp_tp G) (dof ext1 (app istp A)) -> tr G (dof ext0 (app positive (lam A))) -> tr G (dof (ppair triv triv) (app (app eeqtp (app mu (lam A))) (subst (dot (app mu (lam A)) (sh 0)) A))).
Definition muUnrollUniv_obligation : Type := forall G A I ext2 ext1 ext0, tr G (dof ext2 (app (app of level) I)) -> tr (cons (hyp_tm (app univ I)) G) (dof ext1 (app (app of (app univ (subst (sh 1) I))) A)) -> tr G (dof ext0 (app positive (lam A))) -> tr G (dof (ppair triv triv) (app (app eeqtp (app mu (lam A))) (subst (dot (app mu (lam A)) (sh 0)) A))).
Definition muInd_obligation : Type := forall G A B M ext2 ext1 N ext0, hygiene (fun i => i <> 3) N -> tr (cons hyp_tp G) (dof ext2 (app istp A)) -> tr G (dof ext1 (app positive (lam A))) -> tr (cons (hyp_tm (app (app pi (var 2)) (lam (subst (dot (var 0) (sh 4)) B)))) (cons (hyp_tm (app (app subtype (var 1)) (app mu (lam (subst (dot (var 0) (sh 3)) A))))) (cons (hyp_tm A) (cons hyp_tp G)))) (dof N (subst (dot (var 2) (sh 4)) B)) -> tr G (dof ext0 (app (app of (app mu (lam A))) M)) -> tr G (dof (app (app theta (lam (lam (subst (dot (var 1) (dot triv (dot (var 0) (dot triv (sh 2))))) N)))) M) (subst (dot M (sh 0)) B)).
Definition muIndUniv_obligation : Type := forall G A B I M ext3 ext2 ext1 N ext0, hygiene (fun i => i <> 3) N -> tr G (dof ext3 (app (app of level) I)) -> tr (cons (hyp_tm (app univ I)) G) (dof ext2 (app (app of (app univ (subst (sh 1) I))) A)) -> tr G (dof ext1 (app positive (lam A))) -> tr (cons (hyp_tm (app (app pi (var 2)) (lam (subst (dot (var 0) (sh 4)) B)))) (cons (hyp_tm (app (app subtype (var 1)) (app mu (lam (subst (dot (var 0) (sh 3)) A))))) (cons (hyp_tm A) (cons (hyp_tm (app univ I)) G)))) (dof N (app (app prod (subst (dot (var 2) (sh 4)) B)) (app (app of (app univ (subst (sh 4) I))) (subst (dot (var 2) (sh 4)) B)))) -> tr G (dof ext0 (app (app of (app mu (lam A))) M)) -> tr G (dof (app (app theta (lam (lam (ppi1 (subst (dot (var 1) (dot triv (dot (var 0) (dot triv (sh 2))))) N))))) M) (subst (dot M (sh 0)) B)).
Definition voidForm_obligation : Type := forall G, tr G (dof triv (app istp void)).
Definition voidEq_obligation : Type := forall G, tr G (dof triv (app (app eqtp void) void)).
Definition voidFormUniv_obligation : Type := forall G I ext0, tr G (dof ext0 (app (app of level) I)) -> tr G (dof triv (app (app of (app univ I)) void)).
Definition voidEqUniv_obligation : Type := forall G I ext0, tr G (dof ext0 (app (app of level) I)) -> tr G (dof triv (app (app (app eq (app univ I)) void) void)).
Definition voidElim_obligation : Type := forall G A ext0, tr G (dof ext0 void) -> tr G (dof triv A).
Definition voidSub_obligation : Type := forall G A ext0, tr G (dof ext0 (app istp A)) -> tr G (dof triv (app (app subtype void) A)).
Definition abortType_obligation : Type := forall G, tr G (dof triv (app (app of (app (app intersect level) (lam (app (app intersect (app univ (var 0))) (lam (app (app arrow void) (var 0))))))) abort)).
Definition unitKind_obligation : Type := forall G I ext0, tr G (dof ext0 (app (app of level) I)) -> tr G (dof triv (app (app of (app kind I)) unit)).
Definition unitKindEq_obligation : Type := forall G I ext0, tr G (dof ext0 (app (app of level) I)) -> tr G (dof triv (app (app (app eq (app kind I)) unit) unit)).
Definition unitForm_obligation : Type := forall G, tr G (dof triv (app istp unit)).
Definition unitEq_obligation : Type := forall G, tr G (dof triv (app (app eqtp unit) unit)).
Definition unitFormUniv_obligation : Type := forall G I ext0, tr G (dof ext0 (app (app of level) I)) -> tr G (dof triv (app (app of (app univ I)) unit)).
Definition unitEqUniv_obligation : Type := forall G I ext0, tr G (dof ext0 (app (app of level) I)) -> tr G (dof triv (app (app (app eq (app univ I)) unit) unit)).
Definition unitIntroOf_obligation : Type := forall G, tr G (dof triv (app (app of unit) triv)).
Definition unitIntro_obligation : Type := forall G, tr G (dof triv unit).
Definition unitExt_obligation : Type := forall G M N ext1 ext0, tr G (dof ext1 (app (app of unit) M)) -> tr G (dof ext0 (app (app of unit) N)) -> tr G (dof triv (app (app (app eq unit) M) N)).
Definition unitLeft_obligation : Type := forall G1 G2 B M, tr (List.app (substctx (dot triv (sh 0)) G2) G1) (dof M (subst (under (length G2) (dot triv (sh 0))) B)) -> tr (List.app G2 (cons (hyp_tm unit) G1)) (dof (subst (under (length G2) (sh 1)) M) B).
Definition boolForm_obligation : Type := forall G, tr G (dof triv (app istp bool)).
Definition boolEq_obligation : Type := forall G, tr G (dof triv (app (app eqtp bool) bool)).
Definition boolFormUniv_obligation : Type := forall G I ext0, tr G (dof ext0 (app (app of level) I)) -> tr G (dof triv (app (app of (app univ I)) bool)).
Definition boolEqUniv_obligation : Type := forall G I ext0, tr G (dof ext0 (app (app of level) I)) -> tr G (dof triv (app (app (app eq (app univ I)) bool) bool)).
Definition boolIntro1Of_obligation : Type := forall G, tr G (dof triv (app (app of bool) true)).
Definition boolIntro2Of_obligation : Type := forall G, tr G (dof triv (app (app of bool) false)).
Definition boolElimOf_obligation : Type := forall G A M P R ext2 ext1 ext0, tr G (dof ext2 (app (app of bool) M)) -> tr G (dof ext1 (app (app of (subst (dot true (sh 0)) A)) P)) -> tr G (dof ext0 (app (app of (subst (dot false (sh 0)) A)) R)) -> tr G (dof triv (app (app of (subst (dot M (sh 0)) A)) (app (app (app ite M) P) R))).
Definition boolElimOfNondep_obligation : Type := forall G A M P R ext2 ext1 ext0, tr G (dof ext2 (app (app of bool) M)) -> tr G (dof ext1 (app (app of A) P)) -> tr G (dof ext0 (app (app of A) R)) -> tr G (dof triv (app (app of A) (app (app (app ite M) P) R))).
Definition boolElimEq_obligation : Type := forall G A M N P Q R S ext2 ext1 ext0, tr G (dof ext2 (app (app (app eq bool) M) N)) -> tr G (dof ext1 (app (app (app eq (subst (dot true (sh 0)) A)) P) Q)) -> tr G (dof ext0 (app (app (app eq (subst (dot false (sh 0)) A)) R) S)) -> tr G (dof triv (app (app (app eq (subst (dot M (sh 0)) A)) (app (app (app ite M) P) R)) (app (app (app ite N) Q) S))).
Definition boolElim_obligation : Type := forall G A M ext0 P R, tr G (dof ext0 (app (app of bool) M)) -> tr G (dof P (subst (dot true (sh 0)) A)) -> tr G (dof R (subst (dot false (sh 0)) A)) -> tr G (dof (app (app (app ite M) P) R) (subst (dot M (sh 0)) A)).
Definition boolElimIstype_obligation : Type := forall G A C M ext2 ext1 ext0, tr G (dof ext2 (app (app of bool) M)) -> tr G (dof ext1 (app istp A)) -> tr G (dof ext0 (app istp C)) -> tr G (dof triv (app istp (app (app (app ite M) A) C))).
Definition boolElimEqtype_obligation : Type := forall G A B C D M N ext2 ext1 ext0, tr G (dof ext2 (app (app (app eq bool) M) N)) -> tr G (dof ext1 (app (app eqtp A) B)) -> tr G (dof ext0 (app (app eqtp C) D)) -> tr G (dof triv (app (app eqtp (app (app (app ite M) A) C)) (app (app (app ite N) B) D))).
Definition boolLeft_obligation : Type := forall G1 G2 A M N, tr (List.app (substctx (dot true (sh 0)) G2) G1) (dof M (subst (under (length G2) (dot true (sh 0))) A)) -> tr (List.app (substctx (dot false (sh 0)) G2) G1) (dof N (subst (under (length G2) (dot false (sh 0))) A)) -> tr (List.app G2 (cons (hyp_tm bool) G1)) (dof (app (app (app ite (var (length G2))) (subst (under (length G2) (sh 1)) M)) (subst (under (length G2) (sh 1)) N)) A).
Definition boolContradiction_obligation : Type := forall G A ext0, tr G (dof ext0 (app (app (app eq bool) true) false)) -> tr G (dof triv A).
Definition iteType_obligation : Type := forall G, tr G (dof triv (app (app of (app (app intersect level) (lam (app (app intersect (app univ (var 0))) (lam (app (app arrow bool) (app (app arrow (var 0)) (app (app arrow (var 0)) (var 0))))))))) ite)).
Definition natForm_obligation : Type := forall G, tr G (dof triv (app istp nat)).
Definition natEq_obligation : Type := forall G, tr G (dof triv (app (app eqtp nat) nat)).
Definition natFormUniv_obligation : Type := forall G I ext0, tr G (dof ext0 (app (app of level) I)) -> tr G (dof triv (app (app of (app univ I)) nat)).
Definition natEqUniv_obligation : Type := forall G I ext0, tr G (dof ext0 (app (app of level) I)) -> tr G (dof triv (app (app (app eq (app univ I)) nat) nat)).
Definition natElimEq_obligation : Type := forall G A M N P Q R S ext2 ext1 ext0, tr G (dof ext2 (app (app (app eq nat) M) N)) -> tr G (dof ext1 (app (app (app eq (subst (dot zero (sh 0)) A)) P) Q)) -> tr (cons (hyp_tm nat) G) (dof ext0 (app (app (app eq (subst (dot (app succ (var 0)) (sh 1)) A)) R) S)) -> tr G (dof triv (app (app (app eq (subst (dot M (sh 0)) A)) (app (app (app nat_case M) P) (lam R))) (app (app (app nat_case N) Q) (lam S)))).
Definition natElimEqtype_obligation : Type := forall G A B C D M N ext2 ext1 ext0, tr G (dof ext2 (app (app (app eq nat) M) N)) -> tr G (dof ext1 (app (app eqtp A) B)) -> tr (cons (hyp_tm nat) G) (dof ext0 (app (app eqtp C) D)) -> tr G (dof triv (app (app eqtp (app (app (app nat_case M) A) (lam C))) (app (app (app nat_case N) B) (lam D)))).
Definition natUnroll_obligation : Type := forall G, tr G (dof (ppair triv triv) (app (app eeqtp nat) (app (app sum unit) nat))).
Definition natContradiction_obligation : Type := forall G A M ext0, tr G (dof ext0 (app (app (app eq nat) zero) (app succ M))) -> tr G (dof triv A).
Definition natInjection_obligation : Type := forall G M N ext0, tr G (dof ext0 (app (app (app eq nat) (app succ M)) (app succ N))) -> tr G (dof triv (app (app (app eq nat) M) N)).
Definition zeroType_obligation : Type := forall G, tr G (dof triv (app (app of nat) zero)).
Definition succType_obligation : Type := forall G, tr G (dof triv (app (app of (app (app arrow nat) nat)) succ)).
Definition univKind_obligation : Type := forall G I J ext0, tr G (dof ext0 (app (app (app eq level) J) I)) -> tr G (dof triv (app (app of (app kind I)) (app univ J))).
Definition univKindEq_obligation : Type := forall G I J K ext1 ext0, tr G (dof ext1 (app (app (app eq level) J) K)) -> tr G (dof ext0 (app (app (app eq level) J) I)) -> tr G (dof triv (app (app (app eq (app kind I)) (app univ J)) (app univ K))).
Definition univForm_obligation : Type := forall G I ext0, tr G (dof ext0 (app (app of level) I)) -> tr G (dof triv (app istp (app univ I))).
Definition univEq_obligation : Type := forall G I J ext0, tr G (dof ext0 (app (app (app eq level) I) J)) -> tr G (dof triv (app (app eqtp (app univ I)) (app univ J))).
Definition univFormUniv_obligation : Type := forall G I J ext0, tr G (dof ext0 (app (app lleq (app lsucc J)) I)) -> tr G (dof triv (app (app of (app univ I)) (app univ J))).
Definition univFormUnivSucc_obligation : Type := forall G I ext0, tr G (dof ext0 (app (app of level) I)) -> tr G (dof triv (app (app of (app univ (app lsucc I))) (app univ I))).
Definition univEqUniv_obligation : Type := forall G I J K ext1 ext0, tr G (dof ext1 (app (app (app eq level) J) K)) -> tr G (dof ext0 (app (app lleq (app lsucc J)) I)) -> tr G (dof triv (app (app (app eq (app univ I)) (app univ J)) (app univ K))).
Definition univCumulativeOf_obligation : Type := forall G A I J ext1 ext0, tr G (dof ext1 (app (app of (app univ I)) A)) -> tr G (dof ext0 (app (app lleq I) J)) -> tr G (dof triv (app (app of (app univ J)) A)).
Definition univCumulativeEq_obligation : Type := forall G A B I J ext1 ext0, tr G (dof ext1 (app (app (app eq (app univ I)) A) B)) -> tr G (dof ext0 (app (app lleq I) J)) -> tr G (dof triv (app (app (app eq (app univ J)) A) B)).
Definition univCumulativeSuccOf_obligation : Type := forall G A I ext0, tr G (dof ext0 (app (app of (app univ I)) A)) -> tr G (dof triv (app (app of (app univ (app lsucc I))) A)).
Definition univSub_obligation : Type := forall G I J ext0, tr G (dof ext0 (app (app lleq I) J)) -> tr G (dof triv (app (app subtype (app univ I)) (app univ J))).
Definition univForgetOf_obligation : Type := forall G A I ext0, tr G (dof ext0 (app (app of (app univ I)) A)) -> tr G (dof triv (app istp A)).
Definition univForgetEq_obligation : Type := forall G A B I ext0, tr G (dof ext0 (app (app (app eq (app univ I)) A) B)) -> tr G (dof triv (app (app eqtp A) B)).
Definition univIntroEqtype_obligation : Type := forall G A B I ext2 ext1 ext0, tr G (dof ext2 (app (app eqtp A) B)) -> tr G (dof ext1 (app (app of (app univ I)) A)) -> tr G (dof ext0 (app (app of (app univ I)) B)) -> tr G (dof triv (app (app (app eq (app univ I)) A) B)).
Definition univFormInv_obligation : Type := forall G I ext0, tr G (dof ext0 (app istp (app univ I))) -> tr G (dof triv (app (app of level) I)).
Definition kindForm_obligation : Type := forall G I ext0, tr G (dof ext0 (app (app of level) I)) -> tr G (dof triv (app istp (app kind I))).
Definition kindEq_obligation : Type := forall G I J ext0, tr G (dof ext0 (app (app (app eq level) I) J)) -> tr G (dof triv (app (app eqtp (app kind I)) (app kind J))).
Definition kindFormUniv_obligation : Type := forall G I K ext0, tr G (dof ext0 (app (app lleq (app lsucc (app lsucc I))) K)) -> tr G (dof triv (app (app of (app univ K)) (app kind I))).
Definition kindEqUniv_obligation : Type := forall G I J K ext1 ext0, tr G (dof ext1 (app (app (app eq level) I) J)) -> tr G (dof ext0 (app (app lleq (app lsucc (app lsucc I))) K)) -> tr G (dof triv (app (app (app eq (app univ K)) (app kind I)) (app kind J))).
Definition kindForgetOf_obligation : Type := forall G A I ext0, tr G (dof ext0 (app (app of (app kind I)) A)) -> tr G (dof triv (app (app of (app univ (app lsucc I))) A)).
Definition kindForgetEq_obligation : Type := forall G A B I ext0, tr G (dof ext0 (app (app (app eq (app kind I)) A) B)) -> tr G (dof triv (app (app (app eq (app univ (app lsucc I))) A) B)).
Definition kindUnivSub_obligation : Type := forall G I J ext0, tr G (dof ext0 (app (app lleq (app lsucc I)) J)) -> tr G (dof triv (app (app subtype (app kind I)) (app univ J))).
Definition levelForm_obligation : Type := forall G, tr G (dof triv (app istp level)).
Definition levelEq_obligation : Type := forall G, tr G (dof triv (app (app eqtp level) level)).
Definition levelFormUniv_obligation : Type := forall G I ext0, tr G (dof ext0 (app (app of level) I)) -> tr G (dof triv (app (app of (app univ I)) level)).
Definition levelEqUniv_obligation : Type := forall G I ext0, tr G (dof ext0 (app (app of level) I)) -> tr G (dof triv (app (app (app eq (app univ I)) level) level)).
Definition lleqForm_obligation : Type := forall G I J ext1 ext0, tr G (dof ext1 (app (app of level) I)) -> tr G (dof ext0 (app (app of level) J)) -> tr G (dof triv (app istp (app (app lleq I) J))).
Definition lleqEq_obligation : Type := forall G I I' J J' ext1 ext0, tr G (dof ext1 (app (app (app eq level) I) I')) -> tr G (dof ext0 (app (app (app eq level) J) J')) -> tr G (dof triv (app (app eqtp (app (app lleq I) J)) (app (app lleq I') J'))).
Definition lleqFormUniv_obligation : Type := forall G I J K ext2 ext1 ext0, tr G (dof ext2 (app (app of level) I)) -> tr G (dof ext1 (app (app of level) J)) -> tr G (dof ext0 (app (app of level) K)) -> tr G (dof triv (app (app of (app univ K)) (app (app lleq I) J))).
Definition lleqEqUniv_obligation : Type := forall G I I' J J' K ext2 ext1 ext0, tr G (dof ext2 (app (app (app eq level) I) I')) -> tr G (dof ext1 (app (app (app eq level) J) J')) -> tr G (dof ext0 (app (app of level) K)) -> tr G (dof triv (app (app (app eq (app univ K)) (app (app lleq I) J)) (app (app lleq I') J'))).
Definition lzeroLevel_obligation : Type := forall G, tr G (dof triv (app (app of level) lzero)).
Definition lsuccLevel_obligation : Type := forall G M ext0, tr G (dof ext0 (app (app of level) M)) -> tr G (dof triv (app (app of level) (app lsucc M))).
Definition lsuccEq_obligation : Type := forall G M N ext0, tr G (dof ext0 (app (app (app eq level) M) N)) -> tr G (dof triv (app (app (app eq level) (app lsucc M)) (app lsucc N))).
Definition lmaxLevel_obligation : Type := forall G M N ext1 ext0, tr G (dof ext1 (app (app of level) M)) -> tr G (dof ext0 (app (app of level) N)) -> tr G (dof triv (app (app of level) (app (app lmax M) N))).
Definition lmaxEq_obligation : Type := forall G M M' N N' ext1 ext0, tr G (dof ext1 (app (app (app eq level) M) M')) -> tr G (dof ext0 (app (app (app eq level) N) N')) -> tr G (dof triv (app (app (app eq level) (app (app lmax M) N)) (app (app lmax M') N'))).
Definition lleqRefl_obligation : Type := forall G M ext0, tr G (dof ext0 (app (app of level) M)) -> tr G (dof triv (app (app lleq M) M)).
Definition lleqTrans_obligation : Type := forall G M N P ext1 ext0, tr G (dof ext1 (app (app lleq M) N)) -> tr G (dof ext0 (app (app lleq N) P)) -> tr G (dof triv (app (app lleq M) P)).
Definition lleqZero_obligation : Type := forall G M ext0, tr G (dof ext0 (app (app of level) M)) -> tr G (dof triv (app (app lleq lzero) M)).
Definition lleqSucc_obligation : Type := forall G M N ext0, tr G (dof ext0 (app (app lleq M) N)) -> tr G (dof triv (app (app lleq (app lsucc M)) (app lsucc N))).
Definition lleqIncrease_obligation : Type := forall G M N ext0, tr G (dof ext0 (app (app lleq M) N)) -> tr G (dof triv (app (app lleq M) (app lsucc N))).
Definition lleqMaxL_obligation : Type := forall G M N P ext1 ext0, tr G (dof ext1 (app (app lleq M) P)) -> tr G (dof ext0 (app (app lleq N) P)) -> tr G (dof triv (app (app lleq (app (app lmax M) N)) P)).
Definition lleqMaxR1_obligation : Type := forall G M N P ext1 ext0, tr G (dof ext1 (app (app lleq M) N)) -> tr G (dof ext0 (app (app of level) P)) -> tr G (dof triv (app (app lleq M) (app (app lmax N) P))).
Definition lleqMaxR2_obligation : Type := forall G M N P ext1 ext0, tr G (dof ext1 (app (app lleq M) P)) -> tr G (dof ext0 (app (app of level) N)) -> tr G (dof triv (app (app lleq M) (app (app lmax N) P))).
Definition lleqResp_obligation : Type := forall G M M' N N' ext2 ext1 ext0, tr G (dof ext2 (app (app (app eq level) M') M)) -> tr G (dof ext1 (app (app (app eq level) N') N)) -> tr G (dof ext0 (app (app lleq M') N')) -> tr G (dof triv (app (app lleq M) N)).
Definition lsuccMaxDistTrans_obligation : Type := forall G M N P ext0, tr G (dof ext0 (app (app (app eq level) M) (app (app lmax (app lsucc N)) (app lsucc P)))) -> tr G (dof triv (app (app (app eq level) M) (app lsucc (app (app lmax N) P)))).
Definition lzeroType_obligation : Type := forall G, tr G (dof triv (app (app of level) lzero)).
Definition lsuccType_obligation : Type := forall G, tr G (dof triv (app (app of (app (app arrow level) level)) lsucc)).
Definition lmaxType_obligation : Type := forall G, tr G (dof triv (app (app of (app (app arrow level) (app (app arrow level) level))) lmax)).
Definition eqForm_obligation : Type := forall G A M P ext1 ext0, tr G (dof ext1 (app (app of A) M)) -> tr G (dof ext0 (app (app of A) P)) -> tr G (dof triv (app istp (app (app (app eq A) M) P))).
Definition eqEq_obligation : Type := forall G A B M N P Q ext2 ext1 ext0, tr G (dof ext2 (app (app eqtp A) B)) -> tr G (dof ext1 (app (app (app eq A) M) N)) -> tr G (dof ext0 (app (app (app eq A) P) Q)) -> tr G (dof triv (app (app eqtp (app (app (app eq A) M) P)) (app (app (app eq B) N) Q))).
Definition eqFormUniv_obligation : Type := forall G A I M P ext2 ext1 ext0, tr G (dof ext2 (app (app of (app univ I)) A)) -> tr G (dof ext1 (app (app of A) M)) -> tr G (dof ext0 (app (app of A) P)) -> tr G (dof triv (app (app of (app univ I)) (app (app (app eq A) M) P))).
Definition eqEqUniv_obligation : Type := forall G A B I M N P Q ext2 ext1 ext0, tr G (dof ext2 (app (app (app eq (app univ I)) A) B)) -> tr G (dof ext1 (app (app (app eq A) M) N)) -> tr G (dof ext0 (app (app (app eq A) P) Q)) -> tr G (dof triv (app (app (app eq (app univ I)) (app (app (app eq A) M) P)) (app (app (app eq B) N) Q))).
Definition eqIntro_obligation : Type := forall G A M N ext0, tr G (dof ext0 (app (app (app eq A) M) N)) -> tr G (dof triv (app (app of (app (app (app eq A) M) N)) triv)).
Definition eqElim_obligation : Type := forall G A M N P ext0, tr G (dof ext0 (app (app of (app (app (app eq A) M) N)) P)) -> tr G (dof triv (app (app (app eq A) M) N)).
Definition eqTrivialize_obligation : Type := forall G A M N ext0, tr G (dof ext0 (app (app (app eq A) M) N)) -> tr G (dof triv (app (app (app eq A) M) N)).
Definition eqExt_obligation : Type := forall G A M N P Q ext1 ext0, tr G (dof ext1 (app (app of (app (app (app eq A) M) N)) P)) -> tr G (dof ext0 (app (app of (app (app (app eq A) M) N)) Q)) -> tr G (dof triv (app (app (app eq (app (app (app eq A) M) N)) P) Q)).
Definition eqLeft_obligation : Type := forall G1 G2 A B P Q M, tr (List.app (substctx (dot triv (sh 0)) G2) G1) (dof M (subst (under (length G2) (dot triv (sh 0))) B)) -> tr (List.app G2 (cons (hyp_tm (app (app (app eq A) P) Q)) G1)) (dof (subst (under (length G2) (sh 1)) M) B).
Definition eqRefl_obligation : Type := forall G A M ext0, tr G (dof ext0 (app (app of A) M)) -> tr G (dof triv (app (app (app eq A) M) M)).
Definition eqSymm_obligation : Type := forall G A M N ext0, tr G (dof ext0 (app (app (app eq A) N) M)) -> tr G (dof triv (app (app (app eq A) M) N)).
Definition eqTrans_obligation : Type := forall G A M N P ext1 ext0, tr G (dof ext1 (app (app (app eq A) M) N)) -> tr G (dof ext0 (app (app (app eq A) N) P)) -> tr G (dof triv (app (app (app eq A) M) P)).
Definition eqFormInv1_obligation : Type := forall G A M N ext0, tr G (dof ext0 (app istp (app (app (app eq A) M) N))) -> tr G (dof triv (app istp A)).
Definition eqFormInv2_obligation : Type := forall G A M N ext0, tr G (dof ext0 (app istp (app (app (app eq A) M) N))) -> tr G (dof triv (app (app of A) M)).
Definition eqFormInv3_obligation : Type := forall G A M N ext0, tr G (dof ext0 (app istp (app (app (app eq A) M) N))) -> tr G (dof triv (app (app of A) N)).
Definition ofForm_obligation : Type := forall G A M ext0, tr G (dof ext0 (app (app of A) M)) -> tr G (dof triv (app istp (app (app of A) M))).
Definition ofEq_obligation : Type := forall G A B M N ext1 ext0, tr G (dof ext1 (app (app eqtp A) B)) -> tr G (dof ext0 (app (app (app eq A) M) N)) -> tr G (dof triv (app (app eqtp (app (app of A) M)) (app (app of B) N))).
Definition ofFormUniv_obligation : Type := forall G A I M ext1 ext0, tr G (dof ext1 (app (app of (app univ I)) A)) -> tr G (dof ext0 (app (app of A) M)) -> tr G (dof triv (app (app of (app univ I)) (app (app of A) M))).
Definition ofEqUniv_obligation : Type := forall G A B I M N ext1 ext0, tr G (dof ext1 (app (app (app eq (app univ I)) A) B)) -> tr G (dof ext0 (app (app (app eq A) M) N)) -> tr G (dof triv (app (app (app eq (app univ I)) (app (app of A) M)) (app (app of B) N))).
Definition ofIntro_obligation : Type := forall G A M ext0, tr G (dof ext0 (app (app of A) M)) -> tr G (dof triv (app (app of (app (app of A) M)) triv)).
Definition ofElim_obligation : Type := forall G A M P ext0, tr G (dof ext0 (app (app of (app (app of A) M)) P)) -> tr G (dof triv (app (app of A) M)).
Definition ofTrivialize_obligation : Type := forall G A M ext0, tr G (dof ext0 (app (app of A) M)) -> tr G (dof triv (app (app of A) M)).
Definition ofExt_obligation : Type := forall G A M P Q ext1 ext0, tr G (dof ext1 (app (app of (app (app of A) M)) P)) -> tr G (dof ext0 (app (app of (app (app of A) M)) Q)) -> tr G (dof triv (app (app (app eq (app (app of A) M)) P) Q)).
Definition ofLeft_obligation : Type := forall G1 G2 A B P M, tr (List.app (substctx (dot triv (sh 0)) G2) G1) (dof M (subst (under (length G2) (dot triv (sh 0))) B)) -> tr (List.app G2 (cons (hyp_tm (app (app of A) P)) G1)) (dof (subst (under (length G2) (sh 1)) M) B).
Definition ofEquand1_obligation : Type := forall G A M N ext0, tr G (dof ext0 (app (app (app eq A) M) N)) -> tr G (dof triv (app (app of A) M)).
Definition ofEquand2_obligation : Type := forall G A M N ext0, tr G (dof ext0 (app (app (app eq A) M) N)) -> tr G (dof triv (app (app of A) N)).
Definition eqtpForm_obligation : Type := forall G A B ext1 ext0, tr G (dof ext1 (app istp A)) -> tr G (dof ext0 (app istp B)) -> tr G (dof triv (app istp (app (app eqtp A) B))).
Definition eqtpEq_obligation : Type := forall G A B C D ext1 ext0, tr G (dof ext1 (app (app eqtp A) B)) -> tr G (dof ext0 (app (app eqtp C) D)) -> tr G (dof triv (app (app eqtp (app (app eqtp A) C)) (app (app eqtp B) D))).
Definition eqtpFormUniv_obligation : Type := forall G A B I ext1 ext0, tr G (dof ext1 (app (app of (app univ I)) A)) -> tr G (dof ext0 (app (app of (app univ I)) B)) -> tr G (dof triv (app (app of (app univ I)) (app (app eqtp A) B))).
Definition eqtpEqUniv_obligation : Type := forall G A B C D I ext1 ext0, tr G (dof ext1 (app (app (app eq (app univ I)) A) B)) -> tr G (dof ext0 (app (app (app eq (app univ I)) C) D)) -> tr G (dof triv (app (app (app eq (app univ I)) (app (app eqtp A) C)) (app (app eqtp B) D))).
Definition eqtpIntro_obligation : Type := forall G A B ext0, tr G (dof ext0 (app (app eqtp A) B)) -> tr G (dof triv (app (app of (app (app eqtp A) B)) triv)).
Definition eqtpElim_obligation : Type := forall G A B P ext0, tr G (dof ext0 (app (app of (app (app eqtp A) B)) P)) -> tr G (dof triv (app (app eqtp A) B)).
Definition eqtpExt_obligation : Type := forall G A B P Q ext1 ext0, tr G (dof ext1 (app (app of (app (app eqtp A) B)) P)) -> tr G (dof ext0 (app (app of (app (app eqtp A) B)) Q)) -> tr G (dof triv (app (app (app eq (app (app eqtp A) B)) P) Q)).
Definition eqtpLeft_obligation : Type := forall G1 G2 A B C M, tr (List.app (substctx (dot triv (sh 0)) G2) G1) (dof M (subst (under (length G2) (dot triv (sh 0))) C)) -> tr (List.app G2 (cons (hyp_tm (app (app eqtp A) B)) G1)) (dof (subst (under (length G2) (sh 1)) M) C).
Definition eqtpFunct_obligation : Type := forall G A B M N ext1 ext0, tr (cons (hyp_tm A) G) (dof ext1 (app istp B)) -> tr G (dof ext0 (app (app (app eq A) M) N)) -> tr G (dof triv (app (app eqtp (subst (dot M (sh 0)) B)) (subst (dot N (sh 0)) B))).
Definition equivalenceOf_obligation : Type := forall G A B M ext1 ext0, tr G (dof ext1 (app (app eqtp A) B)) -> tr G (dof ext0 (app (app of A) M)) -> tr G (dof triv (app (app of B) M)).
Definition equivalenceEq_obligation : Type := forall G A B M N ext1 ext0, tr G (dof ext1 (app (app eqtp A) B)) -> tr G (dof ext0 (app (app (app eq A) M) N)) -> tr G (dof triv (app (app (app eq B) M) N)).
Definition equivalence_obligation : Type := forall G A B ext0 M, tr G (dof ext0 (app (app eqtp A) B)) -> tr G (dof M A) -> tr G (dof M B).
Definition equivalenceLeft_obligation : Type := forall G1 G2 A B C ext0 M, tr ((cons (hyp_tm (app istp A)) G1)) (dof ext0 (app (app eqtp (subst (sh 1) A)) (subst (sh 1) B))) -> tr (List.app (substctx (sh 0) G2) (cons (hyp_tm B) G1)) (dof M C) -> tr (List.app G2 (cons (hyp_tm A) G1)) (dof M C).
Definition eqtpRefl_obligation : Type := forall G A ext0, tr G (dof ext0 (app istp A)) -> tr G (dof triv (app (app eqtp A) A)).
Definition eqtpSymm_obligation : Type := forall G A B ext0, tr G (dof ext0 (app (app eqtp B) A)) -> tr G (dof triv (app (app eqtp A) B)).
Definition eqtpTrans_obligation : Type := forall G A B C ext1 ext0, tr G (dof ext1 (app (app eqtp A) B)) -> tr G (dof ext0 (app (app eqtp B) C)) -> tr G (dof triv (app (app eqtp A) C)).
Definition istpForm_obligation : Type := forall G A ext0, tr G (dof ext0 (app istp A)) -> tr G (dof triv (app istp (app istp A))).
Definition istpEq_obligation : Type := forall G A B ext0, tr G (dof ext0 (app (app eqtp A) B)) -> tr G (dof triv (app (app eqtp (app istp A)) (app istp B))).
Definition istpFormUniv_obligation : Type := forall G A I ext0, tr G (dof ext0 (app (app of (app univ I)) A)) -> tr G (dof triv (app (app of (app univ I)) (app istp A))).
Definition istpEqUniv_obligation : Type := forall G A B I ext0, tr G (dof ext0 (app (app (app eq (app univ I)) A) B)) -> tr G (dof triv (app (app (app eq (app univ I)) (app istp A)) (app istp B))).
Definition istpIntro_obligation : Type := forall G A ext0, tr G (dof ext0 (app istp A)) -> tr G (dof triv (app (app of (app istp A)) triv)).
Definition istpElim_obligation : Type := forall G A P ext0, tr G (dof ext0 (app (app of (app istp A)) P)) -> tr G (dof triv (app istp A)).
Definition istpExt_obligation : Type := forall G A P Q ext1 ext0, tr G (dof ext1 (app (app of (app istp A)) P)) -> tr G (dof ext0 (app (app of (app istp A)) Q)) -> tr G (dof triv (app (app (app eq (app istp A)) P) Q)).
Definition istpLeft_obligation : Type := forall G1 G2 A B M, tr (List.app (substctx (dot triv (sh 0)) G2) G1) (dof M (subst (under (length G2) (dot triv (sh 0))) B)) -> tr (List.app G2 (cons (hyp_tm (app istp A)) G1)) (dof (subst (under (length G2) (sh 1)) M) B).
Definition inhabitedForm_obligation : Type := forall G A ext0, tr G (dof ext0 A) -> tr G (dof triv (app istp A)).
Definition subtypeForm_obligation : Type := forall G A B ext1 ext0, tr G (dof ext1 (app istp A)) -> tr G (dof ext0 (app istp B)) -> tr G (dof triv (app istp (app (app subtype A) B))).
Definition subtypeEq_obligation : Type := forall G A B C D ext1 ext0, tr G (dof ext1 (app (app eqtp A) B)) -> tr G (dof ext0 (app (app eqtp C) D)) -> tr G (dof triv (app (app eqtp (app (app subtype A) C)) (app (app subtype B) D))).
Definition subtypeFormUniv_obligation : Type := forall G A B I ext1 ext0, tr G (dof ext1 (app (app of (app univ I)) A)) -> tr G (dof ext0 (app (app of (app univ I)) B)) -> tr G (dof triv (app (app of (app univ I)) (app (app subtype A) B))).
Definition subtypeEqUniv_obligation : Type := forall G A B C D I ext1 ext0, tr G (dof ext1 (app (app (app eq (app univ I)) A) B)) -> tr G (dof ext0 (app (app (app eq (app univ I)) C) D)) -> tr G (dof triv (app (app (app eq (app univ I)) (app (app subtype A) C)) (app (app subtype B) D))).
Definition subtypeIntro_obligation : Type := forall G A B ext0, tr G (dof ext0 (app (app subtype A) B)) -> tr G (dof triv (app (app of (app (app subtype A) B)) triv)).
Definition subtypeElim_obligation : Type := forall G A B P ext0, tr G (dof ext0 (app (app of (app (app subtype A) B)) P)) -> tr G (dof triv (app (app subtype A) B)).
Definition subtypeExt_obligation : Type := forall G A B P Q ext1 ext0, tr G (dof ext1 (app (app of (app (app subtype A) B)) P)) -> tr G (dof ext0 (app (app of (app (app subtype A) B)) Q)) -> tr G (dof triv (app (app (app eq (app (app subtype A) B)) P) Q)).
Definition subtypeLeft_obligation : Type := forall G1 G2 A B C M, tr (List.app (substctx (dot triv (sh 0)) G2) G1) (dof M (subst (under (length G2) (dot triv (sh 0))) C)) -> tr (List.app G2 (cons (hyp_tm (app (app subtype A) B)) G1)) (dof (subst (under (length G2) (sh 1)) M) C).
Definition subtypeEstablish_obligation : Type := forall G A B ext2 ext1 ext0, tr G (dof ext2 (app istp A)) -> tr G (dof ext1 (app istp B)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app of (subst (sh 1) B)) (var 0))) -> tr G (dof triv (app (app subtype A) B)).
Definition subsumptionOf_obligation : Type := forall G A B M ext1 ext0, tr G (dof ext1 (app (app subtype A) B)) -> tr G (dof ext0 (app (app of A) M)) -> tr G (dof triv (app (app of B) M)).
Definition subsumptionEq_obligation : Type := forall G A B M N ext1 ext0, tr G (dof ext1 (app (app subtype A) B)) -> tr G (dof ext0 (app (app (app eq A) M) N)) -> tr G (dof triv (app (app (app eq B) M) N)).
Definition subsumption_obligation : Type := forall G A B ext0 M, tr G (dof ext0 (app (app subtype A) B)) -> tr G (dof M A) -> tr G (dof M B).
Definition subsumptionLeft_obligation : Type := forall G1 G2 A B C ext0 M, tr ((cons (hyp_tm (app istp A)) G1)) (dof ext0 (app (app eeqtp (subst (sh 1) A)) (subst (sh 1) B))) -> tr (List.app (substctx (sh 0) G2) (cons (hyp_tm B) G1)) (dof M C) -> tr (List.app G2 (cons (hyp_tm A) G1)) (dof M C).
Definition subtypeRefl_obligation : Type := forall G A ext0, tr G (dof ext0 (app istp A)) -> tr G (dof triv (app (app subtype A) A)).
Definition subtypeReflEqtype_obligation : Type := forall G A B ext0, tr G (dof ext0 (app (app eqtp A) B)) -> tr G (dof triv (app (app subtype A) B)).
Definition subtypeTrans_obligation : Type := forall G A B C ext1 ext0, tr G (dof ext1 (app (app subtype A) B)) -> tr G (dof ext0 (app (app subtype B) C)) -> tr G (dof triv (app (app subtype A) C)).
Definition subtypeIstp1_obligation : Type := forall G A B ext0, tr G (dof ext0 (app (app subtype A) B)) -> tr G (dof triv (app istp A)).
Definition subtypeIstp2_obligation : Type := forall G A B ext0, tr G (dof ext0 (app (app subtype A) B)) -> tr G (dof triv (app istp B)).
Definition setForm_obligation : Type := forall G A B ext1 ext0, tr G (dof ext1 (app istp A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app istp B)) -> tr G (dof triv (app istp (app (app set A) (lam B)))).
Definition setEq_obligation : Type := forall G A A' B B' ext4 ext3 ext2 ext1 ext0, tr G (dof ext4 (app (app eqtp A) A')) -> tr (cons (hyp_tm A) G) (dof ext3 (app istp B)) -> tr (cons (hyp_tm A) G) (dof ext2 (app istp B')) -> tr (cons (hyp_tm B) (cons (hyp_tm A) G)) (dof ext1 (subst (sh 1) B')) -> tr (cons (hyp_tm B') (cons (hyp_tm A) G)) (dof ext0 (subst (sh 1) B)) -> tr G (dof triv (app (app eqtp (app (app set A) (lam B))) (app (app set A') (lam B')))).
Definition setFormUniv_obligation : Type := forall G A B I ext1 ext0, tr G (dof ext1 (app (app of (app univ I)) A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app of (app univ (subst (sh 1) I))) B)) -> tr G (dof triv (app (app of (app univ I)) (app (app set A) (lam B)))).
Definition setEqUniv_obligation : Type := forall G A A' B B' I ext4 ext3 ext2 ext1 ext0, tr G (dof ext4 (app (app (app eq (app univ I)) A) A')) -> tr (cons (hyp_tm A) G) (dof ext3 (app (app of (app univ (subst (sh 1) I))) B)) -> tr (cons (hyp_tm A) G) (dof ext2 (app (app of (app univ (subst (sh 1) I))) B')) -> tr (cons (hyp_tm B) (cons (hyp_tm A) G)) (dof ext1 (subst (sh 1) B')) -> tr (cons (hyp_tm B') (cons (hyp_tm A) G)) (dof ext0 (subst (sh 1) B)) -> tr G (dof triv (app (app (app eq (app univ I)) (app (app set A) (lam B))) (app (app set A') (lam B')))).
Definition setWeakenOf_obligation : Type := forall G A B M ext0, tr G (dof ext0 (app (app of (app (app set A) (lam B))) M)) -> tr G (dof triv (app (app of A) M)).
Definition setWeakenEq_obligation : Type := forall G A B M N ext0, tr G (dof ext0 (app (app (app eq (app (app set A) (lam B))) M) N)) -> tr G (dof triv (app (app (app eq A) M) N)).
Definition setWeaken_obligation : Type := forall G A B M, tr G (dof M (app (app set A) (lam B))) -> tr G (dof M A).
Definition setIntroOf_obligation : Type := forall G A B M ext2 ext1 ext0, tr (cons (hyp_tm A) G) (dof ext2 (app istp B)) -> tr G (dof ext1 (app (app of A) M)) -> tr G (dof ext0 (subst (dot M (sh 0)) B)) -> tr G (dof triv (app (app of (app (app set A) (lam B))) M)).
Definition setIntroEq_obligation : Type := forall G A B M N ext2 ext1 ext0, tr (cons (hyp_tm A) G) (dof ext2 (app istp B)) -> tr G (dof ext1 (app (app (app eq A) M) N)) -> tr G (dof ext0 (subst (dot M (sh 0)) B)) -> tr G (dof triv (app (app (app eq (app (app set A) (lam B))) M) N)).
Definition setIntro_obligation : Type := forall G A B M ext2 ext1 ext0, tr (cons (hyp_tm A) G) (dof ext2 (app istp B)) -> tr G (dof ext1 (app (app of A) M)) -> tr G (dof ext0 (subst (dot M (sh 0)) B)) -> tr G (dof M (app (app set A) (lam B))).
Definition setIntroOfSquash_obligation : Type := forall G A B M ext2 ext1 ext0, tr (cons (hyp_tm A) G) (dof ext2 (app istp B)) -> tr G (dof ext1 (app (app of A) M)) -> tr G (dof ext0 (app squash (subst (dot M (sh 0)) B))) -> tr G (dof triv (app (app of (app (app set A) (lam B))) M)).
Definition squashIntroOfSquash_obligation : Type := forall G A ext1 ext0, tr G (dof ext1 (app istp A)) -> tr G (dof ext0 (app squash A)) -> tr G (dof triv (app (app of (app squash A)) triv)).
Definition setElim_obligation : Type := forall G A B C M ext1 ext0 N, hygiene (fun i => i <> 0) N -> tr (cons (hyp_tm A) G) (dof ext1 (app istp B)) -> tr G (dof ext0 (app (app of (app (app set A) (lam B))) M)) -> tr (cons (hyp_tm (subst (dot M (sh 0)) B)) G) (dof N (subst (sh 1) C)) -> tr G (dof (subst (dot triv (sh 0)) N) C).
Definition setLeft_obligation : Type := forall G1 G2 A B C ext0 M, hygiene (fun i => i <> 0 + length G2) M -> tr ((cons (hyp_tm A) G1)) (dof ext0 (app istp B)) -> tr (List.app (substctx (sh 1) G2) (cons (hyp_tm B) (cons (hyp_tm A) G1))) (dof M (subst (under (length G2) (sh 1)) C)) -> tr (List.app G2 (cons (hyp_tm (app (app set A) (lam B))) G1)) (dof (subst (under (length G2) (dot triv (sh 0))) M) C).
Definition setSquash_obligation : Type := forall G A B ext0, tr G (dof ext0 (app istp (app (app set A) (lam B)))) -> tr G (dof triv (app (app eqtp (app (app set A) (lam B))) (app (app set A) (lam (app squash B))))).
Definition setFormInv_obligation : Type := forall G A B ext0, tr G (dof ext0 (app istp (app (app set A) (lam B)))) -> tr G (dof triv (app istp A)).
Definition setSubElim_obligation : Type := forall G A A' B ext1 ext0, tr G (dof ext1 (app (app subtype A) A')) -> tr (cons (hyp_tm A) G) (dof ext0 (app istp B)) -> tr G (dof triv (app (app subtype (app (app set A) (lam B))) A')).
Definition isetForm_obligation : Type := forall G A B ext1 ext0, tr G (dof ext1 (app istp A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app istp B)) -> tr G (dof triv (app istp (app (app iset A) (lam B)))).
Definition isetEq_obligation : Type := forall G A A' B B' ext1 ext0, tr G (dof ext1 (app (app eqtp A) A')) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app eqtp B) B')) -> tr G (dof triv (app (app eqtp (app (app iset A) (lam B))) (app (app iset A') (lam B')))).
Definition isetFormUniv_obligation : Type := forall G A B I ext1 ext0, tr G (dof ext1 (app (app of (app univ I)) A)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app of (app univ (subst (sh 1) I))) B)) -> tr G (dof triv (app (app of (app univ I)) (app (app iset A) (lam B)))).
Definition isetEqUniv_obligation : Type := forall G A A' B B' I ext1 ext0, tr G (dof ext1 (app (app (app eq (app univ I)) A) A')) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app (app eq (app univ (subst (sh 1) I))) B) B')) -> tr G (dof triv (app (app (app eq (app univ I)) (app (app iset A) (lam B))) (app (app iset A') (lam B')))).
Definition isetWeakenOf_obligation : Type := forall G A B M ext0, tr G (dof ext0 (app (app of (app (app iset A) (lam B))) M)) -> tr G (dof triv (app (app of A) M)).
Definition isetWeakenEq_obligation : Type := forall G A B M N ext0, tr G (dof ext0 (app (app (app eq (app (app iset A) (lam B))) M) N)) -> tr G (dof triv (app (app (app eq A) M) N)).
Definition isetWeaken_obligation : Type := forall G A B M, tr G (dof M (app (app iset A) (lam B))) -> tr G (dof M A).
Definition isetIntroOf_obligation : Type := forall G A B M ext2 ext1 ext0, tr (cons (hyp_tm A) G) (dof ext2 (app istp B)) -> tr G (dof ext1 (app (app of A) M)) -> tr G (dof ext0 (subst (dot M (sh 0)) B)) -> tr G (dof triv (app (app of (app (app iset A) (lam B))) M)).
Definition isetIntroEq_obligation : Type := forall G A B M N ext2 ext1 ext0, tr (cons (hyp_tm A) G) (dof ext2 (app istp B)) -> tr G (dof ext1 (app (app (app eq A) M) N)) -> tr G (dof ext0 (subst (dot M (sh 0)) B)) -> tr G (dof triv (app (app (app eq (app (app iset A) (lam B))) M) N)).
Definition isetIntro_obligation : Type := forall G A B M ext2 ext1 ext0, tr (cons (hyp_tm A) G) (dof ext2 (app istp B)) -> tr G (dof ext1 (app (app of A) M)) -> tr G (dof ext0 (subst (dot M (sh 0)) B)) -> tr G (dof M (app (app iset A) (lam B))).
Definition isetIntroOfSquash_obligation : Type := forall G A B M ext2 ext1 ext0, tr (cons (hyp_tm A) G) (dof ext2 (app istp B)) -> tr G (dof ext1 (app (app of A) M)) -> tr G (dof ext0 (app squash (subst (dot M (sh 0)) B))) -> tr G (dof triv (app (app of (app (app iset A) (lam B))) M)).
Definition isetElim_obligation : Type := forall G A B C M ext0 N, hygiene (fun i => i <> 0) N -> tr G (dof ext0 (app (app of (app (app iset A) (lam B))) M)) -> tr (cons (hyp_tm (subst (dot M (sh 0)) B)) G) (dof N (subst (sh 1) C)) -> tr G (dof (subst (dot triv (sh 0)) N) C).
Definition isetLeft_obligation : Type := forall G1 G2 A B C M, hygiene (fun i => i <> 0 + length G2) M -> tr (List.app (substctx (sh 1) G2) (cons (hyp_tm B) (cons (hyp_tm A) G1))) (dof M (subst (under (length G2) (sh 1)) C)) -> tr (List.app G2 (cons (hyp_tm (app (app iset A) (lam B))) G1)) (dof (subst (under (length G2) (dot triv (sh 0))) M) C).
Definition isetFormInv1_obligation : Type := forall G A B ext0, tr G (dof ext0 (app istp (app (app iset A) (lam B)))) -> tr G (dof triv (app istp A)).
Definition isetFormInv2_obligation : Type := forall G A B M ext1 ext0, tr G (dof ext1 (app istp (app (app iset A) (lam B)))) -> tr G (dof ext0 (app (app of A) M)) -> tr G (dof triv (app istp (subst (dot M (sh 0)) B))).
Definition isetSubElim_obligation : Type := forall G A A' B ext1 ext0, tr G (dof ext1 (app (app subtype A) A')) -> tr (cons (hyp_tm A) G) (dof ext0 (app istp B)) -> tr G (dof triv (app (app subtype (app (app iset A) (lam B))) A')).
Definition squashForm_obligation : Type := forall G A ext0, tr G (dof ext0 (app istp A)) -> tr G (dof triv (app istp (app squash A))).
Definition squashEq_obligation : Type := forall G A B ext3 ext2 ext1 ext0, tr G (dof ext3 (app istp A)) -> tr G (dof ext2 (app istp B)) -> tr (cons (hyp_tm A) G) (dof ext1 (subst (sh 1) B)) -> tr (cons (hyp_tm B) G) (dof ext0 (subst (sh 1) A)) -> tr G (dof triv (app (app eqtp (app squash A)) (app squash B))).
Definition squashFormUniv_obligation : Type := forall G A I ext0, tr G (dof ext0 (app (app of (app univ I)) A)) -> tr G (dof triv (app (app of (app univ I)) (app squash A))).
Definition squashEqUniv_obligation : Type := forall G A B I ext3 ext2 ext1 ext0, tr G (dof ext3 (app (app of (app univ I)) A)) -> tr G (dof ext2 (app (app of (app univ I)) B)) -> tr (cons (hyp_tm A) G) (dof ext1 (subst (sh 1) B)) -> tr (cons (hyp_tm B) G) (dof ext0 (subst (sh 1) A)) -> tr G (dof triv (app (app (app eq (app univ I)) (app squash A)) (app squash B))).
Definition squashIntroOf_obligation : Type := forall G A ext0, tr G (dof ext0 A) -> tr G (dof triv (app (app of (app squash A)) triv)).
Definition squashIntro_obligation : Type := forall G A ext0, tr G (dof ext0 A) -> tr G (dof triv (app squash A)).
Definition squashElim_obligation : Type := forall G A C M ext1 ext0 N, hygiene (fun i => i <> 0) N -> tr G (dof ext1 (app (app of (app squash A)) M)) -> tr G (dof ext0 (app istp A)) -> tr (cons (hyp_tm A) G) (dof N (subst (sh 1) C)) -> tr G (dof (subst (dot triv (sh 0)) N) C).
Definition squashExt_obligation : Type := forall G A M N ext2 ext1 ext0, tr G (dof ext2 (app (app of (app squash A)) M)) -> tr G (dof ext1 (app (app of (app squash A)) N)) -> tr G (dof ext0 (app istp A)) -> tr G (dof triv (app (app (app eq (app squash A)) M) N)).
Definition squashLeft_obligation : Type := forall G1 G2 A C ext0 M, hygiene (fun i => i <> 0 + length G2) M -> tr (G1) (dof ext0 (app istp A)) -> tr (List.app (substctx (dot triv (sh 1)) G2) (cons (hyp_tm A) G1)) (dof M (subst (under (length G2) (dot triv (sh 1))) C)) -> tr (List.app G2 (cons (hyp_tm (app squash A)) G1)) (dof (subst (under (length G2) (dot triv (sh 1))) M) C).
Definition squashSub_obligation : Type := forall G A B ext1 ext0, tr G (dof ext1 (app istp B)) -> tr G (dof ext0 (app (app arrow A) B)) -> tr G (dof triv (app (app subtype (app squash A)) (app squash B))).
Definition quotientForm_obligation : Type := forall G A B ext3 ext2 ext1 ext0, tr G (dof ext3 (app istp A)) -> tr (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G)) (dof ext2 (app istp B)) -> tr (cons (hyp_tm B) (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G))) (dof ext1 (subst (dot (var 2) (dot (var 1) (sh 3))) B)) -> tr (cons (hyp_tm (subst (dot (var 1) (dot (var 2) (sh 4))) B)) (cons (hyp_tm (subst (sh 1) B)) (cons (hyp_tm (subst (sh 2) A)) (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G))))) (dof ext0 (subst (dot (var 2) (sh 4)) B)) -> tr G (dof triv (app istp (app (app quotient A) (lam (lam B))))).
Definition quotientEq_obligation : Type := forall G A A' B B' ext6 ext5 ext4 ext3 ext2 ext1 ext0, tr G (dof ext6 (app (app eqtp A) A')) -> tr (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G)) (dof ext5 (app istp B)) -> tr (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G)) (dof ext4 (app istp B')) -> tr (cons (hyp_tm B) (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G))) (dof ext3 (subst (sh 1) B')) -> tr (cons (hyp_tm B') (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G))) (dof ext2 (subst (sh 1) B)) -> tr (cons (hyp_tm B) (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G))) (dof ext1 (subst (dot (var 2) (dot (var 1) (sh 3))) B)) -> tr (cons (hyp_tm (subst (dot (var 1) (dot (var 2) (sh 4))) B)) (cons (hyp_tm (subst (sh 1) B)) (cons (hyp_tm (subst (sh 2) A)) (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G))))) (dof ext0 (subst (dot (var 2) (sh 4)) B)) -> tr G (dof triv (app (app eqtp (app (app quotient A) (lam (lam B)))) (app (app quotient A') (lam (lam B'))))).
Definition quotientFormUniv_obligation : Type := forall G A B I ext3 ext2 ext1 ext0, tr G (dof ext3 (app (app of (app univ I)) A)) -> tr (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G)) (dof ext2 (app (app of (app univ (subst (sh 2) I))) B)) -> tr (cons (hyp_tm B) (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G))) (dof ext1 (subst (dot (var 2) (dot (var 1) (sh 3))) B)) -> tr (cons (hyp_tm (subst (dot (var 1) (dot (var 2) (sh 4))) B)) (cons (hyp_tm (subst (sh 1) B)) (cons (hyp_tm (subst (sh 2) A)) (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G))))) (dof ext0 (subst (dot (var 2) (sh 4)) B)) -> tr G (dof triv (app (app of (app univ I)) (app (app quotient A) (lam (lam B))))).
Definition quotientEqUniv_obligation : Type := forall G A A' B B' I ext6 ext5 ext4 ext3 ext2 ext1 ext0, tr G (dof ext6 (app (app (app eq (app univ I)) A) A')) -> tr (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G)) (dof ext5 (app (app of (app univ (subst (sh 2) I))) B)) -> tr (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G)) (dof ext4 (app (app of (app univ (subst (sh 2) I))) B')) -> tr (cons (hyp_tm B) (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G))) (dof ext3 (subst (sh 1) B')) -> tr (cons (hyp_tm B') (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G))) (dof ext2 (subst (sh 1) B)) -> tr (cons (hyp_tm B) (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G))) (dof ext1 (subst (dot (var 2) (dot (var 1) (sh 3))) B)) -> tr (cons (hyp_tm (subst (dot (var 1) (dot (var 2) (sh 4))) B)) (cons (hyp_tm (subst (sh 1) B)) (cons (hyp_tm (subst (sh 2) A)) (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G))))) (dof ext0 (subst (dot (var 2) (sh 4)) B)) -> tr G (dof triv (app (app (app eq (app univ I)) (app (app quotient A) (lam (lam B)))) (app (app quotient A') (lam (lam B'))))).
Definition quotientIntroOf_obligation : Type := forall G A B M ext2 ext1 ext0, tr G (dof ext2 (app istp (app (app quotient A) (lam (lam B))))) -> tr G (dof ext1 (app (app of A) M)) -> tr G (dof ext0 (subst (dot M (dot M (sh 0))) B)) -> tr G (dof triv (app (app of (app (app quotient A) (lam (lam B)))) M)).
Definition quotientIntroEq_obligation : Type := forall G A B M N ext3 ext2 ext1 ext0, tr G (dof ext3 (app istp (app (app quotient A) (lam (lam B))))) -> tr G (dof ext2 (app (app of A) M)) -> tr G (dof ext1 (app (app of A) N)) -> tr G (dof ext0 (subst (dot N (dot M (sh 0))) B)) -> tr G (dof triv (app (app (app eq (app (app quotient A) (lam (lam B)))) M) N)).
Definition quotientElimOf_obligation : Type := forall G A B C M P ext3 ext2 ext1 ext0, tr G (dof ext3 (app (app of (app (app quotient A) (lam (lam B)))) M)) -> tr (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G)) (dof ext2 (app istp B)) -> tr (cons (hyp_tm (app (app quotient A) (lam (lam B)))) G) (dof ext1 (app istp C)) -> tr (cons (hyp_tm B) (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G))) (dof ext0 (app (app (app eq (subst (sh 2) C)) (subst (sh 2) P)) (subst (dot (var 1) (sh 3)) P))) -> tr G (dof triv (app (app of (subst (dot M (sh 0)) C)) (subst (dot M (sh 0)) P))).
Definition quotientElimEq_obligation : Type := forall G A B C M N P Q ext3 ext2 ext1 ext0, tr G (dof ext3 (app (app (app eq (app (app quotient A) (lam (lam B)))) M) N)) -> tr (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G)) (dof ext2 (app istp B)) -> tr (cons (hyp_tm (app (app quotient A) (lam (lam B)))) G) (dof ext1 (app istp C)) -> tr (cons (hyp_tm B) (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G))) (dof ext0 (app (app (app eq (subst (sh 2) C)) (subst (sh 2) P)) (subst (dot (var 1) (sh 3)) Q))) -> tr G (dof triv (app (app (app eq (subst (dot M (sh 0)) C)) (subst (dot M (sh 0)) P)) (subst (dot N (sh 0)) Q))).
Definition quotientElimIstype_obligation : Type := forall G A B C M ext2 ext1 ext0, tr G (dof ext2 (app (app of (app (app quotient A) (lam (lam B)))) M)) -> tr (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G)) (dof ext1 (app istp B)) -> tr (cons (hyp_tm B) (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G))) (dof ext0 (app (app eqtp (subst (sh 2) C)) (subst (dot (var 1) (sh 3)) C))) -> tr G (dof triv (app istp (subst (dot M (sh 0)) C))).
Definition quotientElimEqtype_obligation : Type := forall G A B C D M N ext2 ext1 ext0, tr G (dof ext2 (app (app (app eq (app (app quotient A) (lam (lam B)))) M) N)) -> tr (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G)) (dof ext1 (app istp B)) -> tr (cons (hyp_tm B) (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G))) (dof ext0 (app (app eqtp (subst (sh 2) C)) (subst (dot (var 1) (sh 3)) D))) -> tr G (dof triv (app (app eqtp (subst (dot M (sh 0)) C)) (subst (dot N (sh 0)) D))).
Definition quotientDescent_obligation : Type := forall G A B C M N ext4 ext3 ext2 ext1 ext0 P, hygiene (fun i => i <> 0) P -> tr (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G)) (dof ext4 (app istp B)) -> tr G (dof ext3 (app istp C)) -> tr G (dof ext2 (app (app of A) M)) -> tr G (dof ext1 (app (app of A) N)) -> tr G (dof ext0 (app (app (app eq (app (app quotient A) (lam (lam B)))) M) N)) -> tr (cons (hyp_tm (subst (dot N (dot M (sh 0))) B)) G) (dof P (subst (sh 1) C)) -> tr G (dof (subst (dot triv (sh 0)) P) C).
Definition quotientLeft_obligation : Type := forall G1 G2 A B C ext0 M, hygiene (fun i => i <> 0 + length G2) M -> tr (List.app (substctx (sh 0) G2) (cons (hyp_tm (app (app quotient A) (lam (lam B)))) G1)) (dof ext0 (app istp C)) -> tr (List.app (substctx (sh 0) G2) (cons (hyp_tm A) G1)) (dof M C) -> tr (List.app G2 (cons (hyp_tm (app (app quotient A) (lam (lam B)))) G1)) (dof (subst (under (length G2) (dot triv (sh 1))) M) C).
Definition quotientLeftRefl_obligation : Type := forall G1 G2 A B C ext1 ext0 M, hygiene (fun i => i <> 0 + length G2) M -> hygiene (fun i => i <> 1 + length G2) M -> tr ((cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G1))) (dof ext1 (app istp B)) -> tr (List.app (substctx (sh 0) G2) (cons (hyp_tm (app (app quotient A) (lam (lam B)))) G1)) (dof ext0 (app istp C)) -> tr (List.app (substctx (sh 1) G2) (cons (hyp_tm (subst (dot (var 0) (sh 0)) B)) (cons (hyp_tm A) G1))) (dof M (subst (under (length G2) (sh 1)) C)) -> tr (List.app G2 (cons (hyp_tm (app (app quotient A) (lam (lam B)))) G1)) (dof (subst (under (length G2) (dot triv (dot triv (sh 1)))) M) C).
Definition quotientLeftIstype_obligation : Type := forall G1 G2 A B C ext1 ext0, tr ((cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G1))) (dof ext1 (app istp B)) -> tr (List.app (substctx (sh 2) G2) (cons (hyp_tm B) (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G1)))) (dof ext0 (app (app eqtp (subst (under (length G2) (sh 2)) C)) (subst (under (length G2) (dot (var 1) (sh 3))) C))) -> tr (List.app G2 (cons (hyp_tm (app (app quotient A) (lam (lam B)))) G1)) (dof triv (app istp C)).
Definition quotientLeftEqtype_obligation : Type := forall G1 G2 A B C D ext1 ext0, tr ((cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G1))) (dof ext1 (app istp B)) -> tr (List.app (substctx (sh 2) G2) (cons (hyp_tm B) (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G1)))) (dof ext0 (app (app eqtp (subst (under (length G2) (sh 2)) C)) (subst (under (length G2) (dot (var 1) (sh 3))) D))) -> tr (List.app G2 (cons (hyp_tm (app (app quotient A) (lam (lam B)))) G1)) (dof triv (app (app eqtp C) D)).
Definition quotientLeftOf_obligation : Type := forall G1 G2 A B C M ext1 ext0, tr ((cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G1))) (dof ext1 (app istp B)) -> tr (List.app (substctx (sh 2) G2) (cons (hyp_tm B) (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G1)))) (dof ext0 (app (app (app eq (subst (under (length G2) (sh 3)) C)) (subst (under (length G2) (sh 2)) M)) (subst (under (length G2) (dot (var 1) (sh 3))) M))) -> tr (List.app G2 (cons (hyp_tm (app (app quotient A) (lam (lam B)))) G1)) (dof triv (app (app of (subst (under (length G2) (sh 1)) C)) M)).
Definition quotientLeftEq_obligation : Type := forall G1 G2 A B C M N ext1 ext0, tr ((cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G1))) (dof ext1 (app istp B)) -> tr (List.app (substctx (sh 2) G2) (cons (hyp_tm B) (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G1)))) (dof ext0 (app (app (app eq (subst (under (length G2) (sh 3)) C)) (subst (under (length G2) (sh 2)) M)) (subst (under (length G2) (dot (var 1) (sh 3))) N))) -> tr (List.app G2 (cons (hyp_tm (app (app quotient A) (lam (lam B)))) G1)) (dof triv (app (app (app eq (subst (under (length G2) (sh 1)) C)) M) N)).
Definition quotientLeftOfDep_obligation : Type := forall G1 G2 A B C M ext2 ext1 ext0, tr ((cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G1))) (dof ext2 (app istp B)) -> tr (List.app (substctx (sh 2) G2) (cons (hyp_tm B) (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G1)))) (dof ext1 (app (app eqtp (subst (under (length G2) (sh 2)) C)) (subst (under (length G2) (dot (var 1) (sh 3))) C))) -> tr (List.app (substctx (sh 2) G2) (cons (hyp_tm B) (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G1)))) (dof ext0 (app (app (app eq (subst (under (length G2) (sh 2)) C)) (subst (under (length G2) (sh 2)) M)) (subst (under (length G2) (dot (var 1) (sh 3))) M))) -> tr (List.app G2 (cons (hyp_tm (app (app quotient A) (lam (lam B)))) G1)) (dof triv (app (app of C) M)).
Definition quotientLeftEqDep_obligation : Type := forall G1 G2 A B C M N ext2 ext1 ext0, tr ((cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G1))) (dof ext2 (app istp B)) -> tr (List.app (substctx (sh 2) G2) (cons (hyp_tm B) (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G1)))) (dof ext1 (app (app eqtp (subst (under (length G2) (sh 2)) C)) (subst (under (length G2) (dot (var 1) (sh 3))) C))) -> tr (List.app (substctx (sh 2) G2) (cons (hyp_tm B) (cons (hyp_tm (subst (sh 1) A)) (cons (hyp_tm A) G1)))) (dof ext0 (app (app (app eq (subst (under (length G2) (sh 2)) C)) (subst (under (length G2) (sh 2)) M)) (subst (under (length G2) (dot (var 1) (sh 3))) N))) -> tr (List.app G2 (cons (hyp_tm (app (app quotient A) (lam (lam B)))) G1)) (dof triv (app (app (app eq C) M) N)).
Definition quotientFormInv_obligation : Type := forall G A B ext0, tr G (dof ext0 (app istp (app (app quotient A) (lam (lam B))))) -> tr G (dof triv (app istp A)).
Definition iforallForm_obligation : Type := forall G A I K ext1 ext0, tr G (dof ext1 (app (app of (app kind I)) K)) -> tr (cons (hyp_tm K) G) (dof ext0 (app istp A)) -> tr G (dof triv (app istp (app (app (app iforall I) K) (lam A)))).
Definition iforallEq_obligation : Type := forall G A B I K L ext1 ext0, tr G (dof ext1 (app (app (app eq (app kind I)) K) L)) -> tr (cons (hyp_tm K) G) (dof ext0 (app (app eqtp A) B)) -> tr G (dof triv (app (app eqtp (app (app (app iforall I) K) (lam A))) (app (app (app iforall I) L) (lam B)))).
Definition iforallFormUniv_obligation : Type := forall G A I J K ext2 ext1 ext0, tr G (dof ext2 (app (app of (app kind I)) K)) -> tr G (dof ext1 (app (app lleq I) J)) -> tr (cons (hyp_tm K) G) (dof ext0 (app (app of (app univ (subst (sh 1) J))) A)) -> tr G (dof triv (app (app of (app univ J)) (app (app (app iforall I) K) (lam A)))).
Definition iforallEqUniv_obligation : Type := forall G A B I J K L ext2 ext1 ext0, tr G (dof ext2 (app (app (app eq (app kind I)) K) L)) -> tr G (dof ext1 (app (app lleq I) J)) -> tr (cons (hyp_tm K) G) (dof ext0 (app (app (app eq (app univ (subst (sh 1) J))) A) B)) -> tr G (dof triv (app (app (app eq (app univ J)) (app (app (app iforall I) K) (lam A))) (app (app (app iforall I) L) (lam B)))).
Definition iforallIntroOf_obligation : Type := forall G A I K M ext1 ext0, tr G (dof ext1 (app (app of (app kind I)) K)) -> tr (cons (hyp_tm K) G) (dof ext0 (app (app of A) (subst (sh 1) M))) -> tr G (dof triv (app (app of (app (app (app iforall I) K) (lam A))) M)).
Definition iforallIntroEq_obligation : Type := forall G A I K M N ext1 ext0, tr G (dof ext1 (app (app of (app kind I)) K)) -> tr (cons (hyp_tm K) G) (dof ext0 (app (app (app eq A) (subst (sh 1) M)) (subst (sh 1) N))) -> tr G (dof triv (app (app (app eq (app (app (app iforall I) K) (lam A))) M) N)).
Definition iforallIntro_obligation : Type := forall G A I K ext0 M, hygiene (fun i => i <> 0) M -> tr G (dof ext0 (app (app of (app kind I)) K)) -> tr (cons (hyp_tm K) G) (dof M A) -> tr G (dof (subst (dot triv (sh 0)) M) (app (app (app iforall I) K) (lam A))).
Definition iforallElimOf_obligation : Type := forall G A I K M P ext2 ext1 ext0, tr (cons (hyp_tm K) G) (dof ext2 (app istp A)) -> tr G (dof ext1 (app (app of (app (app (app iforall I) K) (lam A))) M)) -> tr G (dof ext0 (app (app of K) P)) -> tr G (dof triv (app (app of (subst (dot P (sh 0)) A)) M)).
Definition iforallElimEq_obligation : Type := forall G A I K M N P ext2 ext1 ext0, tr (cons (hyp_tm K) G) (dof ext2 (app istp A)) -> tr G (dof ext1 (app (app (app eq (app (app (app iforall I) K) (lam A))) M) N)) -> tr G (dof ext0 (app (app of K) P)) -> tr G (dof triv (app (app (app eq (subst (dot P (sh 0)) A)) M) N)).
Definition iforallElim_obligation : Type := forall G A I K P ext1 M ext0, tr (cons (hyp_tm K) G) (dof ext1 (app istp A)) -> tr G (dof M (app (app (app iforall I) K) (lam A))) -> tr G (dof ext0 (app (app of K) P)) -> tr G (dof M (subst (dot P (sh 0)) A)).
Definition foralltpForm_obligation : Type := forall G A ext0, tr (cons hyp_tp G) (dof ext0 (app istp A)) -> tr G (dof triv (app istp (app foralltp (lam A)))).
Definition foralltpEq_obligation : Type := forall G A B ext0, tr (cons hyp_tp G) (dof ext0 (app (app eqtp A) B)) -> tr G (dof triv (app (app eqtp (app foralltp (lam A))) (app foralltp (lam B)))).
Definition foralltpIntroOf_obligation : Type := forall G A M ext0, tr (cons hyp_tp G) (dof ext0 (app (app of A) (subst (sh 1) M))) -> tr G (dof triv (app (app of (app foralltp (lam A))) M)).
Definition foralltpIntroEq_obligation : Type := forall G A M N ext0, tr (cons hyp_tp G) (dof ext0 (app (app (app eq A) (subst (sh 1) M)) (subst (sh 1) N))) -> tr G (dof triv (app (app (app eq (app foralltp (lam A))) M) N)).
Definition foralltpIntro_obligation : Type := forall G A M, hygiene (fun i => i <> 0) M -> tr (cons hyp_tp G) (dof M A) -> tr G (dof (subst (dot triv (sh 0)) M) (app foralltp (lam A))).
Definition foralltpElimOf_obligation : Type := forall G A B M ext2 ext1 ext0, tr (cons hyp_tp G) (dof ext2 (app istp A)) -> tr G (dof ext1 (app (app of (app foralltp (lam A))) M)) -> tr G (dof ext0 (app istp B)) -> tr G (dof triv (app (app of (subst (dot B (sh 0)) A)) M)).
Definition foralltpElimEq_obligation : Type := forall G A B M N ext2 ext1 ext0, tr (cons hyp_tp G) (dof ext2 (app istp A)) -> tr G (dof ext1 (app (app (app eq (app foralltp (lam A))) M) N)) -> tr G (dof ext0 (app istp B)) -> tr G (dof triv (app (app (app eq (subst (dot B (sh 0)) A)) M) N)).
Definition foralltpElim_obligation : Type := forall G A B ext1 M ext0, tr (cons hyp_tp G) (dof ext1 (app istp A)) -> tr G (dof M (app foralltp (lam A))) -> tr G (dof ext0 (app istp B)) -> tr G (dof M (subst (dot B (sh 0)) A)).
Definition iexistsForm_obligation : Type := forall G A I K ext1 ext0, tr G (dof ext1 (app (app of (app kind I)) K)) -> tr (cons (hyp_tm K) G) (dof ext0 (app istp A)) -> tr G (dof triv (app istp (app (app (app iexists I) K) (lam A)))).
Definition iexistsEq_obligation : Type := forall G A B I K L ext1 ext0, tr G (dof ext1 (app (app (app eq (app kind I)) K) L)) -> tr (cons (hyp_tm K) G) (dof ext0 (app (app eqtp A) B)) -> tr G (dof triv (app (app eqtp (app (app (app iexists I) K) (lam A))) (app (app (app iexists I) L) (lam B)))).
Definition iexistsFormUniv_obligation : Type := forall G A I J K ext2 ext1 ext0, tr G (dof ext2 (app (app of (app kind I)) K)) -> tr G (dof ext1 (app (app lleq I) J)) -> tr (cons (hyp_tm K) G) (dof ext0 (app (app of (app univ (subst (sh 1) J))) A)) -> tr G (dof triv (app (app of (app univ J)) (app (app (app iexists I) K) (lam A)))).
Definition iexistsEqUniv_obligation : Type := forall G A B I J K L ext2 ext1 ext0, tr G (dof ext2 (app (app (app eq (app kind I)) K) L)) -> tr G (dof ext1 (app (app lleq I) J)) -> tr (cons (hyp_tm K) G) (dof ext0 (app (app (app eq (app univ (subst (sh 1) J))) A) B)) -> tr G (dof triv (app (app (app eq (app univ J)) (app (app (app iexists I) K) (lam A))) (app (app (app iexists I) L) (lam B)))).
Definition iexistsIntroOf_obligation : Type := forall G A B I K M ext3 ext2 ext1 ext0, tr G (dof ext3 (app (app of (app kind I)) K)) -> tr (cons (hyp_tm K) G) (dof ext2 (app istp A)) -> tr G (dof ext1 (app (app of K) B)) -> tr G (dof ext0 (app (app of (subst (dot B (sh 0)) A)) M)) -> tr G (dof triv (app (app of (app (app (app iexists I) K) (lam A))) M)).
Definition iexistsIntroEq_obligation : Type := forall G A B I K M N ext3 ext2 ext1 ext0, tr G (dof ext3 (app (app of (app kind I)) K)) -> tr (cons (hyp_tm K) G) (dof ext2 (app istp A)) -> tr G (dof ext1 (app (app of K) B)) -> tr G (dof ext0 (app (app (app eq (subst (dot B (sh 0)) A)) M) N)) -> tr G (dof triv (app (app (app eq (app (app (app iexists I) K) (lam A))) M) N)).
Definition iexistsIntro_obligation : Type := forall G A B I K ext2 ext1 ext0 M, tr G (dof ext2 (app (app of (app kind I)) K)) -> tr (cons (hyp_tm K) G) (dof ext1 (app istp A)) -> tr G (dof ext0 (app (app of K) B)) -> tr G (dof M (subst (dot B (sh 0)) A)) -> tr G (dof M (app (app (app iexists I) K) (lam A))).
Definition iexistsElimOf_obligation : Type := forall G A B I K M P ext3 ext2 ext1 ext0, tr G (dof ext3 (app istp K)) -> tr (cons (hyp_tm K) G) (dof ext2 (app istp A)) -> tr (cons (hyp_tm A) (cons (hyp_tm K) G)) (dof ext1 (app (app of (subst (sh 2) B)) (subst (dot (var 0) (sh 2)) P))) -> tr G (dof ext0 (app (app of (app (app (app iexists I) K) (lam A))) M)) -> tr G (dof triv (app (app of B) (subst (dot M (sh 0)) P))).
Definition iexistsElimEq_obligation : Type := forall G A B I K M N P Q ext3 ext2 ext1 ext0, tr G (dof ext3 (app istp K)) -> tr (cons (hyp_tm K) G) (dof ext2 (app istp A)) -> tr (cons (hyp_tm A) (cons (hyp_tm K) G)) (dof ext1 (app (app (app eq (subst (sh 2) B)) (subst (dot (var 0) (sh 2)) P)) (subst (dot (var 0) (sh 2)) Q))) -> tr G (dof ext0 (app (app (app eq (app (app (app iexists I) K) (lam A))) M) N)) -> tr G (dof triv (app (app (app eq B) (subst (dot M (sh 0)) P)) (subst (dot N (sh 0)) Q))).
Definition iexistsElim_obligation : Type := forall G A B I K M ext2 ext1 P ext0, hygiene (fun i => i <> 1) P -> tr G (dof ext2 (app istp K)) -> tr (cons (hyp_tm K) G) (dof ext1 (app istp A)) -> tr (cons (hyp_tm A) (cons (hyp_tm K) G)) (dof P (subst (sh 2) B)) -> tr G (dof ext0 (app (app of (app (app (app iexists I) K) (lam A))) M)) -> tr G (dof (subst (dot M (dot triv (sh 0))) P) B).
Definition iexistsElimOfDep_obligation : Type := forall G A B I K M P ext3 ext2 ext1 ext0, tr G (dof ext3 (app istp K)) -> tr (cons (hyp_tm K) G) (dof ext2 (app istp A)) -> tr (cons (hyp_tm A) (cons (hyp_tm K) G)) (dof ext1 (app (app of (subst (dot (var 0) (sh 2)) B)) (subst (dot (var 0) (sh 2)) P))) -> tr G (dof ext0 (app (app of (app (app (app iexists I) K) (lam A))) M)) -> tr G (dof triv (app (app of (subst (dot M (sh 0)) B)) (subst (dot M (sh 0)) P))).
Definition iexistsElimEqDep_obligation : Type := forall G A B I K M N P Q ext3 ext2 ext1 ext0, tr G (dof ext3 (app istp K)) -> tr (cons (hyp_tm K) G) (dof ext2 (app istp A)) -> tr (cons (hyp_tm A) (cons (hyp_tm K) G)) (dof ext1 (app (app (app eq (subst (dot (var 0) (sh 2)) B)) (subst (dot (var 0) (sh 2)) P)) (subst (dot (var 0) (sh 2)) Q))) -> tr G (dof ext0 (app (app (app eq (app (app (app iexists I) K) (lam A))) M) N)) -> tr G (dof triv (app (app (app eq (subst (dot M (sh 0)) B)) (subst (dot M (sh 0)) P)) (subst (dot N (sh 0)) Q))).
Definition iexistsElimDep_obligation : Type := forall G A B I K M ext2 ext1 P ext0, hygiene (fun i => i <> 1) P -> tr G (dof ext2 (app istp K)) -> tr (cons (hyp_tm K) G) (dof ext1 (app istp A)) -> tr (cons (hyp_tm A) (cons (hyp_tm K) G)) (dof P (subst (dot (var 0) (sh 2)) B)) -> tr G (dof ext0 (app (app of (app (app (app iexists I) K) (lam A))) M)) -> tr G (dof (subst (dot M (dot triv (sh 0))) P) (subst (dot M (sh 0)) B)).
Definition iexistsElimIstype_obligation : Type := forall G A B I K M ext3 ext2 ext1 ext0, tr G (dof ext3 (app istp K)) -> tr (cons (hyp_tm K) G) (dof ext2 (app istp A)) -> tr (cons (hyp_tm A) (cons (hyp_tm K) G)) (dof ext1 (app istp (subst (dot (var 0) (sh 2)) B))) -> tr G (dof ext0 (app (app of (app (app (app iexists I) K) (lam A))) M)) -> tr G (dof triv (app istp (subst (dot M (sh 0)) B))).
Definition iexistsElimEqtype_obligation : Type := forall G A B C I K M N ext3 ext2 ext1 ext0, tr G (dof ext3 (app istp K)) -> tr (cons (hyp_tm K) G) (dof ext2 (app istp A)) -> tr (cons (hyp_tm A) (cons (hyp_tm K) G)) (dof ext1 (app (app eqtp (subst (dot (var 0) (sh 2)) B)) (subst (dot (var 0) (sh 2)) C))) -> tr G (dof ext0 (app (app (app eq (app (app (app iexists I) K) (lam A))) M) N)) -> tr G (dof triv (app (app eqtp (subst (dot M (sh 0)) B)) (subst (dot N (sh 0)) C))).
Definition substitution_obligation : Type := forall G1 G2 A B M ext1 ext0 N, tr (List.app (substctx (sh 0) G2) (cons (hyp_tm A) G1)) (dof ext1 (app istp B)) -> tr (List.app (substctx (sh 0) G2) (cons (hyp_tm A) G1)) (dof ext0 (app (app (app eq (subst (sh (1 + length G2)) A)) (var (length G2))) (subst (sh (1 + length G2)) M))) -> tr (List.app (substctx (dot M (sh 0)) G2) G1) (dof N (subst (under (length G2) (dot M (sh 0))) B)) -> tr (List.app G2 (cons (hyp_tm A) G1)) (dof (subst (under (length G2) (sh 1)) N) B).
Definition substitutionSimple_obligation : Type := forall G1 G2 A B M ext0 N, tr (List.app (substctx (sh 0) G2) (cons (hyp_tm A) G1)) (dof ext0 (app (app (app eq (subst (sh (1 + length G2)) A)) (var (length G2))) (subst (sh (1 + length G2)) M))) -> tr (List.app (substctx (dot M (sh 0)) G2) G1) (dof N B) -> tr (List.app G2 (cons (hyp_tm A) G1)) (dof (subst (under (length G2) (sh 1)) N) (subst (under (length G2) (sh 1)) B)).
Definition generalize_obligation : Type := forall G A B M ext0 N, tr G (dof ext0 (app (app of A) M)) -> tr (cons (hyp_tm A) G) (dof N B) -> tr G (dof (subst (dot M (sh 0)) N) (subst (dot M (sh 0)) B)).
Definition assert_obligation : Type := forall G A B M N, tr G (dof M A) -> tr (cons (hyp_tm A) G) (dof N (subst (sh 1) B)) -> tr G (dof (app (app lett M) (lam N)) B).
Definition assert'_obligation : Type := forall G A B M N, tr G (dof M A) -> tr (cons (hyp_tm A) G) (dof N (subst (sh 1) B)) -> tr G (dof (subst (dot M (sh 0)) N) B).
Definition inhabitant_obligation : Type := forall G A M ext0, tr G (dof ext0 (app (app of A) M)) -> tr G (dof M A).
Definition letForm_obligation : Type := forall G A B M N ext1 ext0, tr G (dof ext1 (app (app of A) M)) -> tr (cons (hyp_tm A) G) (dof ext0 (app (app of (subst (sh 1) B)) N)) -> tr G (dof triv (app (app of B) (app (app lett M) (lam N)))).
Definition eeqtpSymm_obligation : Type := forall G A B ext0, tr G (dof ext0 (app (app eeqtp B) A)) -> tr G (dof (ppair triv triv) (app (app eeqtp A) B)).
Definition weakenEqtpEeqtp_obligation : Type := forall G A B ext0, tr G (dof ext0 (app (app eqtp A) B)) -> tr G (dof (ppair triv triv) (app (app eeqtp A) B)).
Definition accInd_obligation : Type := forall G A B I M N R ext3 ext2 P ext1 ext0, tr G (dof ext3 (app (app of (app univ I)) A)) -> tr G (dof ext2 (app (app of (app (app arrow A) (app (app arrow A) (app univ I)))) R)) -> tr (cons (hyp_tm (app (app pi (subst (sh 1) A)) (lam (app (app arrow (app (app (subst (sh 2) R) (var 0)) (var 1))) (subst (dot (var 0) (sh 2)) B))))) (cons (hyp_tm A) G)) (dof P (subst (sh 1) B)) -> tr G (dof ext1 (app (app of A) M)) -> tr G (dof ext0 (app (app of (app (app (app acc A) R) M)) N)) -> tr G (dof (app (app theta (lam (lam (subst (dot (lam (lam (app (var 3) (var 1)))) (dot (var 0) (sh 2))) P)))) M) (subst (dot M (sh 0)) B)).


Definition all_obligations : list Type := forallForm_obligation :: forallEq_obligation :: forallFormUniv_obligation :: forallEqUniv_obligation :: forallSub_obligation :: forallIntroOf_obligation :: forallIntroEq_obligation :: forallIntro_obligation :: forallElimOf_obligation :: forallElimEq_obligation :: forallElim_obligation :: forallEta_obligation :: forallExt_obligation :: forallOfExt_obligation :: forallFormInv1_obligation :: forallFormInv2_obligation :: arrowForm_obligation :: arrowEq_obligation :: arrowFormUniv_obligation :: arrowEqUniv_obligation :: arrowForallEq_obligation :: arrowForallEqUniv_obligation :: arrowSub_obligation :: arrowForallSub_obligation :: forallArrowSub_obligation :: arrowIntroOf_obligation :: arrowIntroEq_obligation :: arrowIntro_obligation :: arrowElimOf_obligation :: arrowElimEq_obligation :: arrowElim_obligation :: arrowEta_obligation :: arrowExt_obligation :: arrowOfExt_obligation :: arrowFormInv1_obligation :: arrowFormInv2_obligation :: tarrowKind_obligation :: tarrowKindEq_obligation :: tarrowForm_obligation :: tarrowEq_obligation :: tarrowFormUniv_obligation :: tarrowEqUniv_obligation :: tarrowArrowEq_obligation :: tarrowArrowEqUniv_obligation :: tarrowForallEq_obligation :: tarrowForallEqUniv_obligation :: tarrowIntroOf_obligation :: tarrowIntroEq_obligation :: tarrowIntro_obligation :: tarrowElimOf_obligation :: tarrowElimEq_obligation :: tarrowElim_obligation :: tarrowEta_obligation :: tarrowExt_obligation :: tarrowOfExt_obligation :: karrowKind_obligation :: karrowKindEq_obligation :: karrowForm_obligation :: karrowEq_obligation :: karrowFormUniv_obligation :: karrowEqUniv_obligation :: karrowArrowEq_obligation :: karrowArrowEqUniv_obligation :: karrowForallEq_obligation :: karrowForallEqUniv_obligation :: karrowIntroOf_obligation :: karrowIntroEq_obligation :: karrowIntro_obligation :: karrowElimOf_obligation :: karrowElimEq_obligation :: karrowElim_obligation :: karrowEta_obligation :: karrowExt_obligation :: karrowOfExt_obligation :: intersectForm_obligation :: intersectEq_obligation :: intersectFormUniv_obligation :: intersectEqUniv_obligation :: intersectIntroOf_obligation :: intersectIntroEq_obligation :: intersectIntro_obligation :: intersectElimOf_obligation :: intersectElimEq_obligation :: intersectElim_obligation :: intersectFormInv1_obligation :: intersectFormInv2_obligation :: guardForm_obligation :: guardEq_obligation :: guardFormUniv_obligation :: guardEqUniv_obligation :: guardIntroOf_obligation :: guardIntroEq_obligation :: guardIntro_obligation :: guardElimOf_obligation :: guardElimEq_obligation :: guardElim_obligation :: guardSatEq_obligation :: existsForm_obligation :: existsEq_obligation :: existsFormUniv_obligation :: existsEqUniv_obligation :: existsSub_obligation :: existsIntroOf_obligation :: existsIntroEq_obligation :: existsIntro_obligation :: existsElim1Of_obligation :: existsElim1Eq_obligation :: existsElim1_obligation :: existsElim2Of_obligation :: existsElim2Eq_obligation :: existsEta_obligation :: existsExt_obligation :: existsLeft_obligation :: existsFormInv1_obligation :: existsFormInv2_obligation :: existsFormInv2Eq_obligation :: prodKind_obligation :: prodKindEq_obligation :: prodForm_obligation :: prodEq_obligation :: prodFormUniv_obligation :: prodEqUniv_obligation :: prodExistsEq_obligation :: prodExistsEqUniv_obligation :: prodSub_obligation :: prodExistsSub_obligation :: existsProdSub_obligation :: prodIntroOf_obligation :: prodIntroEq_obligation :: prodIntro_obligation :: prodElim1Of_obligation :: prodElim1Eq_obligation :: prodElim1_obligation :: prodElim2Of_obligation :: prodElim2Eq_obligation :: prodElim2_obligation :: prodEta_obligation :: prodExt_obligation :: prodLeft_obligation :: prodFormInv1_obligation :: prodFormInv2_obligation :: unionForm_obligation :: unionEq_obligation :: unionFormUniv_obligation :: unionEqUniv_obligation :: unionIntroOf_obligation :: unionIntroEq_obligation :: unionIntro_obligation :: unionElimOf_obligation :: unionElimEq_obligation :: unionElim_obligation :: unionElimOfDep_obligation :: unionElimEqDep_obligation :: unionElimDep_obligation :: unionElimIstype_obligation :: unionElimEqtype_obligation :: sumForm_obligation :: sumEq_obligation :: sumFormUniv_obligation :: sumEqUniv_obligation :: sumSub_obligation :: sumIntro1Of_obligation :: sumIntro1Eq_obligation :: sumIntro1_obligation :: sumIntro2Of_obligation :: sumIntro2Eq_obligation :: sumIntro2_obligation :: sumElimOf_obligation :: sumElimOfNondep_obligation :: sumElimEq_obligation :: sumElim_obligation :: sumElimNondep_obligation :: sumElimIstype_obligation :: sumElimEqtype_obligation :: sumContradiction_obligation :: sumInjection1_obligation :: sumInjection2_obligation :: sum_caseType_obligation :: sumFormInv1_obligation :: sumFormInv2_obligation :: futureKind_obligation :: futureKindEq_obligation :: futureForm_obligation :: futureEq_obligation :: futureFormUniv_obligation :: futureEqUniv_obligation :: futureSub_obligation :: futureIntroOf_obligation :: futureIntroEq_obligation :: futureIntro_obligation :: futureElimOf_obligation :: futureElimOfLetnext_obligation :: futureElimOfLetnextNondep_obligation :: futureElimEq_obligation :: futureElim_obligation :: futureElimIstype_obligation :: futureElimIstypeLetnext_obligation :: futureElimEqtype_obligation :: futureEta_obligation :: futureExt_obligation :: futureLeft_obligation :: futureInjection_obligation :: recKind_obligation :: recKindEq_obligation :: recForm_obligation :: recEq_obligation :: recFormUniv_obligation :: recEqUniv_obligation :: recUnroll_obligation :: recUnrollUniv_obligation :: recBisimilar_obligation :: muForm_obligation :: muEq_obligation :: muFormUniv_obligation :: muEqUniv_obligation :: muUnroll_obligation :: muUnrollUniv_obligation :: muInd_obligation :: muIndUniv_obligation :: voidForm_obligation :: voidEq_obligation :: voidFormUniv_obligation :: voidEqUniv_obligation :: voidElim_obligation :: voidSub_obligation :: abortType_obligation :: unitKind_obligation :: unitKindEq_obligation :: unitForm_obligation :: unitEq_obligation :: unitFormUniv_obligation :: unitEqUniv_obligation :: unitIntroOf_obligation :: unitIntro_obligation :: unitExt_obligation :: unitLeft_obligation :: boolForm_obligation :: boolEq_obligation :: boolFormUniv_obligation :: boolEqUniv_obligation :: boolIntro1Of_obligation :: boolIntro2Of_obligation :: boolElimOf_obligation :: boolElimOfNondep_obligation :: boolElimEq_obligation :: boolElim_obligation :: boolElimIstype_obligation :: boolElimEqtype_obligation :: boolLeft_obligation :: boolContradiction_obligation :: iteType_obligation :: natForm_obligation :: natEq_obligation :: natFormUniv_obligation :: natEqUniv_obligation :: natElimEq_obligation :: natElimEqtype_obligation :: natUnroll_obligation :: natContradiction_obligation :: natInjection_obligation :: zeroType_obligation :: succType_obligation :: univKind_obligation :: univKindEq_obligation :: univForm_obligation :: univEq_obligation :: univFormUniv_obligation :: univFormUnivSucc_obligation :: univEqUniv_obligation :: univCumulativeOf_obligation :: univCumulativeEq_obligation :: univCumulativeSuccOf_obligation :: univSub_obligation :: univForgetOf_obligation :: univForgetEq_obligation :: univIntroEqtype_obligation :: univFormInv_obligation :: kindForm_obligation :: kindEq_obligation :: kindFormUniv_obligation :: kindEqUniv_obligation :: kindForgetOf_obligation :: kindForgetEq_obligation :: kindUnivSub_obligation :: levelForm_obligation :: levelEq_obligation :: levelFormUniv_obligation :: levelEqUniv_obligation :: lleqForm_obligation :: lleqEq_obligation :: lleqFormUniv_obligation :: lleqEqUniv_obligation :: lzeroLevel_obligation :: lsuccLevel_obligation :: lsuccEq_obligation :: lmaxLevel_obligation :: lmaxEq_obligation :: lleqRefl_obligation :: lleqTrans_obligation :: lleqZero_obligation :: lleqSucc_obligation :: lleqIncrease_obligation :: lleqMaxL_obligation :: lleqMaxR1_obligation :: lleqMaxR2_obligation :: lleqResp_obligation :: lsuccMaxDistTrans_obligation :: lzeroType_obligation :: lsuccType_obligation :: lmaxType_obligation :: eqForm_obligation :: eqEq_obligation :: eqFormUniv_obligation :: eqEqUniv_obligation :: eqIntro_obligation :: eqElim_obligation :: eqTrivialize_obligation :: eqExt_obligation :: eqLeft_obligation :: eqRefl_obligation :: eqSymm_obligation :: eqTrans_obligation :: eqFormInv1_obligation :: eqFormInv2_obligation :: eqFormInv3_obligation :: ofForm_obligation :: ofEq_obligation :: ofFormUniv_obligation :: ofEqUniv_obligation :: ofIntro_obligation :: ofElim_obligation :: ofTrivialize_obligation :: ofExt_obligation :: ofLeft_obligation :: ofEquand1_obligation :: ofEquand2_obligation :: eqtpForm_obligation :: eqtpEq_obligation :: eqtpFormUniv_obligation :: eqtpEqUniv_obligation :: eqtpIntro_obligation :: eqtpElim_obligation :: eqtpExt_obligation :: eqtpLeft_obligation :: eqtpFunct_obligation :: equivalenceOf_obligation :: equivalenceEq_obligation :: equivalence_obligation :: equivalenceLeft_obligation :: eqtpRefl_obligation :: eqtpSymm_obligation :: eqtpTrans_obligation :: istpForm_obligation :: istpEq_obligation :: istpFormUniv_obligation :: istpEqUniv_obligation :: istpIntro_obligation :: istpElim_obligation :: istpExt_obligation :: istpLeft_obligation :: inhabitedForm_obligation :: subtypeForm_obligation :: subtypeEq_obligation :: subtypeFormUniv_obligation :: subtypeEqUniv_obligation :: subtypeIntro_obligation :: subtypeElim_obligation :: subtypeExt_obligation :: subtypeLeft_obligation :: subtypeEstablish_obligation :: subsumptionOf_obligation :: subsumptionEq_obligation :: subsumption_obligation :: subsumptionLeft_obligation :: subtypeRefl_obligation :: subtypeReflEqtype_obligation :: subtypeTrans_obligation :: subtypeIstp1_obligation :: subtypeIstp2_obligation :: setForm_obligation :: setEq_obligation :: setFormUniv_obligation :: setEqUniv_obligation :: setWeakenOf_obligation :: setWeakenEq_obligation :: setWeaken_obligation :: setIntroOf_obligation :: setIntroEq_obligation :: setIntro_obligation :: setIntroOfSquash_obligation :: squashIntroOfSquash_obligation :: setElim_obligation :: setLeft_obligation :: setSquash_obligation :: setFormInv_obligation :: setSubElim_obligation :: isetForm_obligation :: isetEq_obligation :: isetFormUniv_obligation :: isetEqUniv_obligation :: isetWeakenOf_obligation :: isetWeakenEq_obligation :: isetWeaken_obligation :: isetIntroOf_obligation :: isetIntroEq_obligation :: isetIntro_obligation :: isetIntroOfSquash_obligation :: isetElim_obligation :: isetLeft_obligation :: isetFormInv1_obligation :: isetFormInv2_obligation :: isetSubElim_obligation :: squashForm_obligation :: squashEq_obligation :: squashFormUniv_obligation :: squashEqUniv_obligation :: squashIntroOf_obligation :: squashIntro_obligation :: squashElim_obligation :: squashExt_obligation :: squashLeft_obligation :: squashSub_obligation :: quotientForm_obligation :: quotientEq_obligation :: quotientFormUniv_obligation :: quotientEqUniv_obligation :: quotientIntroOf_obligation :: quotientIntroEq_obligation :: quotientElimOf_obligation :: quotientElimEq_obligation :: quotientElimIstype_obligation :: quotientElimEqtype_obligation :: quotientDescent_obligation :: quotientLeft_obligation :: quotientLeftRefl_obligation :: quotientLeftIstype_obligation :: quotientLeftEqtype_obligation :: quotientLeftOf_obligation :: quotientLeftEq_obligation :: quotientLeftOfDep_obligation :: quotientLeftEqDep_obligation :: quotientFormInv_obligation :: iforallForm_obligation :: iforallEq_obligation :: iforallFormUniv_obligation :: iforallEqUniv_obligation :: iforallIntroOf_obligation :: iforallIntroEq_obligation :: iforallIntro_obligation :: iforallElimOf_obligation :: iforallElimEq_obligation :: iforallElim_obligation :: foralltpForm_obligation :: foralltpEq_obligation :: foralltpIntroOf_obligation :: foralltpIntroEq_obligation :: foralltpIntro_obligation :: foralltpElimOf_obligation :: foralltpElimEq_obligation :: foralltpElim_obligation :: iexistsForm_obligation :: iexistsEq_obligation :: iexistsFormUniv_obligation :: iexistsEqUniv_obligation :: iexistsIntroOf_obligation :: iexistsIntroEq_obligation :: iexistsIntro_obligation :: iexistsElimOf_obligation :: iexistsElimEq_obligation :: iexistsElim_obligation :: iexistsElimOfDep_obligation :: iexistsElimEqDep_obligation :: iexistsElimDep_obligation :: iexistsElimIstype_obligation :: iexistsElimEqtype_obligation :: substitution_obligation :: substitutionSimple_obligation :: generalize_obligation :: assert_obligation :: assert'_obligation :: inhabitant_obligation :: letForm_obligation :: eeqtpSymm_obligation :: weakenEqtpEeqtp_obligation :: accInd_obligation :: nil.
