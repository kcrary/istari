
signature INDUCTION =
   sig

      type tactic = Tactic.tactic
      type 'a tacticm = 'a Tactic.tacticm
      type priority = Tactic.priority

      val inductPriority : Symbol.symbol -> priority tacticm
      val inductRaw : Symbol.symbol -> tactic
      val induct : Symbol.symbol -> tactic

      val iteratePriority : Symbol.symbol -> priority tacticm
      val iterateRaw : Symbol.symbol -> tactic
      val iterate : Symbol.symbol -> tactic

      val inductMuUnivPriority : Symbol.symbol -> ETerm.eterm -> priority tacticm
      val inductMuUnivRaw : Symbol.symbol -> ETerm.eterm -> tactic
      val inductMuUniv : Symbol.symbol -> ETerm.eterm -> tactic

   end


signature INDUCTION_INTERNAL =
   sig

      include INDUCTION


      (* tactic performs induction on hypothesis 0 *)
      val inductionTactics : Tactic.priority Tactic.tacticm ConstantTable.table


      (* maps a datatype constant to (const, nvis, nind)

         const: the datatype's iterator
         nvis: the number of visible pervasive arguments
         nind: the number of index arguments
      *)
      val iterators : (Constant.constant * int * int) ConstantTable.table


      val accInduction : Tactic.priority Tactic.tacticm

   end


structure InductionInternal :> INDUCTION_INTERNAL =
   struct

      structure T = Term
      structure J = Judgement
      structure N = Normalize
      structure D = Directory
      structure TC = Typecheck
      structure H = ConstantTable
      structure R = Reduction

      open Tactic
      open CasePervasive


      val inductionTactics : priority tacticm H.table = H.table ()


      fun inductPriority hyp =
         let
            do i = HypTactic.findhyp hyp
         in
            (cut $
             setFailure "hypotheses depend on induction variable" $
             HypTactic.exchange 0 i 1)
            >>
            let
               do (jud, _) = withgoal
            in
               (case J.hyp jud 0 of
                   J.Tm a =>
                      (case N.whnfHard a of
                          T.Elim (T.Const const, _) =>
                             (case H.find inductionTactics const of
                                 NONE =>
                                    fail "not an inductable hypothesis"

                               | SOME tac =>
                                    tac)

                        | _ =>
                             fail "not an inductable hypothesis")

                 | _ =>
                      fail "not an inductable hypothesis")
            end
         end


      fun inductRaw hyp = inductPriority hyp >> idtac

      fun induct hyp = TC.withTypecheckSnd (inductPriority hyp)


      
      val iterators : (Constant.constant * int * int) H.table = H.table ()


      exception Iterate of string

      fun tryf f sk =
         (case
             (try
                 Sum.INL (f ())
              with Iterate msg => Sum.INR msg)
          of
             Sum.INL x => sk x

           | Sum.INR msg => fail msg)
         

      (* Like HypTactic.revert0, except:
         - it doesn't try to create arrows,
         - it doesn't bother to create meaningful binders,
         - it doesn't try to cope with hidden hypotheases, and
         - its error messages are tailored to what's going on here.
      *)
      val revert0 =
         let
            do (jud, dir) = withgoal
            val dir' = D.tl dir
            val c = J.concl jud
         in
            (case J.hypOpt jud 0 of
                SOME (J.Tm a) =>
                   refine (Rule.forallElim (T.Sub (a, T.shift1)) (T.Sub (c, T.Idot (0, T.Shift 2))) T.zero)
                   >>> [
                       refine (Rule.weaken 0 1)
                       >> chdir dir',

                       refine (Rule.hypothesisOf 0)
                       ]

              | SOME _ =>
                   fail "index argument has the wrong sort"

              | NONE =>
                   (* We should have failed already if this happens. *)
                   fail "unexpected missing index argument")
         end


      fun revertVars vars =
         (case vars of
             [] => idtac

           | i :: rest =>
                (cut $
                 setFailure "hypotheses depend on index argument" $
                 HypTactic.exchange 0 i 1)
                >>
                let
                   do vars' =
                      tryf
                      (fn () =>
                          List.map
                             (fn j =>
                                 (case Int.compare i j of
                                     LESS => j-1

                                   | GREATER => j

                                   | EQUAL =>
                                        raise (Iterate "index arguments must be distinct variables")))
                             rest)
                in
                   revert0
                   >> revertVars vars'
                end)
         

      fun iteratePriority hyp =
         let
            do i = HypTactic.findhyp hyp
         in
            (cut $
             setFailure "hypotheses depend on iteration variable" $
             HypTactic.exchange 0 i 1)
            >>
            goalContextCaseT
            /| $hyp 0 $tm $whnfHard const? @ ? =>
               \(fnc const spine =>
                    (case H.find iterators const of
                        NONE =>
                           fail "not an iteratable hypothesis"

                      | SOME (iter, nvis, nind) =>
                           let
                              do vars =
                                 tryf
                                 (fn () =>
                                     let
                                        val ind =
                                           (case List.dropOpt spine nvis of
                                               NONE =>
                                                  raise (Iterate "type error in hypothesis for iteration")
      
                                             | SOME ind => ind)

                                        val (nind', vars) =
                                           List.foldl
                                              (fns elim (n, vars) =>
                                                  (case elim of
                                                      T.App m =>
                                                         (case N.simplify m of
                                                             T.Elim (T.Var v, []) => 
                                                                (* we're about to revert index 0, adjust for that *)
                                                                (n+1, v-1 :: vars)
             
                                                           | _ => 
                                                                raise (Iterate "index arguments must be variables"))

                                                    | _ => 
                                                         raise (Iterate "type error in hypothesis for iteration")))
                                              (0, [])
                                              ind
                                     in
                                        if nind = nind' then
                                           vars
                                        else
                                           raise (Iterate "type error in hypothesis for iteration")
                                     end)
                           in
                              revert0
                              >>
                              revertVars vars
                              >>
                              BackchainInternal.applyPriority (ETerm.literal $ T.Elim (T.Const iter, []))
                              >>=
                              (fn pri =>
                                  (case pri of
                                      Primary =>
                                         Rewrite.reduce [(Symbol.fromValue "concl", SOME (false, [0]))]
                                         >> idtacM Primary

                                    | _ => idtacM pri))
                           end))\

             | _ =>
               \(fnc => fail "not an iteratable hypothesis")\
            /
         end


      fun iterateRaw hyp = iteratePriority hyp >> idtac

      fun iterate hyp = TC.withTypecheckSnd (iteratePriority hyp)



      val muInduction =
         let
            do (jud, dir) = withgoal
         in
            goalContextCaseT
            / $hyp 0 $tm \Prim.mu\ (fn ? . ?) =>
              \fnc binder a =>
                  let
                     val c = J.concl jud
                     
                     val dir' =
                        D.bindhs
                        (D.tl dir)
                        [NONE, NONE, NONE, NONE]
                  in
                     refine (Rule.muInd a (T.Sub (c, T.Idot (0, T.Shift 2))) T.zero)
                     >>> [
                         chdir (D.bindVary dir binder) >> idtacM Secondary,

                         idtacM Secondary,

                         refine (Rule.weaken 4 1) >>
                         chdir dir' >> idtacM Primary,

                         refine (Rule.hypothesisOf 0) >> done
                         ]
                  end\
            /
         end


      fun inductMuUnivPriority hyp em =
         let
            do i = HypTactic.findhyp hyp
            do lv = withterm em
         in
            (cut $
             setFailure "hypotheses depend on induction variable" $
             HypTactic.exchange 0 i 1)
            >>
            let
               do (jud, dir) = withgoal

               val lv' = Term.evar ()
            in
               (* lv purportedly lives in G, blah, Gi[^]
                  we want lv' to live in G, Gi
               *)
               if
                  Unify.unify1 lv (T.Sub (lv', T.under i T.shift1))
               then
                  goalContextCaseT
                  /
                   | $hyp 0 $tm \Prim.mu\ (fn ? . ?) =>
                     \fnc binder a =>
                         let
                            val c = J.concl jud
                            
                            val dir' =
                               D.bindhs
                               (D.tl dir)
                               [NONE, NONE, NONE, NONE]
                         in
                            refine (Rule.muIndUniv a (T.Sub (c, T.Idot (0, T.Shift 2))) (T.Sub (lv', T.shift1)) T.zero)
                            >>> [
                                idtacM Secondary,
      
                                chdir (D.bindVary dir binder) >> idtacM Secondary,
      
                                idtacM Secondary,
      
                                refine (Rule.weaken 4 1) >>
                                chdir dir' >> idtacM Primary,
      
                                refine (Rule.hypothesisOf 0) >> done
                                ]
                         end\

                   | _ =>
                     \fnc => fail "not an inductable mu hypothesis"\
                  /
               else
                  fail "level depends on induction variable"
            end
         end


      fun inductMuUnivRaw hyp em = inductMuUnivPriority hyp em >> idtac

      fun inductMuUniv hyp em = TC.withTypecheckSnd (inductMuUnivPriority hyp em)


      
      val accInduction =
         goalContextCaseT
         / 
          | $hyp 0 $tm \Prim.acc\ _ _ var? =>
            \fnc v =>
                (* move Acc's argument last (except for the Acc itself) *)
                (cut $ setFailure "hypotheses depend on accessibility argument" $
                 HypTactic.exchange 1 (v-1) 1)
                >>
                let
                   do (jud, dir) = withgoal
                in
                   hypCaseT (J.hyp jud 0)
                   /
                      $tm \Prim.acc\ ? ? ($var \0\ ) =>
                      \fnc a1 r1 =>
                          let
                             (* can't fail unless the directory is corrupt *)
                             val dir' = D.tl dir

                             val a = T.evar ()
                             val r = T.evar ()
                             val c = T.evar ()
                             val e = T.evar ()

                             val () = Unify.unify (T.Sub (a, T.shift1)) a1
                             val () = Unify.unify (T.Sub (r, T.shift1)) r1
                          in
                             if not (Unify.solve ()) then
                                fail "unexpected accessibility parameter dependency"
                             else if not (Unify.unify1 (T.Sub (c, T.shift1)) (J.concl jud)) then
                                fail "conclusion depends on accessibility hypothesis"
                             else
                                (* A', Acc A[^] R[^] 0 |- C[^]
                                                       = C[1 . ^2]
                                                       = C[0 . ^3][1 . id]

                                   (A' might not be A, but we have to have at least A' <: A
                                   or we'll fail.)
                                *)
                                refine (Rule.accInd
                                           (T.Sub (a, T.Shift 2))
                                           (T.Sub (c, T.Idot (0, T.Shift 3)))
                                           e
                                           (T.Var 1)
                                           (T.Var 0)
                                           (T.Sub (r, T.Shift 2)))
                                >>> [
                                    (* A', Acc A[^] R[^] 0 |- A[^2] : U e *)
                                    idtacM Secondary,
                                    
                                    (* A', Acc A[^] R[^] 0 |- R[^2] : A[^2] -> A[^2] -> U e *)
                                    idtacM Secondary,

                                    (* A', Acc A[^] R[^] 0,
                                       A[^2]
                                       forall A[^3] . R[^4] 0 1 -> C[0 . ^4]]
                                       |- C[1 . ^4]
                                    *)
                                    refine (Rule.weaken 2 2)
                                    >>
                                    (* A, forall A[^] . R[^2] 0 1 -> C[0 . ^2] |- C[1 . ^2] *)
                                    chdir (D.bind0 dir')
                                    >>
                                    idtacM Primary,

                                    (* A', Acc A[^] R[^] 0 |- 1 : A[^2] *)
                                    idtacM Secondary,

                                    (* A', Acc A[^] R[^] 0 |- 0 : Acc A[^2] R[^2] 1 *)
                                    refine (Rule.hypothesisOf 0) >> done
                                    ]
                          end\
                   /   
                end\

          | $hyp 0 $tm \Prim.acc\ _ _ _ =>
            \fnc => fail "accessibility argument is not a variable"\

          | _ =>
            \fnc => fail "type error in accessibility induction"\
         /



      val () =
         List.app (fn (const, tac) => ConstantTable.insert inductionTactics const tac)
            [
            (Prim.mu, muInduction),
            (Prim.acc, accInduction),
            ]

   end


structure Induction :> INDUCTION = InductionInternal
