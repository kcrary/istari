
signature INVERSION =
   sig

      type tactic = Tactic.tactic
      type 'a tacticm = 'a Tactic.tacticm
      type priority = Tactic.priority

      val destructThinPriority : Symbol.symbol -> IntroPattern.ipattern -> priority tacticm
      val destructThinRaw : Symbol.symbol -> IntroPattern.ipattern -> tactic
      val destructThin : Symbol.symbol -> IntroPattern.ipattern -> tactic

      val inversionPriority : Symbol.symbol -> priority tacticm
      val inversionRaw : Symbol.symbol -> tactic
      val inversion : Symbol.symbol -> tactic

   end


structure Inversion :> INVERSION =
   struct

      structure D = Directory
      structure IP = IntroPattern
      structure J = Judgement
      structure N = Normalize
      structure S = Seq
      structure T = Term

      open Tactic
      open CasePervasive


      fun withsize tac (goal as (jud, _)) fk sk =
         tac (Seq.length (J.context jud)) goal fk sk


      (* Perform injection or substitution, where possible, on hypotheses
         n down through stop (inclusive).  Only substitute for variables
         between stop and lid (inclusive).
      *)
      fun injections lid stop n =
         if n < stop then
            idtacM Primary
         else
            goalContextCaseT
            /| $hyp \n\ $tm
                  (| \Prim.eq\ _ var? var? =>
                     \(fnc i j =>
                          if i = j then
                             HypTactic.clearn n
                             >>
                             (* one hypothesis deleted *)
                             injections (lid-1) stop (n-1)
                          else if i <= lid then
                             (* Make sure the left-hand equand is a new variable (i.e.,
                                introduced by destruction).  Note that stop <= n < i.

                                Note that the rhs is made of up index variables for the
                                hypothesis that was destructed, all of which must be old
                                variables, so there won't be a dependency problem subsituted
                                j for i.
                             *)
                             EqualityTacticInternal.substMain false i n (T.Var j)
                             >>!
                             (* two hypotheses deleted: one equality, one variable *)
                             injections (lid-2) stop (n-1)
                          else
                             injections lid stop (n-1))\
                             
                   | \Prim.eq\ _ var? ? =>
                     \(fnc i m =>
                          if i <= lid then
                             EqualityTacticInternal.substMain false i n m
                             >>!
                             injections (lid-2) stop (n-1)
                          else
                             injections lid stop (n-1))\
   
                   | \Prim.eq\ _ (const? @ _) (const? @ _) =>
                     \(fnc _ _ =>
                          let
                             do sz = withsize
                          in
                             ifthenM
                                (EqualityTactic.injectionnPriority n)
                                (fn pri =>
                                    (case pri of
                                        Primary =>
                                           let
                                              do sz' = withsize
                                              val new = sz' - sz
                                           in
                                              HypTactic.clearn (n + new)
                                              >>
                                              HypTactic.exchange 0 new n
                                              >>
                                              injections (lid - 1 + new) stop (n - 1 + new)
                                           end
      
                                      | _ => idtacM pri))
                                (injections lid stop (n-1))
                          end)\
                  )

             | _ =>
               \(fnc =>
                    injections lid stop (n-1))\
            /
         

      fun names set pats num acc =
         if num = 0 then
            List.rev acc
         else
            let
               val (symopt, pats') =
                  (case pats of
                      IP.Ident symopt :: pats' => (symopt, pats')

                    | _ :: pats' => raise (Tryf "inversion pattern expected")

                    | [] => (NONE, []))

               val (sym, set') = D.insistAndBindSet set symopt
            in
               names set' pats' (num-1) (sym :: acc)
            end


      fun destructThinMain n pat set =
         (case pat of
             IP.Or pats =>
                let
                   do sz = withsize
                   do (_, dir) = withgoal

                   (* This part is just fixing up the variable names. *)
                   fun post pat =
                      (case pat of
                          IP.And pats' =>
                             let
                                do sz' = withsize
                                val num = sz' - sz + 1
                                do (_, dir) = withgoal

                                val (front, back) = D.split dir n
                                val back' = D.shift back num
    
                                do vs =
                                   tryf (fn () => names set pats' num [])
                             in
                                chdir (D.binds (D.binds back' vs) front)
                                >> 
                                idtacM Primary
                             end

                        | _ => fail "inversion pattern expected")
                in
                   andthenlPadPri
                      (Destruct.destructnPriority n (IP.Or [])
                       >>!
                       let
                          do sz' = withsize
                          val first = n + sz' - sz
                       in
                          injections first n first
                       end)
                      (List.map post pats)
                      (post (IP.And []))
                end

           | _ =>
                fail "inversion pattern expected")


      fun destructThinPriority hyp pat =
         let
            do n = HypTactic.findhyp hyp
            do (_, dir) = withgoal
            val set = D.removeSet (D.set dir) hyp
         in
            destructThinMain n pat set
         end

      fun destructThinRaw hyp pat = destructThinPriority hyp pat >> idtac

      fun destructThin hyp pat = Typecheck.withTypecheckSnd $ destructThinPriority hyp pat


      fun inversionPriority hyp =
         let
            do (_, dir) = withgoal
         in
            HypTactic.copy hyp NONE
            >>
            destructThinMain 0 (IP.Or []) (D.set dir)
         end
         
      fun inversionRaw hyp = inversionPriority hyp >> idtac

      fun inversion hyp = Typecheck.withTypecheckSnd $ inversionPriority hyp

   end
