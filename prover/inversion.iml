
signature INVERSION =
   sig

      type tactic = Tactic.tactic
      type 'a tacticm = 'a Tactic.tacticm
      type priority = Tactic.priority
      type hypothesis = Hyp.hypothesis

      val destructThinPriority : hypothesis -> IntroPattern.ipattern -> priority tacticm
      val destructThinRaw : hypothesis -> IntroPattern.ipattern -> tactic
      val destructThin : hypothesis -> IntroPattern.ipattern -> tactic

      val destructThinCautiousPriority : hypothesis -> IntroPattern.ipattern -> priority tacticm
      val destructThinCautiousRaw : hypothesis -> IntroPattern.ipattern -> tactic
      val destructThinCautious : hypothesis -> IntroPattern.ipattern -> tactic

      val inversionPriority : hypothesis -> priority tacticm
      val inversionRaw : hypothesis -> tactic
      val inversion : hypothesis -> tactic

      val mimicPriority : hypothesis -> Symbol.symbol list -> priority tacticm
      val mimicRaw : hypothesis -> Symbol.symbol list -> tactic
      val mimic : hypothesis -> Symbol.symbol list -> tactic

   end


structure Inversion :> INVERSION =
   struct

      structure D = Directory
      structure IP = IntroPattern
      structure J = Judgement
      structure N = Normalize
      structure S = Seq
      structure T = Term

      open Tactic
      open CasePervasive

      type hypothesis = Hyp.hypothesis


      fun withsize tac (goal as (jud, _)) fk sk =
         tac (Seq.length (J.context jud)) goal fk sk


      (* Perform injection or substitution, where possible, on hypotheses
         n down through stop (inclusive).  Only substitute for variables
         between stop and lid (inclusive).
      *)
      fun injections cautious lid stop n =
         if n < stop then
            idtacM Primary
         else
            goalHypnCaseT n
            /| $tm
                  (| \Prim.eq\ _ var? var? =>
                     \(fnc i j =>
                          if i = j then
                             Hyp.clear [Hyp.NUMBER n]
                             >>
                             (* one hypothesis deleted *)
                             injections cautious (lid-1) stop (n-1)
                          else if i <= lid then
                             (* Make sure the left-hand equand is a new variable (i.e.,
                                introduced by destruction).  Note that stop <= n < i.

                                Note that the rhs is made of up index variables for the
                                hypothesis that was destructed, all of which must be old
                                variables, so there won't be a dependency problem subsituted
                                j for i.
                             *)
                             ifthenM
                                (EqualityTacticInternal.substMain false cautious i n (T.Var j))

                                (* two hypotheses deleted: one equality, one variable *)
                                (fn Primary => injections cautious (lid-2) stop (n-1)
                                  | pri => idtacM pri)

                                (* substitution failed, skip it *)
                                (lift (fn () => injections cautious lid stop (n-1)))
                          else
                             injections cautious lid stop (n-1))\
                             
                   | \Prim.eq\ _ var? ? =>
                     \(fnc i m =>
                          if i <= lid then
                             first
                                [
                                EqualityTacticInternal.substMain false cautious i n m,
                                idtacM Primary
                                ]
                             >>!
                             injections cautious (lid-2) stop (n-1)
                          else
                             injections cautious lid stop (n-1))\
   
                   | \Prim.eq\ _ (const? @ _) (const? @ _) =>
                     \(fnc _ _ =>
                          let
                             do sz = withsize
                          in
                             ifthenM
                                (EqualityTactic.injectionPriority (Hyp.NUMBER n))
                                (fn pri =>
                                    (case pri of
                                        Primary =>
                                           let
                                              do sz' = withsize
                                              val new = sz' - sz
                                           in
                                              Hyp.clear [Hyp.NUMBER (n + new)]
                                              >>
                                              Hyp.exchange 0 new n
                                              >>
                                              injections cautious (lid - 1 + new) stop (n - 1 + new)
                                           end
      
                                      | _ => idtacM pri))
                                (injections cautious lid stop (n-1))
                          end)\
                  )

             | _ =>
               \(fnc =>
                    injections cautious lid stop (n-1))\
            /
         

      fun names set pats num acc =
         if num = 0 then
            List.rev acc
         else
            let
               val (symopt, pats') =
                  (case pats of
                      IP.Ident symopt :: pats' => (symopt, pats')

                    | _ :: pats' => raise (Tryf "inversion pattern expected")

                    | [] => (NONE, []))

               val (sym, set') = D.insistAndBindSet set symopt
            in
               names set' pats' (num-1) (sym :: acc)
            end


      fun destructThinMain cautious n pat set =
         (case pat of
             IP.Or pats =>
                let
                   do sz = withsize
                   do (_, dir) = withgoal

                   (* This part is just fixing up the variable names. *)
                   fun post pat =
                      (case pat of
                          IP.And pats' =>
                             let
                                do sz' = withsize
                                val num = sz' - sz + 1
                                do (_, dir) = withgoal

                                val (front, back) = D.split dir n
                                val back' = D.shift back num
    
                                do vs =
                                   tryf (fn () => names set pats' num [])
                             in
                                chdir (D.binds (D.binds back' vs) front)
                                >> 
                                idtacM Primary
                             end

                        | _ => fail "inversion pattern expected")
                in
                   andthenlPadPri
                      (Destruct.destructPriority (Hyp.NUMBER n) (IP.Or [])
                       >>!
                       let
                          do sz' = withsize
                          val first = n + sz' - sz
                       in
                          injections cautious first n first
                       end)
                      (List.map post pats)
                      (post (IP.And []))
                end

           | _ =>
                fail "inversion pattern expected")


      fun destructThinGeneral cautious hyp pat =
         let
            do n = Hyp.findhyp hyp
            do (_, dir) = withgoal
            val set = D.removeSet (D.set dir) (D.name dir n)
         in
            destructThinMain cautious n pat set
         end

      fun destructThinPriority hyp pat = destructThinGeneral false hyp pat

      fun destructThinRaw hyp pat = destructThinPriority hyp pat >> idtac

      fun destructThin hyp pat = Typecheck.withTypecheckSnd $ destructThinPriority hyp pat

      fun destructThinCautiousPriority hyp pat = destructThinGeneral true hyp pat

      fun destructThinCautiousRaw hyp pat = destructThinCautiousPriority hyp pat >> idtac

      fun destructThinCautious hyp pat = Typecheck.withTypecheckSnd $ destructThinCautiousPriority hyp pat


      fun inversionPriority hyp =
         let
            do (_, dir) = withgoal
         in
            Hyp.copy hyp NONE
            >>
            destructThinMain false 0 (IP.Or []) (D.set dir)
         end
         
      fun inversionRaw hyp = inversionPriority hyp >> idtac

      fun inversion hyp = Typecheck.withTypecheckSnd $ inversionPriority hyp



      val dtpat = IP.Or []
      val sumpat = IP.Or [IP.Ident NONE, IP.Ident NONE]
      val natpat = IP.Or [IP.And [], IP.Ident NONE]

      fun findInfo dt constr =
         (case Datatype.info dt of
             NONE =>
                (* make mimic work for nat and sum as special cases *)
                if Constant.eq (dt, Prim.sum) then
                   if Constant.eq (constr, Prim.inl) orelse Constant.eq (constr, Prim.inr) then
                      SOME (1, sumpat)
                   else
                      NONE

                else if Constant.eq (dt, Prim.nat) then
                   if Constant.eq (constr, Prim.zero) then
                      SOME (0, natpat)
                   else if Constant.eq (constr, Prim.succ) then
                      SOME (1, natpat)
                   else
                      NONE

                else
                   NONE

           | SOME (n, (_, _, _, _, _, dts)) =>
                let
                   val (_, _, _, _, constrs) = Vector.sub dts n
                in
                   (case 
                       Vector.find
                          (fn (constr', _, _, _) => Constant.eq (constr, constr'))
                          constrs
                    of
                       NONE => NONE
   
                     | SOME (_, arity, _, _) => SOME (arity, dtpat))
                end)


      fun mimicOnce tolerant eqname sequel =
         let
            do (jud, dir) = withgoal
            val sz1 = S.length (J.context jud)
            val eq = D.lookupVar (D.idir dir) eqname
         in
            goalHypnCaseT eq
            /| $tm \Prim.eq\ ($whnfHard (const? @ _)) var? ($whnfHard (const? @ ?)) =>
               \(fnc dt h constr spine =>
                    (case findInfo dt constr of
                        NONE =>
                           if tolerant then
                              sequel (0, 0, [])
                           else
                              fail "hypothesis is not suitable for mimic"
   
                      | SOME (arity, pat) =>
                           Destruct.destructPriority (Hyp.NUMBER h) pat
                           >>!
                           let
                              do (jud, _) = withgoal
                              val sz2 = S.length (J.context jud)
                           in
                              EqualityTactic.injectionPriority (Hyp.NAME eqname)
                              >>!
                              let
                                 do (jud, dir) = withgoal
                                 val sz3 = S.length (J.context jud)
   
                                 val destructNum = sz2 - sz1 + 1
                                 val destructEqNum = destructNum - arity
                                 val injectEqNum = sz3 - sz2
                                 val neweqnames = D.suffix dir injectEqNum
                              in
                                 (* Move the equality hypotheses generated by destruct to the bottom,
                                    but above those generate by the injection.
                                 *)
                                 Hyp.exchange injectEqNum h destructEqNum
                                 >>+
                                 (* Do this after the exchange so we don't risk bollixing the count. *)
                                 Hyp.clear [Hyp.NAME eqname]
                                 >>+
                                 (* Adding arity-1 subterm variables (we destructed one).
                                    Adding destructEqNum+injectEqNum-1 equality hypothesis (we deleted
                                    one).
                                 *)
                                 sequel (arity-1, destructEqNum + injectEqNum - 1, neweqnames)
                              end
                           end))\

             | _ =>
               \(fnc =>
                    if tolerant then
                       sequel (0, 0, [])
                    else
                       fail "hypothesis is not suitable for mimic")\
            /
         end
            

      fun mimicLoop tolerant syms h vars equations eqnames =
         (case eqnames of
             [] =>
                let
                   val symslen = List.length syms
                in
                   if symslen > vars then
                      fail "too many identifiers supplied"
                   else
                      let
                         do (_, dir) = withgoal
                         
                         val (dir34, dir12) = D.split dir h
                         val dir1 = D.shift dir12 vars
                         val dir3 = List.take dir34 (h - equations)

                         val dir' =
                            D.bind0s (D.binds (D.bind0s (D.binds dir1 syms) (vars - symslen)) dir3) equations
                      in
                         chdir dir'
                         >>+
                         idtacM Primary
                      end
                end

           | eqname :: rest =>
                let
                   do (newvars, newequations, neweqnames) = mimicOnce tolerant eqname
                in
                   mimicLoop true syms (h + newequations) (vars + newvars) (equations + newequations) (neweqnames @ rest)
                end)
                
      
      fun mimicPriority hyp syms =
         let
            do j = Hyp.findhyp hyp
            do (_, dir) = withgoal
            val eqname = D.name dir j
         in
            goalHypnCaseT j
            /| $tm \Prim.eq\ _ var? (const? @ _) =>
               \(fnc i _ =>
                    (* put the equation at the bottom where it's expected *)
                    Hyp.exchange 0 j 1
                    >>+
                    mimicLoop false syms i 1 1 [eqname])\

             | $tm \Prim.eq\ _ (const? @ _) var? =>
               \(fnc _ i =>
                    (* put the equation at the bottom where it's expected *)
                    Hyp.exchange 0 j 1
                    >>+
                    (* put the equation in the expected form *)
                    EqualityTactic.symmetryInPriority (Hyp.NUMBER 0)
                    >>!
                    mimicLoop false syms i 1 1 [eqname])\

             | _ =>
               \(fnc =>
                    fail "hypothesis is not suitable for mimic")\
            /
         end

      fun mimicRaw hyp syms = mimicPriority hyp syms >> idtac

      fun mimic hyp syms =
         Typecheck.withTypecheckSnd $ mimicPriority hyp syms

   end
