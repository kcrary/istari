
signature IRRELEVANCE =
   sig

      structure IntSet : SET where type elem = int

      (* irrelevance set M

         red : M --> N
         N does not contain any i in set
         and
         returns SOME red

         or returns NONE
      *)
      val irrelevance : IntSet.set -> Term.term -> Reduction.reduction option


      (* paramappReductions M
       
         for all N, there exists P, such that for all spine,
            red1 : paramapp (fn . M) N spine --> P spine
            red2 : (fn . M) N spine --> P spine
         and
         returns (SOME (red1, red2))

         or returns NONE
      *)
      val paramappReductions : Term.term -> (Reduction.reduction * Reduction.reduction) option

   end


structure Irrelevance :> IRRELEVANCE =
   struct

      structure T = Term
      structure J = Judgement
      structure R = Reduction
      structure N = Normalize

      open Tactic


      structure IntSet = RedBlackSet (structure Elem = IntOrdered)


      val dp : (T.constant * (int list * R.reduction) list) list = 
         List.foldl
            (fns const dp =>
                (const, [([], R.unfold)]) :: dp)
            []
            [Prim.letnext, Prim.lett, Prim.letpair]


      exception Relevant

      (* set must be nonempty *)
      fun irrelevanceLoop set depth m =
         let
            (* Normalize to get the best opportunity for irrelevance.  For example,
               in  (fn f . f x) abort  the x is irrelevant, but you have to reduce
               to discover that.
            *)

            val (m, red) = AutoReduce.autowhnf dp [] m
         in
            (case m of
                T.Elim (T.Var i, spine) =>
                   if i >= depth andalso IntSet.member set (i - depth) then
                      (* Not irrelevant, so fail. *)
                      raise Relevant
                   else
                      R.trans [red, R.compat (irrelevanceSpineNomask set depth spine [])]
   
              | T.Elim (T.Const const, spine) =>
                   (case Database.findIrrelevance const of
                       SOME ((i, irrred_i) :: restmask) =>
                          let
                             val (irrred, spinereds) = irrelevanceSpineMask set depth 0 i irrred_i restmask spine R.refl []
                          in
                             R.trans [red, irrred, R.compat spinereds]
                          end
   
                     | _ =>
                          R.trans [red, R.compat (irrelevanceSpineNomask set depth spine [])])
   
              | T.Elim (n as T.Sub (T.Evar _, _), spine) =>
                   let
                      val k = IntSet.greatest set + depth + 1
   
                      val p =
                         Int.natrecDown
                            (fns i p =>
                                if i >= depth andalso IntSet.member set (i - depth) then
                                   Prune.Pundef p
                                else
                                   Prune.Pidot (i, p))
                            (Prune.Pshift k)
                            k
                   in
                      if Prune.pruneable n p then
                         R.trans [red, R.compat (irrelevanceSpineNomask set depth spine [])]
                      else
                         raise Relevant
                   end
   
              | T.Elim (n, spine) =>
                   (* This must be a type error, but just handle it. *)
                   R.trans [red,
                            R.within [0] (irrelevanceLoop set depth n),
                            R.compat (irrelevanceSpineNomask set depth spine [])]
   
              | T.Lam (_, n) =>
                   R.trans [red, 
                            R.within [0] (irrelevanceLoop set (depth+1) n)]
   
              | T.Pair (m1, m2) =>
                   R.trans [red,
                            R.within [0] (irrelevanceLoop set depth m1),
                            R.within [1] (irrelevanceLoop set depth m2)]
   
              | T.Next n =>
                   R.trans [red,
                            R.within [0] (irrelevanceLoop set depth n)]
   
              | T.Triv => red
              | T.Native _ => red
              | T.Marker _ => red
   
              | _ =>
                   raise (Fail "impossible in whnf"))
         end
   

      and irrelevanceSpineNomask set depth spine acc =
         (case spine of
             nil =>
                List.rev acc

           | T.App m :: rest =>
                irrelevanceSpineNomask set depth rest (irrelevanceLoop set depth m :: acc)

           | _ :: rest =>
                irrelevanceSpineNomask set depth rest acc)


      (* irrelevanceSpineMask set depth i j red_j restmask spine lastred acc

         we are at position i
         the next irrelevant position is j
         the irrelevance reduction for position j is red_j
         the remaining mask after (j, nextred) is restmask
         we are processing spine
         lastred is the irrelevance reduction for the last irrelevant position preceding i
         acc is the accumulated reductions for the processed spine
      *)
      and irrelevanceSpineMask set depth i j red_j restmask spine lastred acc =
         (case spine of
             [] =>
                (* partial application *)
                (lastred, List.rev acc)

           | T.App m :: restspine =>
                if i = j then
                   (case restmask of
                       [] =>
                          let
                             val spinereds = irrelevanceSpineNomask set depth restspine (R.refl :: acc)
                          in
                             (red_j, spinereds)
                          end

                     | (j', red_j') :: restmask' =>
                          irrelevanceSpineMask set depth (i+1) j' red_j' restmask' restspine red_j (R.refl :: acc))
                else
                   irrelevanceSpineMask set depth (i+1) j red_j restmask restspine lastred (irrelevanceLoop set depth m :: acc)

           | _ =>
                (* We should not encounter anything but App while we have irrelevant arguments yet to come.
                   This is surely an error, but we'll try to recover by pretending that we didn't have a mask.
                *)
                let
                   val spinereds = irrelevanceSpineNomask set depth spine acc
                in
                   (lastred, spinereds)
                end)


      fun irrelevance set m =
         if IntSet.isEmpty set then
            SOME R.refl
         else
            try
               SOME (irrelevanceLoop set 0 m)
            with
               Relevant => NONE


      fun paramappReductions m =
         (case irrelevance (IntSet.singleton 0) m of
             NONE => NONE

           | SOME red =>
                let
                   (* red : M --> M' and M' does not contain 0 *)

                   val red1 =
                      R.trans
                         [
                         (* paramapp (fn . M) N spine *)
                         R.unfold,

                         (* (fn . fn . 1 unavailable) (fn . M) N spine *)
                         R.beta 2,

                         (* (fn . M) unavailable spine *)
                         R.within [0, 0] red,

                         (* (fn . M') unavailable spine *)
                         R.beta 1,

                         (* M' [unavailable . id] spine *)
                         ]

                   val red2 =
                      R.trans
                         [
                         (* (fn . M) N spine *)
                         R.within [0, 0] red,

                         (* (fn . M') N spine *)
                         R.beta 1,

                         (* M' [N . id] = M' [unavailable . id] spine *)
                         ]
                in
                   SOME (red1, red2)
                end)

   end
