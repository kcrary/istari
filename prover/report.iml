
signature REPORT =
   sig

      val typeOf : Constant.constant -> Term.term option

      val showAll : unit -> unit
      val showModule : Namespace.address -> unit
      val show : Namespace.address -> unit        (* definition then type *)
      val show' : Namespace.address -> unit       (* type then definition *)
      val showType : Namespace.address -> unit

      val search : Constant.constant list -> Namespace.address -> unit

      (* These require the UI. *)

      val insertApp : Namespace.address -> unit
      val insertIntros : unit -> unit

      val introPrefixLength : int ref

   end


structure Report :> REPORT =
   struct

      structure T = Term

      open CasePervasive


      fun typeOf const =
         (case Database.findType const of
             NONE => NONE

           | SOME (jud, _) =>
                if Seq.null (Judgement.context jud) then
                   termCase (Judgement.concl jud)
                   /| \Prim.ov\ ? \const\ =>
                      \(fnc a => SOME a)\

                    | _ =>
                      \(fnc => NONE)\
                   /
                else
                   NONE)



      fun printAddress address =
         (case address of
             [] =>
                (* This shouldn't happen, but fail gracefully. *)
                ()

           | [sym] =>
                print (Symbol.toValue sym)

           | sym :: rest =>
                (
                print (Symbol.toValue sym);
                print ".";
                printAddress rest
                ))


      structure SLO =
         ListOrdered (structure Ordered =
                         struct
                            type t = Symbol.symbol
                            val eq = Symbol.eq

                            fun compare (s, s') =
                               String.compare (Symbol.toValue s) (Symbol.toValue s')
                         end)


      fun showConstants address = 
         List.app
            (fn (address, _, _) =>
                (
                printAddress address;
                print "\n"
                ))
            (Juliasort.sort 
                (fn ((a1, _, _), (a2, _, _)) => SLO.compare (a1, a2))
                (Namespace.dump address))


      fun showAll () =
         (
         print "\nEnvironment contains: \n";
         showConstants []
         )


      fun showModule addr =
         if Namespace.moduleExists addr then
            (
            print "\nModule ";
            printAddress addr;
            print " contains: \n";
            showConstants addr
            )
         else
            print "Module does not exist.\n\n"



        

      datatype appcount = ORDINARY of int | PARAMETRIC of int

      fun argumentCountLoop a acc =
         termCase a
         /| (\Prim.forall\ _ (fn . ?) | \Prim.forallfut\ _ (fn . ?)) =>
            \(fnc b => 
                 argumentCountLoop b
                    (case acc of
                        ORDINARY n :: rest => ORDINARY (n + 1) :: rest

                      | _ => ORDINARY 1 :: acc))\

          | (\Prim.parametric\ _ (fn . ?) | \Prim.parametricfut\ _ (fn . ?)) =>
            \(fnc b => 
                 argumentCountLoop b
                    (case acc of
                        PARAMETRIC n :: rest => PARAMETRIC (n + 1) :: rest

                      | _ => PARAMETRIC 1 :: acc))\

          | (\Prim.intersect\ _ (fn . ?) | \Prim.intersectfut\ _ (fn . ?)) =>
            \(fnc b => argumentCountLoop b acc)\

          | _ =>
            \(fnc => List.rev acc)\
         /

      fun argumentCount a implicits =
         let
            val l = argumentCountLoop a []
         in
            if implicits = 0 then
               l
            else
               (case l of
                   ORDINARY n :: rest =>
                      ORDINARY (Int.max 0 (n - implicits)) :: rest

                 | _ => [])
         end


      fun showConstantName const =
         let
            val implicits = Database.findImplicits const
         in
            print "\n";
            print (Namespace.toString const);

            if implicits = 0 then
               print "\n"
            else
               (
               print "  [";
               print (Int.toString implicits);
               print " implicit arguments]\n"
               )
         end

      fun showConstantDef const =
         (case Constant.definition const of
             NONE => ()

           | SOME m =>
                Show.showPrefixed "  = " Directory.empty m)

      fun showConstantType const =
         (case typeOf const of
             NONE =>
                print " is untyped.\n"

           | SOME t =>
                Show.showPrefixed "  : " Directory.empty t)

      fun beginInsert () = print "\x01i"
      fun endInsert () = print "\x02"

      fun showConstantApp const =
         (case typeOf const of
             NONE =>
                ()

           | SOME t =>
                let
                   val implicits = Database.findImplicits const
                in
                   beginInsert ();
                   print " ";
   
                   List.app
                      (fn ORDINARY 1 =>
                             print "_ "
   
                        | ORDINARY n =>
                             (
                             print "_# ";
                             print (Int.toString n);
                             print " "
                             )
   
                        | PARAMETRIC 1 =>
                             print "Ap _ "
   
                        | PARAMETRIC n =>
                             (
                             print "Ap_# ";
                             print (Int.toString n);
                             print " "
                             ))
                      (argumentCount t implicits);
   
                   endInsert ()
                end)
                
      fun showAddr addr f =
         (case Namespace.resolveOpt addr of
             NONE =>
                print "\nNo such constant.\n"

           | SOME const => f const)


      fun show addr =
         let
            do const = showAddr addr
         in
            showConstantName const;
            showConstantDef const;
            showConstantType const
         end
          
      fun show' addr =
         let
            do const = showAddr addr
         in
            showConstantName const;
            showConstantType const;
            showConstantDef const
         end

      fun showType addr =
         let
            do const = showAddr addr
         in
            showConstantName const;
            showConstantType const
         end

      fun insertApp addr =
         let
            do const = showAddr addr
         in
            showConstantName const;
            showConstantType const;
            showConstantApp const
         end



      val introPrefixLength = ref 4

      fun generateIntros dir a acc =
         termCase a
         /| ( \Prim.intersect\ _ (fn ? . ?)
            | \Prim.forall\ _ (fn ? . ?)
            | \Prim.parametric\ _ (fn ? . ?)
            | \Prim.forallfut\ _ (fn ? . ?)
            | \Prim.intersectfut\ _ (fn ? . ?)
            | \Prim.parametricfut\ _ (fn ? . ?)
            | \Prim.lett\ _ (fn ? . ?)
            ) =>
            \(fnc binder b =>
                 let
                    val (sym, dir') = Directory.varyAndBind dir binder
                 in
                    generateIntros dir' b (sym :: acc)
                 end)\

          | \Prim.arrow\ ? ? =>
            \(fnc dom cod =>
                 let
                    val binder =
                       (case Normalize.simplify dom of
                           T.Elim (T.Const const, _) =>
                              let
                                 val str = Symbol.toValue (Namespace.lastname const)

                                 val str' =
                                    String.substring
                                       str
                                       0
                                       (Int.min (String.length str) (!introPrefixLength))
                              in
                                 SOME (Symbol.fromValue ("H" ^ str'))
                              end

                         | _ =>
                              NONE)

                    val (sym, dir') = Directory.varyAndBind dir binder
                 in
                    generateIntros dir' cod (sym :: acc)
                 end)\

          | _ =>
            \(fnc => List.rev acc)\
         /

      fun insertIntros () =
         let
            val (jud, dir) = Prover.currentGoal ()
            val syms = generateIntros dir (Judgement.concl jud) []
         in
            (case syms of
                [] => ()

              | sym :: rest =>
                   (
                   beginInsert ();
       
                   print (Symbol.toValue sym);

                   List.app
                      (fn sym =>
                          (
                          print " ";
                          print (Symbol.toValue sym)
                          ))
                      rest;
       
                   endInsert ()
                   ))
         end


      structure Set = RedBlackSet (structure Elem = Constant.Ordered)


      exception Found


      fun appearsLoop set m s =
         (case m of
             T.Var i =>
                (case T.substVar i s of
                    T.Idx _ => set

                  | T.Term n =>
                       appearsLoop set n T.id)

           | T.Const const =>
                let
                   val set' = Set.remove set const
                in
                   if Set.isEmpty set' then
                      raise Found
                   else
                      set'
                end

           | T.Elim (h, spine) =>
                List.foldl
                   (fns elim set =>
                       (case elim of
                           T.App n =>
                              appearsLoop set n s
  
                         | _ => set))
                   (appearsLoop set h s)
                   spine

           | T.Lam (_, n) =>
                appearsLoop set n (T.under 1 s)

           | T.Pair (m1, m2) =>
                appearsLoop (appearsLoop set m1 s) m2 s

           | T.Next n =>
                appearsLoop set n s

           | T.Triv => set

           | T.Native _ => set

           | T.Marker _ => set

           | T.Sub (n, s') =>
                appearsLoop set n (T.compose s' s)

           | T.Evar eb =>
                (case T.readEbind eb of
                    SOME n => 
                       appearsLoop set n s

                  | NONE =>
                       (* Free evars shouldn't appear in a constant's type unless the user
                          is mucking about using internals.  We'll ignore this possibility.
                       *)
                       set))


      fun appears set m =
         try
            (appearsLoop set m T.id; false)
         with Found => true


      fun search targets root =
         (case targets of
             [] =>
                (* Don't dump the entire database if the user accidentally leaves targets empty. *)
                print "\nEmpty target list.\n"

           | _ =>
                let
                   val set =
                      List.foldl
                         (fns target set => Set.insert set target)
                         Set.empty
                         targets

                   val () = print "\n"

                   val found =
                      List.foldl
                         (fns (addr, const, _) found =>
                             if Set.member found const then
                                found
                             else
                                (case typeOf const of
                                    NONE => found
                
                                  | SOME t =>
                                       if appears set t then
                                          (
                                          printAddress addr;
                                          print "\n";
                                          Show.showPrefixed "  : " Directory.empty t;
                                          Set.insert found const
                                          )
                                       else
                                          found))
                            Set.empty
                            (Namespace.dump root)
                in
                   if Set.isEmpty found then
                      print "No results found.\n"
                   else
                      ()
                end)

   end
