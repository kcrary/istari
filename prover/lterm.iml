
structure ParseLTerm =
   struct

      structure T = Term
      structure P = Prim

      fun id x = x

      fun ident str = Symbol.fromValue str

      fun lam m = T.Lam (NONE, m)

      fun pair m1 m2 = T.Pair (m1, m2)

      fun app m1 m2 = T.Elim (m1, [T.App m2])
      fun app2 m1 m2 m3 = T.Elim (m1, [T.App m2, T.App m3])
      fun app3 m1 m2 m3 m4 = T.Elim (m1, [T.App m2, T.App m3, T.App m4])
      
      fun pi1 m = T.pi1 m
      fun pi2 m = T.pi2 m
      fun prev m = T.prev m
      fun next m = T.Next m

      val kEq = T.Const P.eq
      fun eq m n a = app3 kEq a m n

      val kEqtp = T.Const P.eqtp
      fun eqtp a b = app2 kEqtp a b

      fun sub m s = T.Sub (m, s)

      val triv = T.Triv
      val univ = T.Const P.univ

      fun var i = T.Var i

      fun shortConst sym = T.Const (Namespace.resolve [sym])
      fun longConst strs = T.Const (Namespace.resolve (map Symbol.fromValue strs))

      fun idot i s = T.Idot (i, s)
      fun dot m s = T.Dot (m, s)
      val shift = T.Shift
      val shift0 = T.Shift 0
      val compose = T.compose

   end


(* ETerm depends on Ident and AnyIdent *)
grammardef LTerm

   open ParseLTerm
   
   rule Ident      ::= IDENT => ident   (* excludes reserved words *)
   rule AnyIdent   ::= IDENT => ident   (* allows reserved words *)

   rule LTerm(0)   ::= "fn" "." LTerm (0) => lam

   rule LTerm(30)  ::= LTerm(31) "=" LTerm(31) ":" LTerm(31) => eq
   rule LTerm(30)  ::= LTerm(31) "=" LTerm(31) ":" "type" => eqtp

   rule LTerm(90)  ::= LTerm(90) LTerm(91) => app
   rule LTerm(90)  ::= LTerm(90) "#1" => pi1
   rule LTerm(90)  ::= LTerm(90) "#2" => pi2
   rule LTerm(90)  ::= LTerm(90) "#prev" => prev
   rule LTerm(90)  ::= "next" LTerm(91) => next

   rule LTerm(99)  ::= LTerm(99) "[" Sub "]" => sub

   rule LTerm(100) ::= "(" LTerm ")" => id
   rule LTerm(100) ::= "(" LTerm "," LTerm ")" => pair
   rule LTerm(100) ::= "(" ")" => triv
   rule LTerm(100) ::= "U" => univ

   rule LTerm(100) ::= NUMBER => var

   rule LTerm(100) ::= EMBED => id
   rule LTerm(100) ::= Ident => shortConst
   rule LTerm(100) ::= "`" AnyIdent => shortConst
   rule LTerm(100) ::= LONGID => longConst
   rule LTerm(100) ::= "`" LONGID => longConst     (* never any need for the tick, but allow it *)

   rule Sub        ::= Sub "o" Sub(1) => compose

   rule Sub(1)     ::= LTerm "." Sub(1) => dot
   rule Sub(1)     ::= NUMBER "." Sub(1) => idot
   rule Sub(1)     ::= "^" NUMBER => shift
   rule Sub(1)     ::= "id" => shift0
   rule Sub(1)     ::= "(" Sub(0) ")" => id

end


grammaron LTerm


grammardef LTermDefault

   default LTerm

end
