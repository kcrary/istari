
structure Genesis =
   struct

      val genesis = Checkpoint.checkpoint ()

   end


structure Pervasive =
   struct

      type tactic = Tactic.tactic

      fun identity x = x
      val parseLTerm = identity
      val parseSub = identity
      val parseIdent = identity
      val parseLongident = identity
      val parseIdents = identity
      val parseOIdent = identity
      val parseIdentPat = identity
      val parseOIdents = identity
      val parseBinding = identity
      val parseBindings = identity
      val parseTerm = ETerm.closed
      val parseETerm = identity
      val parseLevel = identity
      val parseHypothesis = identity
      val parseIntroPatternAtom = identity
      val parseIntroPattern = identity
      val parseIntroPatterns = identity
      val parseRewriteTarget = identity
      val parseTarget = identity
      val parseTargets = identity
      val parseConstant = identity
      val parseConstants = identity
      val parseReducePattern = identity
      val parseDatatype = identity
      val parseRewrite = identity

      val ` = Symbol.fromValue

      val ibinds = Directory.ibinds

      val idtac = Tactic.idtac
      val idtacM = Tactic.idtacM
      val fail = Tactic.fail
      val done = Tactic.done
      val cut = Tactic.cut
      val lift = Tactic.lift
      val andthen = Tactic.andthen
      val andthen1 = Tactic.andthen1
      val andthenl = Tactic.andthenl
      val andthenlPad = Tactic.andthenlPad
      val andthenOn = Tactic.andthenOn
      val andthenM = Tactic.andthenM
      val andthenlM = Tactic.andthenlM
      val andthenlPadM = Tactic.andthenlPadM
      val andthenOnM = Tactic.andthenOnM
      val andthenFoldM = Tactic.andthenFoldM
      val attempt = Tactic.attempt
      val first = Tactic.first
      val repeat = Tactic.repeat
      val repeatn = Tactic.repeatn
      val orthen = Tactic.orthen
      val ifthen = Tactic.ifthen
      val ifthenM = Tactic.ifthenM
      val withterm = Tactic.withterm
      val >> = Tactic.>>
      val >>> = Tactic.>>>
      val >>+ = Tactic.>>+
      val >>= = Tactic.>>=
      val >>>= = Tactic.>>>=
      val >>! = Tactic.>>!
      val >>>! = Tactic.>>>!

      val pull = Prover.pull
      val push = Prover.push
      val lemma = Prover.lemma
      val qed = Prover.qed
      val typechecker = Prover.typechecker
      val parseCurr = Prover.parseCurr

      open CasePervasive

      val typecheck = Typecheck.typecheck
      val withTypecheck = Typecheck.withTypecheck
      val withTypecheckSnd = Typecheck.withTypecheckSnd
      val inference = Typecheck.inference
      val typecheck1 = Typecheck.typecheck1
      val inferRaw = Typecheck.inferRaw
      val infer = Typecheck.infer
      val inferSpineRaw = Hyp.inferSpineRaw
      val inferSpine = Hyp.inferSpine
      val trivialize = Typecheck.trivialize
      val trivializeRaw = Typecheck.trivializeRaw

      val hyp = Hyp.hyp
      val hypof = Hyp.hypof
      val rename = Hyp.rename
      val reintro = Hyp.reintro
      val renameBefore = Hyp.renameBefore
      val clear = Hyp.clear
      val renameOver = Hyp.renameOver
      val moven = Hyp.moven
      val movePos = Hyp.movePos
      val moveBefore = Hyp.moveBefore
      val moveAfter = Hyp.moveAfter
      val moveBeforeDeps = Hyp.moveBeforeDeps
      val copy = Hyp.copy
      val revert = Hyp.revert
      val revertDep = Hyp.revertDep
      val set = Hyp.set
      val assumption = Hyp.assumption
      val eassumption = Hyp.eassumption
      val unhideRaw = Hyp.unhideRaw
      val unhide = Hyp.unhide
      val squashHidden = Hyp.squashHidden

      val change = MiscTactic.change
      val exfalso = MiscTactic.exfalso
      val trustme = MiscTactic.trustme

      val destructRaw = Destruct.destructRaw
      val destruct = Destruct.destruct
      val destructSetRaw = Destruct.destructSetRaw
      val destructSet = Destruct.destructSet
      val assertRaw = Destruct.assertRaw
      val assert = Destruct.assert
      val assertThen = Destruct.assertThen

      val introRaw = IntroTactic.introRaw
      val intro = IntroTactic.intro
      val introsRaw = IntroTactic.introsRaw
      val intros = IntroTactic.intros
      val split = IntroTactic.split
      val splitn = IntroTactic.splitn
      val leftRaw = IntroTactic.leftRaw
      val left = IntroTactic.left
      val rightRaw = IntroTactic.rightRaw
      val right = IntroTactic.right
      val existsRaw = IntroTactic.existsRaw
      val exists = IntroTactic.exists
      val exactRaw = IntroTactic.exactRaw
      val exact = IntroTactic.exact
      val introOfRaw = IntroTactic.introOfRaw
      val introOf = IntroTactic.introOf
      val contrapositiveRaw = IntroTactic.contrapositiveRaw
      val contrapositive = IntroTactic.contrapositive

      val so = Backchain.so
      val soRaw = Backchain.soRaw
      val applyRaw = Backchain.applyRaw
      val apply = Backchain.apply
      val exploitRaw = Backchain.exploitRaw
      val exploit = Backchain.exploit
      val eexploitRaw = Backchain.eexploitRaw
      val eexploit = Backchain.eexploit
      val witnessRaw = Backchain.witnessRaw
      val witness = Backchain.witness

      val reflexivityRaw = EqualityTactic.reflexivityRaw
      val reflexivity = EqualityTactic.reflexivity
      val symmetryRaw = EqualityTactic.symmetryRaw
      val symmetry = EqualityTactic.symmetry
      val symmetryInRaw = EqualityTactic.symmetryInRaw
      val symmetryIn = EqualityTactic.symmetryIn
      val transitivityRaw = EqualityTactic.transitivityRaw
      val transitivity = EqualityTactic.transitivity
      val etransitivity = EqualityTactic.etransitivity
      val compatRaw = EqualityTactic.compatRaw
      val compat = EqualityTactic.compat
      val decompEq = EqualityTactic.decompEq
      val extensionalityRaw = EqualityTactic.extensionalityRaw
      val extensionality = EqualityTactic.extensionality
      val extensionalityOfRaw = EqualityTactic.extensionalityOfRaw
      val extensionalityOf = EqualityTactic.extensionalityOf
      val substitutionRaw = EqualityTactic.substitutionRaw
      val substitution = EqualityTactic.substitution
      val substRaw = EqualityTactic.substRaw
      val substStrictRaw = EqualityTactic.substStrictRaw
      val subst = EqualityTactic.subst
      val substStrict = EqualityTactic.substStrict
      val substAll = EqualityTactic.substAll
      val injection = EqualityTactic.injection
      val injectionRaw = EqualityTactic.injectionRaw

      val subsume = SubtypeTactic.subsume
      val esubsume = SubtypeTactic.esubsume
      val eqtp = SubtypeTactic.eqtp
      val eeqtp = SubtypeTactic.eeqtp
      val forceExactRaw = SubtypeTactic.forceExactRaw
      val forceExact = SubtypeTactic.forceExact

      val generalizeAtRaw = Generalize.generalizeAtRaw
      val generalizeAt = Generalize.generalizeAt
      val generalizeRaw = Generalize.generalizeRaw
      val generalize = Generalize.generalize
      val rememberAtRaw = Generalize.rememberAtRaw
      val rememberAt = Generalize.rememberAt
      val rememberRaw = Generalize.rememberRaw
      val remember = Generalize.remember
      val setEqRaw = Generalize.setEqRaw
      val setEq = Generalize.setEq

      val rewriteRaw = Rewrite.rewriteRaw
      val rewrite = Rewrite.rewrite
      val rewriteThen = Rewrite.rewriteThen
      val testRewrite = Rewrite.testRewrite
      val showPosition = Rewrite.showPosition
      val convert = Rewrite.convert
      val convertHead = Rewrite.convertHead
      val fold = Rewrite.fold
      val convertFold = Rewrite.convertFold
      val unfold = Rewrite.unfold
      val unfoldHead = Rewrite.unfoldHead
      val roll = Rewrite.roll
      val convertRoll = Rewrite.convertRoll
      val unroll = Rewrite.unroll
      val unrollType = Rewrite.unrollType
      val unrollTypeUniv = Rewrite.unrollTypeUniv
      val reduceUsing = Rewrite.reduceUsing
      val unreduceUsing = Rewrite.unreduceUsing
      val convertUnreduceUsing = Rewrite.convertUnreduceUsing
      val reduce = Rewrite.reduce
      val whreduce = Rewrite.whreduce
      val reduceHard = Rewrite.reduceHard
      val whreduceHard = Rewrite.whreduceHard

      val sinductionRaw = Induction.sinductionRaw
      val sinduction = Induction.sinduction
      val inductionRaw = Induction.inductionRaw
      val induction = Induction.induction
      val muUnivInductionRaw = Induction.muUnivInductionRaw
      val muUnivInduction = Induction.muUnivInduction

      val defineRaw = Define.defineRaw
      val define = Define.define
      val definerecRaw = Define.definerecRaw
      val definerec = Define.definerec
      val recordTyping = Define.recordTyping
      val reductions = Define.reductions
      val makeReduction1 = Define.makeReduction1
      val makeReduction2 = Define.makeReduction2

      val defineInd = Fnind.defineInd

      val typedefRaw = Datatype.typedefRaw
      val typedef = Datatype.typedef

      val destructThinRaw = Inversion.destructThinRaw
      val destructThin = Inversion.destructThin
      val inversionRaw = Inversion.inversionRaw
      val inversion = Inversion.inversion

      val auto = Autotactic.auto
      val nauto = Autotactic.nauto
      val autoWith = Autotactic.autoWith
      val nautoWith = Autotactic.nautoWith
      val nautoWithRaw = Autotactic.nautoWithRaw

      val beginModule = Namespace.beginModule
      val endModule = Namespace.endModule
      val openModule = Namespace.openModule
      val alias = Namespace.alias

   end


grammardef Pervasive

   include CasePervasive

   start parseLTerm LTerm
   start parseSub Sub
   start parseIdent Ident
   start parseLongident Longident
   start parseIdents Idents
   start parseOIdent OIdent
   start parseIdentPat IdentPat
   start parseOIdents OIdents
   start parseBinding Binding
   start parseBindings Bindings
   start parseTerm Term
   start parseETerm Term
   start parseLevel Level
   start parseHypothesis Hypothesis
   start parseIntroPatternAtom IntroPatternAtom
   start parseIntroPattern IntroPattern
   start parseIntroPatterns IntroPatterns
   start parseRewriteTarget RewriteTarget
   start parseTarget Target
   start parseTargets Targets
   start parseConstant Constant
   start parseConstants Constants
   start parseReducePattern ReducePattern
   start parseDatatype Datatype
   start parseRewrite RewriteAims

   start ibinds _ OIdents

   start withterm Term

   start parseCurr Term

   start infer Term OIdent
   start inferRaw Term OIdent
   start inferSpineRaw Hypothesis Term OIdent
   start inferSpine Hypothesis Term OIdent

   start hyp Hypothesis
   start reintro IntroPatterns
   start renameBefore IntroPatterns Hypothesis
   start clear Hypotheses
   start rename Hypothesis Ident
   start renameOver Hypothesis Hypothesis
   start movePos Hypotheses
   start moveBefore Hypotheses Hypothesis
   start moveAfter Hypotheses Hypothesis
   start moveBeforeDeps Hypotheses Hypothesis
   start copy Hypothesis OIdent
   start revert Hypotheses
   start revertDep Hypotheses
   start set Ident Term
   start squashHidden Hypotheses

   start change Hypothesis Term

   start destructRaw Hypothesis IntroPattern
   start destruct Hypothesis IntroPattern

   start introRaw IntroPatterns
   start intro IntroPatterns
   start existsRaw Term
   start exists Term
   start exactRaw Term
   start exact Term
   start introOfRaw IntroPatterns
   start introOf IntroPatterns
   start contrapositiveRaw Hypothesis
   start contrapositive Hypothesis

   start soRaw Term IntroPattern
   start so Term IntroPattern
   start applyRaw Term
   start apply Term
   start exploitRaw Term IntroPattern
   start exploit Term IntroPattern
   start eexploitRaw Term IntroPattern
   start eexploit Term IntroPattern
   start witnessRaw Term
   start witness Term
   start destructSetRaw Hypothesis OIdent
   start destructSet Hypothesis OIdent
   start assertRaw Term IntroPattern
   start assert Term IntroPattern
   start assertThen Term IntroPattern _

   start symmetryInRaw Hypothesis
   start symmetryIn Hypothesis
   start transitivityRaw Term
   start transitivity Term
   start extensionalityRaw OIdents
   start extensionality OIdents
   start substitutionRaw Hypothesis Term
   start substitution Hypothesis Term
   start substRaw Hypothesis
   start substStrictRaw Hypothesis
   start subst Hypothesis
   start substStrict Hypothesis
   start injection Hypothesis
   start injectionRaw Hypothesis

   start subsume Term
   start eqtp Term
   start forceExactRaw Term
   start forceExact Term

   start generalizeAtRaw Term Term Numbers OIdent
   start generalizeAt Term Term Numbers OIdent
   start generalizeRaw Term Term OIdent
   start generalize Term Term OIdent
   start rememberAtRaw Term Term Numbers OIdent OIdent
   start rememberAt Term Term Numbers OIdent OIdent
   start rememberRaw Term Term OIdent OIdent
   start remember Term Term OIdent OIdent
   start setEqRaw Ident Term Term OIdent
   start setEq Ident Term Term OIdent

   start rewriteRaw RewriteAims
   start rewrite RewriteAims
   start rewriteThen RewriteAims _
   start testRewrite RewriteAims
   start showPosition ShortTargets
   start convert TermAims
   start convertHead ConstantTermAims
   start fold TermAims
   start convertFold TermAims
   start unfold HeadAims
   start unfoldHead HeadAims
   start roll TermAims
   start convertRoll TermAims
   start unroll HeadAims
   start unrollType ConstantAims
   start unrollTypeUniv ConstantTermAims
   start reduceUsing ReductionAims
   start unreduceUsing ReductionTermAims
   start convertUnreduceUsing ReductionTermAims
   start reduce ShortTargets
   start whreduce ShortTargets
   start reduceHard ShortTargets
   start whreduceHard ShortTargets

   start sinductionRaw Hypothesis
   start sinduction Hypothesis
   start inductionRaw Hypothesis
   start induction Hypothesis
   start muUnivInductionRaw Hypothesis Level
   start muUnivInduction Hypothesis Level

   start defineRaw DefinePattern Term
   start define DefinePattern Term Term
   start definerecRaw DefinePattern Term
   start definerec DefinePattern Term Term
   start reductions ReduceDirective
   start makeReduction1 Reduce1Directive
   start makeReduction2 Reduce2Directive

   start defineInd GroupedOIdents FnindFuncs TermsWithAnd

   start typedefRaw Datatype
   start typedef Datatype

   start destructThinRaw Hypothesis IntroPattern
   start destructThin Hypothesis IntroPattern
   start inversionRaw Hypothesis
   start inversion Hypothesis

   start autoWith AutoTools
   start nautoWith _ AutoTools
   start nautoWithRaw _ AutoTools

   start openModule Longident
   start alias Ident Constant

end


grammaron Pervasive
grammaron CasePervasive
