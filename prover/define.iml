
signature DEFINE =
   sig

      type symbol = Symbol.symbol
      type eterm = ETerm.eterm
      type constant = Constant.constant

      exception Define of string

      val defineRaw : (symbol * symbol option list * symbol option list) -> eterm -> unit
      val define : (symbol * symbol option list * symbol option list) -> eterm -> eterm -> unit
      val defineVary : (symbol * symbol option list * symbol option list) -> symbol -> eterm -> eterm -> unit

      val definerecRaw : (symbol * symbol option list * symbol option list) -> eterm -> unit
      val definerec : (symbol * symbol option list * symbol option list) -> eterm -> eterm -> unit

      val definemutrecRaw : (symbol option list * symbol option list) -> (symbol * symbol option list * eterm) list -> unit

      val recordTyping : string -> unit


      datatype element = Ordinary of symbol option | Active of constant * symbol option list

      val makeReduction :
         ((constant * element list * eterm) 
          * constant list * constant list)
         -> Reduction.ureduction

      val reductions : 
         ((constant * element list * eterm) list
          * constant list * constant list)
         -> unit

      val recordIrrelevance : constant -> int list -> unit

      val register : Reduction.ureduction -> unit

      (* registerNative i n red : arguments i .. i+n-1 must be native for the reduction to activate *)
      val registerNative : int -> int -> Reduction.ureduction -> unit

      (* reduction_to_ureduction const i red

         if    red : const i-1 ... 0 --> M
         then  red' does the same
               and
               returns red'
      *)
      val reduction_to_ureduction : constant -> int -> Reduction.reduction -> Reduction.ureduction

      (* unfold1 const n = reduction_to_ureduction const n (Reduction.trans [Reduction.unfold, Reduction.beta n]) *)
      val unfold1 : constant -> int -> Reduction.ureduction

      (* unfold1 const n = reduction_to_ureduction const n (valOf (Database.findUnroll const)) *)
      val unroll1 : constant -> int -> Reduction.ureduction

   end


signature DEFINE_INTERNAL =
   sig

      include DEFINE


      val recUnroller : Constant.constant -> Reduction.reduction

      datatype general_reduction =
         Standard of Reduction.ureduction
       | Native of int * int * Reduction.ureduction

      (* Returns all reductions registered for normalization (except primitive or imported ones). *)
      val registered : unit -> general_reduction list

      val importReduction : general_reduction -> unit

   end


structure DefineInternal :> DEFINE_INTERNAL =
   struct

      structure AR = AutoReduce
      structure C = CheckpointedRef
      structure D = Directory
      structure T = Term
      structure N = Normalize
      structure P = ProverInternal
      structure R = ReductionInternal
      structure S = Seq
      structure J = Judgement
      structure I = Irrelevance

      type symbol = Symbol.symbol
      type eterm = ETerm.eterm
      type constant = Constant.constant

      open CasePervasive
      open Tactic
      open RefineTactic

      exception Define of string

      fun signalError msg = raise (Define
                                      (String.concat
                                          [
                                          "Error: ",
                                          msg,
                                          ".\n"
                                          ]))

      val () =
         Handler.customHandler
         (fn Define msg => (print msg; true)
           | _ => false)


      fun setImplicits const n =
         if n = 0 then
            ()
         else
            Database.setImplicits const n


      fun defineRaw (name, impargs, expargs) em =
         let
            val () = P.checkpoint ()

            val args = impargs @ expargs

            val m = ETerm.closed (List.foldr ETerm.lam em args)
         
            val const = Namespace.declare name (SOME m)
         in
            setImplicits const (List.length impargs);

            print "Constant ";
            print (Symbol.toValue name);
            print " defined.\n"
         end



      fun defineVary (name, impargs, expargs) altname em ea =
         let
            val () = P.checkpoint ()

            val args = impargs @ expargs

            val dir =
               List.foldl
                  (fns arg dir => D.bindh dir arg)
                  D.empty
                  args

            val body = ETerm.withdir dir em
            val a = ETerm.closed ea

            val m =
               List.foldr
                  (fns arg m => T.Lam (arg, m))
                  body
                  args
                      
            val jud =
               J.make
                  (S.cons (J.Let m) S.empty)
                  (* The shift should be unnecessary, since a should be closed, but do it anyway. *)
                  (T.apply2 Prim.ov (T.Sub (a, T.shift1)) (T.Var 0))

            val goal = (jud, D.literal [altname])

            fun cont vs =
               (case vs of
                   [v] =>
                      (* v validates =M |- 0 : A[^] *)
                      let
                         val () = P.checkClean a

                         val const = Namespace.declare name (SOME m)

                         val jud' = J.make S.empty (T.apply2 Prim.ov a (T.Const const))

                         val tac =
                            (* |- const : A *)
                            refine (Rule.reduce (R.within [2] R.unfold))
                            >>
                            (* |- M : A *)
                            refine (Rule.letIntro m)
                            >>
                            (* =M |- M[^] : A[^] *)
                            refine (Rule.letFold 0
                                       (T.apply2 Prim.ov (T.Sub (a, T.Shift 2)) T.zero))
                            >>
                            (* =M |- 0 : A[^] *)
                            cast jud v
                      in
                         (case execute (jud', D.empty) tac of
                             Sum.INL v' =>
                                (
                                Database.setType const jud' v';
                                setImplicits const (List.length impargs);

                                print "Constant ";
                                print (Symbol.toValue name);
                                print " defined.\n"
                                )

                           | Sum.INR _ =>
                                (* This shouldn't happen. *)
                                raise (Fail "internal definition error"))
                      end

                 | _ => raise Refine.ValidationFailure)
         in
            P.setGoals [(Message.blank, goal)] cont
         end
         


      fun define (pattern as (name, impargs, expargs)) em ea = 
         defineVary pattern name em ea



      (* if    const unfolds to fix (fn . M)
         then  red : const --> M[const . id]
      *)
      fun recUnroller const =
         (case Constant.definition const of
             NONE =>
                raise (Fail "constant has no definition")

           | SOME def =>
                termCase def
                /
                 | \Prim.fix\ (fn . ?) =>
                   \fnc m =>
                       let
                          val r1 =
                             R.trans 
                                [
                                (* const *)
              
                                R.unfold, 
              
                                (* fix (fn . M) *)
              
                                R.user PrimReduction.unroll_fix,
              
                                (* (fn . M) (fix (fn . M)) *)
                                ]
              
                          val r2 = 
                             (* (fn . M) const *)
                             R.within [1] R.unfold
                             (* (fn . M) (fix (fn . M)) *)
                       in
                          R.trans
                             [
                             (* const *)
              
                             R.user
                                (R.new const [] 0 (T.app (T.Lam (NONE, m)) (T.Const const)) r1 r2),
              
                             (* (fn . M) const *)
              
                             R.beta 1
              
                             (* M[const . id] *)
                             ]
                       end\

                 | _ =>
                   \fnc => raise (Fail "constant's definition has improper form")\
                /)


      fun definerecRaw (name, impargs, expargs) em =
         let
            val () = P.checkpoint ()

            val args = impargs @ expargs

            val m = 
               T.apply1 Prim.fix
                  (ETerm.closed
                      (List.foldr ETerm.lam em (SOME name :: args)))

            val const = Namespace.declare name (SOME m)

            val arity = List.length args
         in
            setImplicits const (List.length impargs);
            Database.setUnroll const
               (R.trans [recUnroller const, R.beta arity]);

            print "Constant ";
            print (Symbol.toValue name);
            print " defined.\n"
         end


      fun definerec (name, impargs, expargs) em ea =
         let
            val () = P.checkpoint ()

            val args = impargs @ expargs

            val dir =
               List.foldl
                  (fns arg dir => D.bindh dir arg)
                  (D.literal [name])
                  args

            val body = ETerm.withdir dir em
            val a = ETerm.closed ea

            val m =
               List.foldr
                  (fns arg m => T.Lam (arg, m))
                  body
                  args

            val m' = T.apply1 Prim.fix (T.Lam (SOME name, m))
                      
            val jud =
               J.make
                  (S.cons (J.Let m') S.empty)
                  (* The shift should be unnecessary, since a should be closed, but do it anyway. *)
                  (T.apply2 Prim.ov (T.Sub (a, T.shift1)) (T.Var 0))

            val goal = (jud, D.literal [name])

            val arity = List.length args

            fun cont vs =
               (case vs of
                   [v] =>
                      (* v validates =M' |- 0 : A[^] *)
                      let
                         val () = P.checkClean a

                         val const = Namespace.declare name (SOME m')

                         val jud' = J.make S.empty (T.apply2 Prim.ov a (T.Const const))

                         val tac =
                            (* |- const : A *)
                            refine (Rule.reduce (R.within [2] R.unfold))
                            >>
                            (* |- M' : A *)
                            refine (Rule.letIntro m')
                            >>
                            (* =M' |- M'[^] : A[^] *)
                            refine (Rule.letFold 0
                                       (T.apply2 Prim.ov (T.Sub (a, T.Shift 2)) T.zero))
                            >>
                            (* =M' |- 0 : A[^] *)
                            cast jud v
                      in
                         (case execute (jud', D.empty) tac of
                             Sum.INL v' =>
                                (
                                Database.setType const jud' v';
                                setImplicits const (List.length impargs);
                                Database.setUnroll const
                                   (R.trans [recUnroller const, R.beta arity]);

                                print "Constant ";
                                print (Symbol.toValue name);
                                print " defined.\n"
                                )

                           | Sum.INR _ =>
                                (* This shouldn't happen. *)
                                raise (Fail "internal definition error"))
                      end

                 | _ => raise Refine.ValidationFailure)
         in
            P.setGoals [(Message.blank, goal)] cont
         end
             


      fun projn i =
         Int.natrecUp
            (fns _ spine => T.Pi2 :: spine)
            [T.Pi1]
            i

      fun lams args body =
         List.foldr
            (fns arg m => T.Lam (arg, m))
            body
            args
         

      fun definemutrecRaw (impargs, expargs) funcs =
         let
            val () = ProverInternal.checkpoint ()

            val pervs = impargs @ expargs

            val nPervsImplicit = List.length impargs
            val nPervs = List.length expargs + nPervsImplicit
            val nFuncs = List.length funcs
         
            val dir =
               List.foldl
                  (fns (name, _, _) dir => D.bind dir name)
                  (List.foldl
                      (fns arg dir => D.bindh dir arg)
                      D.empty
                      pervs)
                  funcs

            (* substitutes for the nFuncs innermost variables using projections from zero *)
            val s =
               Int.natrecUp
                  (fns i s =>
                      T.Dot (T.Elim (T.zero, projn i), s))
                  T.shift1
                  nFuncs

            val funcs' =
               List.map
                  (fn (name, args, body) =>
                      let
                         val dir' =
                            List.foldl
                               (fns arg dir' => D.bindh dir' arg)
                               dir
                               args

                         val func = lams args (ETerm.withdir dir' body)

                      in
                         (name, func, List.length args)
                      end)
                  funcs

            val groupname =
               (case funcs of
                   (name, _, _) :: _ =>
                      Symbol.fromValue (Symbol.toValue name ^ "_group")

                 | _ => signalError "empty definemutRaw")

            val groupbody = 
               T.Lam (SOME groupname,
                      List.foldr
                         (fns (_, func, _) group => T.Pair (T.Sub (func, s), group))
                         T.Triv
                         funcs')

            val fixgroupbody = T.apply1 Prim.fix groupbody

            val group = lams pervs fixgroupbody

            val groupconst = Namespace.declare groupname (SOME group)

            val spine =
               (* n-1 ... 0 *)
               Int.natrecUp
                  (fns i l => T.App (T.Var i) :: l)
                  []
                  nPervs

            val groupconstInst = T.Elim (T.Const groupconst, spine)

            val groupred =
               let
                  val r1 =
                     R.trans
                        [
                        (* groupconst k-1 ... 0 *)
                        R.unfold,
      
                        (* (fn ... fn . fix (fn . <func1[s], ..., funcn[s]>)) k-1 ... 0 *)
                        R.beta nPervs,
      
                        (* fix (fn . <func1[s], ..., funcn[s]>) *)
                        R.user PrimReduction.unroll_fix,
      
                        (* (fn . <func1[s], ..., funcn[s]>) (fix (fn . <func1[s], ..., funcn[s]>)) *)
                        ]
      
                  val r2 =
                     (* (fn . <func1[s], ..., funcn[s]>) (groupconst k-1 ... 0) *)
                     R.within [1]
                        (R.trans
                            [
                            (* groupconst k-1 ... 0 *)
                            R.unfold,
      
                            (* (fn ... fn . fix (fn . <func1[s], ..., funcn[s]>)) k-1 ... 0 *)
      
                            R.beta nPervs,
      
                            (* fix (fn . <func1[s], ..., funcn[s]>) *)
                            ])
                     (* (fn . <func1[s], ..., funcn[s]>) (fix (fn . <func1[s], ..., funcn[s]>)) *)
               in
                  R.trans
                     [
                     (* groupconst k-1 ... 0 elims *)
   
                     R.user
                        (R.new groupconst [] nPervs
                            (T.app groupbody groupconstInst)
                            r1 r2),
   
                     (* (fn . <func1[s], ..., funcn[s]>) (groupconst k-1 ... 0) elims *)
   
                     R.beta 1,
   
                     (* <func1[s], ..., funcn[s]>[groupconst k-1 ... 0 . id] elims
                        =
                        <..., funci[(groupconst k-1 .. 0 ##n-1) .. (groupconst k-1 .. 0 ##0) . id], ...> elims
                     *)
                     ]
               end
                         
            val allstuff =
               List.mapi
                  (fns i (name, func, nArgs) =>
                      let
                         val m = lams pervs (T.Elim (groupconstInst, projn i))
   
                         val const = Namespace.declare name (SOME m)
                      in
                         setImplicits const nPervsImplicit;
   
                         print "Constant ";
                         print (Symbol.toValue name);
                         print " defined.\n";

                         (func, const, nArgs)
                      end)
                  funcs'

            (* i doesn't actually matter here *)
            val singlered =
               R.trans
                  [
                  (* consti k-1 ... 0 *)

                  R.unfold,

                  (* (fn ... fn . groupconst k-1 ... 0 ##i) k-1 ... 0 *)
                  
                  R.beta nPervs,

                  (* groupconst k-1 ... 0 ##i *)
                  ]
         in
            List.appi
               (fns i (func, const, nArgs) =>
                   let
                      val r1 =
                         R.trans
                            [
                            (* const k-1 ... 0 *)
                            R.unfold,
  
                            (* (fn ... fn . groupconst k-1 ... 0 ##i) k-1 ... 0 *)
                            R.beta nPervs,
  
                            (* groupconst k-1 ... 0 ##i *)
                            groupred,
  
                            (* <..., funci[(groupconst k-1 .. 0 ##n-1) .. (groupconst k-1 .. 0 ##0) . id], ...> ##i *)
                            R.beta (i+1),
  
                            (* funci[(groupconst k-1 .. 0 ##n-1) .. (groupconst k-1 .. 0 ##0) . id] *)
                            ]

                      val r2 =
                         R.trans
                            [
                            (* (fn ... fn . funci) (const0 k-1 ... 0) ... (constn-1 k-1 ... 0)
                                    n
                            *)

                            R.compat
                               (Int.natrecUp
                                   (fns _ l => singlered :: l)
                                   []
                                   nFuncs),

                            (* (fn ... fn . funci) (groupconst k-1 ... 0 ##0) ... (groupconst k-1 ... 0 ##n-1) *)

                            R.beta nFuncs

                            (* funci[(groupconst k-1 ... 0 ##n-1) .. (groupconst k-1 ... 0 ##0) . id] *)
                            ]

                      val red =
                         R.trans
                            [
                            (* const k-1 ... 0 *)

                            R.user
                               (R.new const [] nPervs
                                   (T.Elim (Int.natrecUp (fns _ f => T.Lam (NONE, f)) func nFuncs,
                                            List.map
                                               (fn (_, constj, _) => T.App (T.Elim (T.Const constj, spine)))
                                               allstuff))
                                   r1 r2),

                            (* (fn ... fn . funci) (const0 k-1 ... 0) ... (constn-1 k-1 ... 0) *)

                            R.beta nFuncs
                            
                            (* funci[(constn-1 k-1 ... 0) .. (const0 k-1 ... 0) . id] *)
                            ]

                      val finalred =
                         R.trans
                            [
                            (* compact red *)
                            R.user
                               (R.new const [] nPervs 
                                   (R.reduce red (T.Elim (T.Const const, spine)))
                                   red R.refl),

                            R.beta nArgs
                            ]
                   in
                      Database.setUnroll const finalred
                   end)
               allstuff
         end



      fun recordTyping name =
         let
            val const = Namespace.resolve [Symbol.fromValue name]
         in
            (case Database.findType const of
                NONE =>
                   signalError (String.concat ["lemma ", name, " not found in database"])
   
              | SOME (j, v) =>
                   let
                      val () =
                         if Seq.null (J.context j) then
                            ()
                         else
                            signalError (name ^ " is not a typing lemma")

                      val (a, const') =
                         termCase (J.concl j)
                         /
                          | \Prim.ov\ 
                               ($as \Prim.ov\ _ (const? @ $nil))
                               \const\ =>
                            \(fnc a x => (a, x))\

                          | _ =>
                            \(fnc => signalError (name ^ " is not a typing lemma"))\
                         /

                      (* v validates J = |- const : A
                         where A has the form const' : B
                      *)

                      val a = Normalize.simplify a
                      val jud = J.make Seq.empty a

                      val v' =
                         (case Refine.refine (Rule.inhabitant a (T.Const const)) jud of
                             ([j'], validator) =>
                                (case Refine.cast j j' of
                                    NONE =>
                                       raise (Fail "impossible")

                                  | SOME f =>
                                       (case validator [f v] of
                                           (v', []) => v'

                                         | _ => raise (Fail "impossible")))

                           | _ => raise (Fail "impossible"))
                   in
                      Database.setType const' jud v'
                   end)
         end


         
      datatype general_reduction =
         Standard of R.ureduction
       | Native of int * int * R.ureduction


      (* All the registered reductions except primitive or imported ones. *)
      val theRegistered : general_reduction list C.cref = C.new []
                          

      fun registerMain exportable red =
         let
            val const = R.trigger red
         in
            RedexInternal.register red;

            if exportable then
               C.assign theRegistered (Standard red :: C.deref theRegistered)
            else
               ()
         end

      fun registerNativeMain exportable i n red =
         let
            val const = R.trigger red

            val red' = 
               R.trans
                  [R.compat (Int.natrecUp 
                                (fns _ l => R.refl :: l) 
                                (Int.natrecUp
                                    (fns _ l => R.reflNative :: l)
                                    []
                                    n)
                                i),
                   R.user red]
         in
            RedexInternal.registerNative i n red;

            if exportable then
               C.assign theRegistered (Native (i, n, red) :: C.deref theRegistered)
            else
               ()
         end
         
      val register = registerMain true
      val registerNative = registerNativeMain true
         
      fun importReduction gr =
         (case gr of
             Standard red => registerMain false red

           | Native (i, n, red) => registerNativeMain false i n red)

      fun registered () = C.deref theRegistered



      fun reduction_to_ureduction const n red =
         let
            val m =
               T.Elim (T.Const const,
                       Int.natrecUp
                          (fns i l => T.App (T.Var i) :: l)
                          []
                          n)

            val m' = R.reduce red m
         in
            R.new const [] n m' red R.refl
         end

      fun unfold1 const n =
         reduction_to_ureduction const n (R.trans [R.unfold, R.beta n])

      fun unroll1 const n =
         reduction_to_ureduction const n (Option.valOf (Database.findUnroll const))



      datatype element = Ordinary of symbol option | Active of constant * symbol option list

      fun makeReduction ((const, args, erhs), unf, unr) =
         let
            val dir =
               List.foldl
                  (fns elem dir =>
                      (case elem of
                          Ordinary osym =>
                             D.bindh dir osym

                        | Active (_, innerargs) =>
                             List.foldl
                                (fns osym dir => D.bindh dir osym)
                                dir
                                innerargs))
                  D.empty
                  args

            val (_, lhsSpine) =
               List.foldr
                  (fns elem (i, spine) =>
                      (case elem of
                          Ordinary _ =>
                             (i+1, Term.App (Term.Var i) :: spine)

                        | Active (const', innerArgs) =>
                             let
                                val (i, innerSpine) =
                                   List.foldr
                                      (fns _ (i, spine) =>
                                          (i+1, Term.App (Term.Var i) :: spine))
                                      (i, [])
                                      innerArgs
                             in
                                (i, T.App (T.Elim (T.Const const', innerSpine)) :: spine)
                             end))
                  (0, [])
                  args

            val lhs = T.Elim (T.Const const, lhsSpine)

            val rhs = ETerm.withdir dir (ETerm.explicit erhs)

            val dp =
               List.map
                  (fn const => (const, [([], R.unfold)]))
                  unf

            val dl =
               List.map
                  (fn const =>
                      (case Database.findUnroll const of
                          SOME red =>
                             (const, [], red)

                        | NONE =>
                             (
                             Message.message 20 0
                                (fn () =>
                                    (
                                    print (Namespace.toString const);
                                    print " is not unrollable"
                                    ));

                             signalError "constant is not unrollable"
                             )))
                  unr

            val (m1, red1) = AR.autoreduce true dp dl lhs
            val (m2, red2) = AR.autoreduce true dp [] rhs

            val (zonesRev, residual) =
               List.foldl
                  (fns elem (zonesRev, residual) =>
                      (case elem of
                          Ordinary _ =>
                             (zonesRev, residual+1)

                        | Active (const', innerArgs) =>
                             ((residual, const', List.length innerArgs) :: zonesRev, 0)))
                  ([], 0)
                  args
         in
            try
               Reduction.new const (List.rev zonesRev) residual rhs red1 red2
            with
            Reduction.Reduce =>
               (
               Message.message 20 0
                  (fn () =>
                      let
                         val b = !Show.showImplicits
                      in
                         Show.showImplicits := true;

                         print "Terms have no common reduct:\n";
                         Show.show dir lhs;
                         print "-->\n";
                         Show.show dir m1;
                         print "\n";
                         Show.show dir rhs;
                         print "-->\n";
                         Show.show dir m2;

                         Show.showImplicits := b
                      end);

               signalError "terms have no common reduct"
               )
         end

      
      fun reductions (pats, unf, unr) =
         let
            val () = P.checkpoint ()
         in
            List.app
               (fn (pat as (const, args, rhs)) =>
                   let
                      val red = makeReduction (pat, unf, unr)
   
                      val names =
                         "reduce_"
                         :: Symbol.toValue (Namespace.lastname const)
                         :: List.foldr
                               (fns elem l =>
                                   (case elem of
                                       Ordinary _ => l
   
                                     | Active (const', _) =>
                                          "_" :: Symbol.toValue (Namespace.lastname const') :: l))
                               []
                               args
                   in
                      register red;
                      
                      Registry.write 
                         (Symbol.fromValue (String.concat names))
                         Registry.ureduction
                         red
                   end)
               pats;
   
            Message.message 0 0 (fn () => print "Reductions registered.\n")
         end


      fun peelLambdas const i m =
         if i = 0 then
            m
         else
            termCase m
            /| fn . ? =>
               \(fnc m' =>
                    peelLambdas const (i-1) m')\

             | _ =>
               \(fnc =>
                    signalError (String.concat ["constant ", Namespace.toString const, " takes insufficient arguments"]))\
            /
            

      (* computeIrrelevance const m i mask j l lastred acc

         define  P{i} = P (if i is relevant); unavailable (if i is irrelevant)

         if    const unfolds to m
               for all j, Pj = j (if relevant) and Pj = unavailable (if irrelevant)
               mask = [ irrelevant_k | k = i-1 .. 0 ]
               j is the first prospective irrelevant argument >= i
               l is the list of prospective irrelevant arguments after j
               (j :: l) is sorted increasing
               lastred : const P0 .. Pi-1 --> const P0{0} .. Pk-1{i-1}
         then  for all k in (j :: l), redk : const P0 ... Pk --> const P0{0} .. Pk{k}
               and
               return (rev ([... (k, redk) ...] @ acc))
      *)
      fun computeIrrelevance const m i mask j l lastred acc =
         if i = j then
            let
               val n = peelLambdas const (i+1) m
            in
               (case I.irrelevance (I.IntSet.singleton 0) n of
                   NONE =>
                      signalError
                         (String.concat [
                                        "argument ",
                                        Int.toString i,
                                        " to constant ",
                                        Namespace.toString const,
                                        " is relevant"
                                        ])

                 | SOME red =>
                      let
                         (* lastred : const P0 .. Pi-1 --> const P0{0} .. Pi-1{i-1}
                            so lastred will serve as  const P0 .. Pi --> const P0{0} .. Pi-1{i-1} Pi

                            red : N --> N' where 0 not in N'
                         *)

                         val path = Int.natrecUp (fns _ path => 0 :: path) [] (i+2)

                         val redl =
                            R.trans
                               [
                               (* const i .. 0 *)
                               lastred,
                               (* const i{0} .. 1{i-1} 0 *)
                               R.unfold,
                               (* (fn .. i+1 times . N) i{0} .. 1{i-1} 0 *)

                               (* note that the spine is always nonempty *)
                               R.within path red,

                               (* (fn .. i+1 times . N') i{0} .. 1{i-1} 0 *)
                               R.beta (i+1),
                               (* N'[0 . 1{i-1} .. i{0} . id] 
                                  = N'[unavailable . 1{i-1} .. i{0} . id]
                                  = N'[0{i} . 1{i-1} .. i{0} . id]
                                  = N'[0{i} .. i{0} . id]
                               *)
                               ]

                         val mask' = true :: mask

                         val right =
                            T.Elim (T.Const const,
                                    List.revMapi
                                       (fns k irr =>
                                           if irr then
                                              T.App (T.Const Prim.unavailable)
                                           else
                                              T.App (T.Var k))
                                       mask')

                         (* Right = const i{0} .. 0{i} *)

                         val redr =
                            R.trans
                               [
                               (* const i{0} .. 0{i} *)
                               R.unfold,
                               (* (fn .. i+1 times . N) i{0} .. 0{i} *)
                               R.within path red,
                               (* (fn .. i+1 times . N') i{0} .. 0{i} *)
                               R.beta (i+1)
                               (* N'[0{i} .. i{0} . id] *)
                               ]

                         val newred = R.user $ R.new const [] (i+1) right redl redr

                         (* newred : const P0 .. Pi --> const P0{0} .. Pi{i} *)

                         val acc' = (i, newred) :: acc
                      in
                         (case l of
                             [] => 
                                List.rev acc'

                           | j' :: rest =>
                                if i < j' then
                                   computeIrrelevance const m (i+1) mask' j' rest newred acc'
                                else
                                   signalError "list of argument numbers is not strictly ordered")
                      end)
            end
         else
            computeIrrelevance const m (i+1) (false :: mask) j l lastred acc


      fun recordIrrelevance const l =
         (case l of
             [] =>
                (
                Database.setIrrelevance const [];
                Message.message 0 0 (fn () => print "Irrelevance recorded.\n")
                )

           | j :: rest =>
                (case Constant.definition const of
                    SOME m =>
                       let
                          val irr = computeIrrelevance const m 0 [] j rest R.refl []
                       in
                          Database.setIrrelevance const irr;
                          Message.message 0 0 (fn () => print "Irrelevance recorded.\n")
                       end
       
                  | NONE =>
                       signalError (String.concat ["constant ", Namespace.toString const, " is opaque"])))

   end


structure Define :> DEFINE = DefineInternal


structure ParseDefine =
   struct

      val null = []
      fun sing x = [x]
      fun cons x y = x :: y

      fun grouped_simple l = ([], l)
      fun grouped l l' = (l, l')

      fun definePattern name (impargs, expargs) = (name, impargs, expargs)

      val ordinary = Define.Ordinary
      fun active const args = Define.Active (const, args)

      fun reducePattern const args rhs = (const, args, rhs)

      fun actionsSimple x = (x, [], [])
      fun actionsUnfold unf x = (x, unf, [])
      fun actionsUnroll unr x = (x, [], unr)
      fun actionsUnfoldUnroll unf unr x = (x, unf, unr)
      fun actionsUnrollUnfold unr unf x = (x, unf, unr)

      fun app x f = f x

      fun mutFunc name args body = (name, args, body)

   end


grammardef Define

   open ParseDefine

   rule GroupedOIdents   ::= OIdents => grouped_simple
   rule GroupedOIdents   ::= "{" OIdents "}" OIdents => grouped

   rule DefinePattern    ::= Ident GroupedOIdents => definePattern

   rule ReduceElement    ::= OIdent => ordinary
   rule ReduceElement    ::= "(" Constant OIdents ")" => active

   rule ReduceElements   ::= => null
   rule ReduceElements   ::= ReduceElement ReduceElements => cons

   rule ReducePattern    ::= Constant ReduceElements "-->" Term => reducePattern

   rule ReducePatterns   ::= ReducePattern => sing
   rule ReducePatterns   ::= ReducePattern ";" ReducePatterns => cons

   rule ReduceActions    ::= => actionsSimple
   rule ReduceActions    ::= ";" => actionsSimple
   rule ReduceActions    ::= ";" "unfolding" Constants => actionsUnfold
   rule ReduceActions    ::= ";" "unrolling" Constants => actionsUnroll
   rule ReduceActions    ::= ";" "unfolding" Constants "unrolling" Constants => actionsUnfoldUnroll
   rule ReduceActions    ::= ";" "unrolling" Constants "unfolding" Constants => actionsUnrollUnfold
   
   rule Reduce1Directive ::= ReducePattern ReduceActions => app
   rule ReduceDirective  ::= ReducePatterns ReduceActions => app

   rule MutFunc          ::= Ident OIdents "=" Term => mutFunc

   rule MutFuncs         ::= MutFunc => sing
   rule MutFuncs         ::= MutFunc "and" MutFuncs => cons

end


grammaron Define
