
signature DEFINE =
   sig

      type symbol = Symbol.symbol
      type eterm = ETerm.eterm
      type constant = Constant.constant

      exception Define of string

      val defineRaw : (symbol * symbol option list * symbol option list) -> eterm -> unit
      val define : (symbol * symbol option list * symbol option list) -> eterm -> eterm -> unit

      val definerecRaw : (symbol * symbol option list * symbol option list) -> eterm -> unit
      val definerec : (symbol * symbol option list * symbol option list) -> eterm -> eterm -> unit

      val recordTyping : string -> unit


      val reductions : 
         ((constant * symbol option list * constant * symbol option list * symbol option list * eterm) list
          * constant list * constant list)
         -> unit

      val makeReduction1 : 
         ((constant * symbol option list * eterm)
          * constant list * constant list)
         -> Reduction.reduction1

      val makeReduction2 : 
         ((constant * symbol option list * constant * symbol option list * symbol option list * eterm)
          * constant list * constant list)
         -> Reduction.reduction2

      val register : Reduction.reduction2 -> unit

   end


signature DEFINE_INTERNAL =
   sig

      include DEFINE


      val recUnroller : Constant.constant -> Reduction.reduction

      (* Returns all reductions registered for normalization (except primitive or imported ones). *)
      val registered : unit -> Reduction.reduction2 list

      val importReduction : Reduction.reduction2 -> unit

   end


structure DefineInternal :> DEFINE_INTERNAL =
   struct

      structure AR = AutoReduce
      structure C = CheckpointedRef
      structure D = Directory
      structure T = Term
      structure P = ProverInternal
      structure R = ReductionInternal
      structure S = Seq
      structure J = Judgement

      structure Dict = AR.Dict

      type symbol = Symbol.symbol
      type eterm = ETerm.eterm
      type constant = Constant.constant

      open CasePervasive
      open Tactic

      exception Define of string

      fun signalError msg = raise (Define
                                      (String.concat
                                          [
                                          "Error: ",
                                          msg,
                                          ".\n"
                                          ]))

      val () =
         Handler.customHandler
         (fn Define msg => (print msg; true)
           | _ => false)


      fun setImplicits const n =
         if n = 0 then
            ()
         else
            Database.setImplicits const n


      fun defineRaw (name, impargs, expargs) em =
         let
            val () = P.checkpoint ()

            val args = impargs @ expargs

            val m = ETerm.closed (List.foldr ETerm.lam em args)
         
            val const = Namespace.declare name (SOME m)
         in
            setImplicits const (List.length impargs);

            print "Constant ";
            print (Symbol.toValue name);
            print " defined.\n"
         end



      fun define (name, impargs, expargs) em ea =
         let
            val () = P.checkpoint ()

            val args = impargs @ expargs

            val dir =
               List.foldl
                  (fns arg dir => D.bindh dir arg)
                  D.empty
                  args

            val body = ETerm.withdir dir em
            val a = ETerm.closed ea

            val m =
               List.foldr
                  (fns arg m => T.Lam (arg, m))
                  body
                  args
                      
            val jud =
               J.make
                  (S.cons (J.Let m) S.empty)
                  (* The shift should be unnecessary, since a should be closed, but do it anyway. *)
                  (T.apply2 Prim.ov (T.Sub (a, T.shift1)) (T.Var 0))

            val goal = (jud, D.literal [name])

            fun cont vs =
               (case vs of
                   [v] =>
                      (* v validates =M |- 0 : A[^] *)
                      let
                         val () = P.checkClean a

                         val const = Namespace.declare name (SOME m)

                         val jud' = J.make S.empty (T.apply2 Prim.ov a (T.Const const))

                         val tac =
                            (* |- const : A *)
                            refine (Rule.reduce (R.within [2] R.unfold))
                            >>
                            (* |- M : A *)
                            refine (Rule.letIntro 0 m)
                            >>
                            (* =M |- M[^] : A[^] *)
                            refine (Rule.letFold 0
                                       (T.apply2 Prim.ov (T.Sub (a, T.Shift 2)) T.zero))
                            >>
                            (* =M |- 0 : A[^] *)
                            cast jud v
                      in
                         (case execute (jud', D.empty) tac of
                             Sum.INL v' =>
                                (
                                Database.setType const jud' v';
                                setImplicits const (List.length impargs);

                                print "Constant ";
                                print (Symbol.toValue name);
                                print " defined.\n"
                                )

                           | Sum.INR _ =>
                                (* This shouldn't happen. *)
                                raise (Fail "internal definition error"))
                      end

                 | _ => raise Refine.ValidationFailure)
         in
            P.setGoals [(Message.blank, goal)] cont
         end
         


      (* if    const unfolds to fix (fn . M)
         then  red : const --> M[const . id]
      *)
      fun recUnroller const =
         (case Constant.definition const of
             NONE =>
                raise (Fail "constant has no definition")

           | SOME def =>
                termCase def
                /
                 | \Prim.fix\ (fn . ?) =>
                   \fnc m =>
                       let
                          val r1 =
                             R.trans 
                                [
                                (* const *)
              
                                R.unfold, 
              
                                (* fix (fn . M) *)
              
                                R.user1 PrimReduction.unroll_fix,
              
                                (* (fn . M) (fix (fn . M)) *)
                                ]
              
                          val r2 = 
                             (* (fn . M) const *)
                             R.within [1] R.unfold
                             (* (fn . M) (fix (fn . M)) *)
                       in
                          R.trans
                             [
                             (* const *)
              
                             R.user1 
                                (R.new1 const 0 (T.app (T.Lam (NONE, m)) (T.Const const)) r1 r2),
              
                             (* (fn . M) const *)
              
                             R.beta 1
              
                             (* M[const . id] *)
                             ]
                       end\

                 | _ =>
                   \fnc => raise (Fail "constant's definition has improper form")\
                /)


      fun definerecRaw (name, impargs, expargs) em =
         let
            val () = P.checkpoint ()

            val args = impargs @ expargs

            val m = 
               T.apply1 Prim.fix
                  (ETerm.closed
                      (List.foldr ETerm.lam em (SOME name :: args)))

            val const = Namespace.declare name (SOME m)

            val arity = List.length args
         in
            setImplicits const (List.length impargs);
            Database.setUnroll const
               (R.trans [recUnroller const, R.beta arity]);

            print "Constant ";
            print (Symbol.toValue name);
            print " defined.\n"
         end


      fun definerec (name, impargs, expargs) em ea =
         let
            val () = P.checkpoint ()

            val args = impargs @ expargs

            val dir =
               List.foldl
                  (fns arg dir => D.bindh dir arg)
                  (D.literal [name])
                  args

            val body = ETerm.withdir dir em
            val a = ETerm.closed ea

            val m =
               List.foldr
                  (fns arg m => T.Lam (arg, m))
                  body
                  args

            val m' = T.apply1 Prim.fix (T.Lam (SOME name, m))
                      
            val jud =
               J.make
                  (S.cons (J.Let m') S.empty)
                  (* The shift should be unnecessary, since a should be closed, but do it anyway. *)
                  (T.apply2 Prim.ov (T.Sub (a, T.shift1)) (T.Var 0))

            val goal = (jud, D.literal [name])

            val arity = List.length args

            fun cont vs =
               (case vs of
                   [v] =>
                      (* v validates =M' |- 0 : A[^] *)
                      let
                         val () = P.checkClean a

                         val const = Namespace.declare name (SOME m')

                         val jud' = J.make S.empty (T.apply2 Prim.ov a (T.Const const))

                         val tac =
                            (* |- const : A *)
                            refine (Rule.reduce (R.within [2] R.unfold))
                            >>
                            (* |- M' : A *)
                            refine (Rule.letIntro 0 m')
                            >>
                            (* =M' |- M'[^] : A[^] *)
                            refine (Rule.letFold 0
                                       (T.apply2 Prim.ov (T.Sub (a, T.Shift 2)) T.zero))
                            >>
                            (* =M' |- 0 : A[^] *)
                            cast jud v
                      in
                         (case execute (jud', D.empty) tac of
                             Sum.INL v' =>
                                (
                                Database.setType const jud' v';
                                setImplicits const (List.length impargs);
                                Database.setUnroll const
                                   (R.trans [recUnroller const, R.beta arity]);

                                print "Constant ";
                                print (Symbol.toValue name);
                                print " defined.\n"
                                )

                           | Sum.INR _ =>
                                (* This shouldn't happen. *)
                                raise (Fail "internal definition error"))
                      end

                 | _ => raise Refine.ValidationFailure)
         in
            P.setGoals [(Message.blank, goal)] cont
         end
             


      fun recordTyping name =
         let
            val const = Namespace.resolve [Symbol.fromValue name]
         in
            (case Database.findType const of
                NONE =>
                   signalError (String.concat ["lemma ", name, " not found in database"])
   
              | SOME (j, v) =>
                   let
                      val () =
                         if Seq.null (J.context j) then
                            ()
                         else
                            signalError (name ^ " is not a typing lemma")

                      val (a, const') =
                         termCase (J.concl j)
                         /
                          | \Prim.ov\ 
                               ($as \Prim.ov\ _ (const? @ $nil))
                               \const\ =>
                            \(fnc a x => (a, x))\

                          | _ =>
                            \(fnc => signalError (name ^ " is not a typing lemma"))\
                         /

                      (* v validates J = |- const : A
                         where A has the form const' : B
                      *)

                      val a = Normalize.simplify a
                      val jud = J.make Seq.empty a

                      val v' =
                         (case Refine.refine (Rule.inhabitant a (T.Const const)) jud of
                             ([j'], validator) =>
                                (case Refine.cast j j' of
                                    NONE =>
                                       raise (Fail "impossible")

                                  | SOME f =>
                                       (case validator [f v] of
                                           (v', []) => v'

                                         | _ => raise (Fail "impossible")))

                           | _ => raise (Fail "impossible"))
                   in
                      Database.setType const' jud v'
                   end)
         end


         
      (* natrec f x i = f (i-1) (f (i-2) (... (f 0 x) ...)) *)
      fun natrec f x i =
         if i = 0 then
            x
         else
            f (i-1) (natrec f x (i-1))



      (* All the registered reductions except primitive or imported ones. *)
      val theRegistered : R.reduction2 list C.cref = C.new []
                          
      (* All the registered reductions, in a format for autoreduce. *)
      val theStrat : R.reduction list Dict.dict C.cref =
         C.new
            (List.foldl
                (fns (const, _) d =>
                    Dict.insertMerge d const
                       [R.native]
                       (fn l => R.native :: l))
                (List.foldl
                    (fns r d =>
                        let
                           val (const, _, _) = R.triggers r
                        in
                           Dict.insertMerge d const
                              [R.user2 r]
                              (fn l => R.user2 r :: l)
                        end)
                    Dict.empty
                    PrimReductionInternal.redices)
                Native.operators)


      fun register r =
         let
            val (const, _, _) = R.triggers r
         in
            C.assign theRegistered (r :: C.deref theRegistered);

            C.assign theStrat
               (Dict.insertMerge (C.deref theStrat) const
                   [R.user2 r]
                   (fn l => R.user2 r :: l));

            RedexInternal.register r
         end

      fun importReduction r =
         let
            val (const, _, _) = R.triggers r
         in
            (* Don't put it into theRegistered, so it doesn't get written into the current file. *)

            C.assign theStrat
               (Dict.insertMerge (C.deref theStrat) const
                   [R.user2 r]
                   (fn l => R.user2 r :: l));

            RedexInternal.register r
         end

      fun registered () = C.deref theRegistered


      fun makeReduction1 ((const, args, erhs), unf, unr) =
         let
            val (n, dir) =
               List.foldl
                  (fns osym (n, dir) => (n+1, D.bindh dir osym))
                  (0, D.empty)
                  args

            val lhs =
               T.Elim (T.Const const,
                       natrec (fns i sp => T.App (T.Var i) :: sp) [] n)

            val rhs = ETerm.withdir dir (ETerm.explicit erhs)

            val dp =
               List.foldl
                  (fns const dp =>
                      Dict.insertMerge dp const
                         [R.unfold]
                         (fn l => R.unfold :: l))
                  (C.deref theStrat)
                  unf

            val dl =
               List.foldl
                  (fns const dl =>
                      (case Database.findUnroll const of
                          SOME red =>
                             Dict.insert dl const red

                        | NONE =>
                             (
                             Message.message 20 0
                                (fn () =>
                                    (
                                    print (Namespace.toString const);
                                    print " is not unrollable"
                                    ));

                             signalError "constant is not unrollable"
                             )))
                  Dict.empty
                  unr

            val (m1, r1) = AR.autoreduce' true dp dl lhs
            val (m2, r2) = AR.autoreduce' true dp Dict.empty rhs
         in
            try
               Reduction.new1 const n rhs r1 r2
            with
            Reduction.Reduce =>
               (
               Message.message 20 0
                  (fn () =>
                      let
                         val b = !Show.showImplicits
                      in
                         Show.showImplicits := true;

                         print "Terms have no common reduct:\n";
                         Show.show dir lhs;
                         print "-->\n";
                         Show.show dir m1;
                         print "\n";
                         Show.show dir rhs;
                         print "-->\n";
                         Show.show dir m2;

                         Show.showImplicits := b
                      end);

               signalError "terms have no common reduct"
               )
         end

      
      fun makeReduction2 ((const1, args1, const2, args2, args3, erhs), unf, unr) =
         let
            val (n1, dir1) =
               List.foldl
                  (fns osym (n, dir) => (n+1, D.bindh dir osym))
                  (0, D.empty)
                  args1

            val (n2, dir2) =
               List.foldl
                  (fns osym (n, dir) => (n+1, D.bindh dir osym))
                  (0, dir1)
                  args2

            val (n3, dir) =
               List.foldl
                  (fns osym (n, dir) => (n+1, D.bindh dir osym))
                  (0, dir2)
                  args3
                  
            val lhs =
               T.Elim (T.Const const1,
                       natrec 
                          (fns i sp => T.App (T.Var (n2+n3+i)) :: sp)
                          (T.App (T.Elim (T.Const const2,
                                          natrec (fns i sp => T.App (T.Var (n3+i)) :: sp) [] n2))
                           :: natrec (fns i sp => T.App (T.Var i) :: sp) [] n3)
                          n1)

            val rhs = ETerm.withdir dir (ETerm.explicit erhs)

            val dp =
               List.foldl
                  (fns const dp =>
                      Dict.insertMerge dp const
                         [R.unfold]
                         (fn l => R.unfold :: l))
                  (C.deref theStrat)
                  unf

            val dl =
               List.foldl
                  (fns const dl =>
                      (case Database.findUnroll const of
                          SOME red =>
                             Dict.insert dl const red

                        | NONE =>
                             (
                             Message.message 20 0
                                (fn () =>
                                    (
                                    print (Namespace.toString const);
                                    print " is not unrollable"
                                    ));

                             signalError "constant is not unrollable"
                             )))
                  Dict.empty
                  unr

            val (m1, r1) = AR.autoreduce' true dp dl lhs
            val (m2, r2) = AR.autoreduce' true dp Dict.empty rhs
         in
            try
               Reduction.new2 const1 n1 n3 const2 n2 rhs r1 r2
            with
            Reduction.Reduce =>
               (
               Message.message 20 0
                  (fn () =>
                      let
                         val b = !Show.showImplicits
                      in
                         Show.showImplicits := true;

                         print "Terms have no common reduct:\n";
                         Show.show dir lhs;
                         print "-->\n";
                         Show.show dir m1;
                         print "\n";
                         Show.show dir rhs;
                         print "-->\n";
                         Show.show dir m2;

                         Show.showImplicits := b
                      end);

               signalError "terms have no common reduct"
               )
         end

      
      fun reductions (pats, unf, unr) =
         let
            val () = P.checkpoint ()
         in
            List.app
               (fn (pat as (const1, _, const2, _, _, _)) =>
                   let
                      val red = makeReduction2 (pat, unf, unr)
   
                      val name1 = Symbol.toValue (Namespace.lastname const1)
                      val name2 = Symbol.toValue (Namespace.lastname const2)
                   in
                      register red;
                      
                      Registry.write 
                         (Symbol.fromValue (String.concat [name1, "_", name2]))
                         Registry.reduction2
                         red
                   end)
               pats;
   
            Message.message 0 0 (fn () => print "Reductions registered.\n")
         end

   end


structure Define :> DEFINE = DefineInternal


structure ParseDefine =
   struct

      val null = []
      fun sing x = [x]
      fun cons x y = x :: y

      fun grouped_simple l = ([], l)
      fun grouped l l' = (l, l')

      fun definePattern name (impargs, expargs) = (name, impargs, expargs)

      fun reduce1Pattern head args rhs = (head, args, rhs)
      fun reduce2Pattern head1 args1 head2 args2 args3 rhs = (head1, args1, head2, args2, args3, rhs)

      fun actionsSimple x = (x, [], [])
      fun actionsUnfold unf x = (x, unf, [])
      fun actionsUnroll unr x = (x, [], unr)
      fun actionsUnfoldUnroll unf unr x = (x, unf, unr)
      fun actionsUnrollUnfold unr unf x = (x, unf, unr)

      fun app x f = f x

   end


grammardef Define

   open ParseDefine

   rule GroupedOIdents   ::= OIdents => grouped_simple
   rule GroupedOIdents   ::= "{" OIdents "}" OIdents => grouped

   rule DefinePattern    ::= Ident GroupedOIdents => definePattern

   rule Reduce1Pattern   ::= Constant OIdents "-->" Term => reduce1Pattern
   rule Reduce2Pattern   ::= Constant OIdents "(" Constant OIdents ")" OIdents "-->" Term => reduce2Pattern
   
   rule ReducePatterns   ::= Reduce2Pattern => sing
   rule ReducePatterns   ::= Reduce2Pattern ";" ReducePatterns => cons

   rule ReduceActions    ::= => actionsSimple
   rule ReduceActions    ::= ";" => actionsSimple
   rule ReduceActions    ::= ";" "unfolding" Constants => actionsUnfold
   rule ReduceActions    ::= ";" "unrolling" Constants => actionsUnroll
   rule ReduceActions    ::= ";" "unfolding" Constants "unrolling" Constants => actionsUnfoldUnroll
   rule ReduceActions    ::= ";" "unrolling" Constants "unfolding" Constants => actionsUnrollUnfold
   
   rule Reduce1Directive ::= Reduce1Pattern ReduceActions => app
   rule Reduce2Directive ::= Reduce2Pattern ReduceActions => app
   rule ReduceDirective  ::= ReducePatterns ReduceActions => app

end


grammaron Define
