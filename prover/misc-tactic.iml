
signature MISC_TACTIC =
   sig
      
      type tactic = Tactic.tactic
      type symbol = Symbol.symbol

      val change : symbol -> ETerm.eterm -> tactic

      val exfalso : tactic

      val trustme : tactic

   end


structure MiscTactic :> MISC_TACTIC =
   struct

      structure D = Directory
      structure J = Judgement
      structure T = Term

      open Tactic

      type symbol = Symbol.symbol

      val conclSym = Symbol.fromValue "concl"

      fun change sym ea =
         if Symbol.eq (sym, conclSym) then
            let
               do (_, dir) = withgoal
            in
               replaceConcl (ETerm.withdir dir ea)
            end
         else
            let
               do i = HypTactic.findhyp sym
               do (jud, dir) = withgoal
               val dir' = D.shift dir (i+1)

               val a = ETerm.withdir dir' ea

               val h =
                  (case J.hyp jud i of
                      J.Tm _ => J.Tm a
                    | J.Tml _ => J.Tml a
                    | J.Tmh _ => J.Tmh a
                    | J.Let _ => J.Let a

                    | _ => 
                         (* will certainly fail *)
                         J.Tm a)
            in
               replaceHyp i h
            end


      val exfalso =
         lift
         (fn () =>
             (* unhide any hidden hypotheses *)
             refine (Rule.inhabitant (T.evar ()) T.Triv)
             >>
             refine (Rule.voidElim (T.evar ())))


      val trustme = refine Rule.trustme

   end
