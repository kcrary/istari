
signature MISC_TACTIC =
   sig
      
      type tactic = Tactic.tactic

      val change : Hyp.hypothesis -> ETerm.eterm -> tactic

      val exfalso : tactic

      val assertLater : ETerm.eterm -> Symbol.symbol option -> tactic

      val trustmeRaw : tactic
      val trustme : tactic

   end


structure MiscTactic :> MISC_TACTIC =
   struct

      structure D = Directory
      structure J = Judgement
      structure T = Term

      open Tactic

      type symbol = Symbol.symbol

      val conclSym = Symbol.fromValue "concl"

      fun change h ea =
         let
            do h' = Hyp.findhypOrConcl h
         in
            (case h' of
                NONE =>
                   let
                      do (_, dir) = withgoal
                   in
                      replaceConcl (ETerm.withdir dir ea)
                   end
   
              | SOME i =>
                   let
                      do (jud, dir) = withgoal
                      val dir' = D.shift dir (i+1)
       
                      val a = ETerm.withdir dir' ea
       
                      val h =
                         (case J.hyp jud i of
                             J.Tm _ => J.Tm a
                           | J.Tml _ => J.Tml a
                           | J.Tmh _ => J.Tmh a
                           | J.Let _ => J.Let a
       
                           | _ => 
                                (* will certainly fail *)
                                J.Tm a)
                   in
                      replaceHyp i h
                   end)
         end


      val exfalso =
         lift
         (fn () =>
             (* unhide any hidden hypotheses *)
             refine (Rule.inhabitant (T.evar ()) T.Triv)
             >>
             refine (Rule.voidElim (T.evar ())))


      fun assertLater ea symopt =
         let
            do (jud, dir) = withgoal
            val a = ETerm.withdir dir ea
         in
            refine (Rule.assertLater a (J.concl jud))
            >>> [
                idtac,
                chdir (D.bindh dir symopt)
                ]
         end


      val trustmeRaw = refine Rule.trustme

      val trustme =
         let
            do (jud, _) = withgoal
         in
            refine (Rule.assert (T.apply1 Prim.istp (J.concl jud)) (T.evar ()))
            >>> [
                Typecheck.typecheck,
                trustmeRaw
                ]
         end

   end
