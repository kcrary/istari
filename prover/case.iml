
(* Performance notes:
   1. There is no tail-call optimization when using Case.
   2. Case tries each option in turn; it does not build a decision tree.

   For these reasons, Case may be inappropriate for performance-critical code.
*)

signature CASE =
   sig

      type constant = Term.constant
      type term = Term.term
      type spine = Term.elim list
      type hyp = Judgement.hyp
      type context = Judgement.context

      type answer = exn
      type 'a tacticm = 'a Tactic.tacticm


      (* matching 'a, adds to 'b, resulting in 'c *)
      type ('a, 'b, 'c) matcher

      val wild : ('a, 'b, 'b) matcher
      val what : ('a, 'b, 'b * 'a) matcher
      val az : ('a, 'b * 'a, 'c) matcher -> ('a, 'b, 'c) matcher  (* "as" *)

      val wrap : ('a, 'b, 'c) matcher -> ('c -> 'd) -> ('a, 'b, 'd) matcher
      val alt : ('a, 'b, 'c) matcher list -> ('a, 'b, 'c) matcher

      val frame : ('a, unit, 'c) matcher -> ('a, 'b, 'b * 'c) matcher
      val fix : (('a, unit, 'b) matcher -> ('a, unit, 'b) matcher) -> ('a, unit, 'b) matcher

      (* backtracks on NONE *)
      val cond : ('a, 'b, 'c option) matcher -> ('a, 'b, 'c) matcher

      (* returns NONE when the function raises Backtrack *)
      exception Backtrack
      val tri : ('a -> 'b) -> ('a -> 'b option)  (* "try" *)

      (* wrapk m f = cond (wrap m (tri f)) *)
      val wrapk : ('a, 'b, 'c) matcher -> ('c -> 'd) -> ('a, 'b, 'd) matcher

      (* combine two case analyses into one *)
      val seq : ('a, 'c, 'd) matcher -> ('b, 'd, 'e) matcher -> ('a * 'b, 'c, 'e) matcher

      (* choose a matcher based on what we've matched so far *)
      val discrim : ('b -> ('a, 'b, 'c) matcher) -> ('a, 'b, 'c) matcher


      (* terms *)

      val constant : constant -> (term, 'a, 'a) matcher
      val variable : int -> (term, 'a, 'a) matcher
      val whatConstant : (term, 'a, 'a * constant) matcher
      val whatVar : (term, 'a, 'a * int) matcher
      val whatEvar : (term, 'a, 'a * (Term.ebind * Term.sub)) matcher

      val elim : (term, 'a, 'b) matcher -> (spine, 'b, 'c) matcher -> (term, 'a, 'c) matcher
      val lam : (term, 'a, 'b) matcher -> (term, 'a, 'b) matcher
      val lamb : (term, 'a * Term.binder, 'b) matcher -> (term, 'a, 'b) matcher
      val pair : (term, 'a, 'b) matcher -> (term, 'b, 'c) matcher -> (term, 'a, 'c) matcher
      val next : (term, 'a, 'b) matcher -> (term, 'a, 'b) matcher
      val triv : (term, 'a, 'a) matcher
      val marker : Symbol.symbol -> (term, 'a, 'a) matcher

      val whatNotvar : (term, 'a, 'a * term) matcher
      val whatNotevar : (term, 'a, 'a * term) matcher

      val unify : term -> (term, 'a, 'a) matcher

      val whnf : (term, 'a, 'b) matcher -> (term, 'a, 'b) matcher
      val whnfHard : (term, 'a, 'b) matcher -> (term, 'a, 'b) matcher
      val whnfBasic : (term, 'a, 'b) matcher -> (term, 'a, 'b) matcher

      val nat : int -> (term, 'a, 'a) matcher
      val integer : IntInf.int -> (term, 'a, 'a) matcher
      val symbol : Symbol.symbol -> (term, 'a, 'a) matcher
      val whatNat : (term, 'a, 'a * int) matcher
      val whatInteger : (term, 'a, 'a * IntInf.int) matcher
      val whatSymbol : (term, 'a, 'a * Symbol.symbol) matcher



      (* spines *)
      
      val null : (spine, 'a, 'a) matcher
      val app : (term, 'a, 'b) matcher -> (spine, 'b, 'c) matcher -> (spine, 'a, 'c) matcher
      val pi1 : (spine, 'a, 'b) matcher -> (spine, 'a, 'b) matcher
      val pi2 : (spine, 'a, 'b) matcher -> (spine, 'a, 'b) matcher
      val prev : (spine, 'a, 'b) matcher -> (spine, 'a, 'b) matcher


      (* hypotheses *)

      val tm : (term, 'a, 'b) matcher -> (hyp, 'a, 'b) matcher
      val tml : (term, 'a, 'b) matcher -> (hyp, 'a, 'b) matcher
      val tmh : (term, 'a, 'b) matcher -> (hyp, 'a, 'b) matcher
      val tmlh : (term, 'a, 'b) matcher -> (hyp, 'a, 'b) matcher
      val tp : (hyp, 'a, 'a) matcher
      val tpl : (hyp, 'a, 'a) matcher
      val lett : (term, 'a, 'b) matcher -> (hyp, 'a, 'b) matcher


      (* Raises NoMatch when matching fails. *)

      exception NoMatch
      val termCase : term -> (term, unit, 'a) matcher -> 'a
      val unitCase : (unit, unit, 'a) matcher -> 'a
      val term2Case : term -> term -> (term * term, unit, 'a) matcher -> 'a
      val term3Case : term -> term -> term -> (term * (term * term), unit, 'a) matcher -> 'a
      val spineCase : spine -> (spine, unit, 'a) matcher -> 'a
      val hypCase : hyp -> (hyp, unit, 'a) matcher -> 'a
      val contextCase : context -> Directory.directory -> (hyp, unit * Symbol.symbol, 'a) matcher -> 'a
      val contextnCase : context -> (hyp, unit * int, 'a) matcher -> 'a


      (* Backtracks when matching fails.
         Will not try other matches when the resulting tactic or subsequent tactics fail.
      *)

      val termCaseT : term -> (term, unit, 'a tacticm) matcher -> 'a tacticm
      val unitCaseT : (unit, unit, 'a tacticm) matcher -> 'a tacticm
      val term2CaseT : term -> term -> (term * term, unit, 'a tacticm) matcher -> 'a tacticm
      val term3CaseT : term -> term -> term -> (term * term * term, unit, 'a tacticm) matcher -> 'a tacticm
      val spineCaseT : spine -> (spine, unit, 'a tacticm) matcher -> 'a tacticm
      val hypCaseT : hyp -> (hyp, unit, 'a tacticm) matcher -> 'a tacticm
      val contextCaseT : context -> Directory.directory -> (hyp, unit * Symbol.symbol, 'a tacticm) matcher -> 'a tacticm
      val contextnCaseT : context -> (hyp, unit * int, 'a tacticm) matcher -> 'a tacticm
      val goalCaseT : (term, unit, 'a tacticm) matcher -> 'a tacticm
      val goalHypCaseT : Symbol.symbol -> (hyp, unit, 'a tacticm) matcher -> 'a tacticm
      val goalHypnCaseT : int -> (hyp, unit, 'a tacticm) matcher -> 'a tacticm
      val goalContextCaseT : (hyp, unit * Symbol.symbol, 'a tacticm) matcher -> 'a tacticm
      val goalContextnCaseT : (hyp, unit * int, 'a tacticm) matcher -> 'a tacticm


      (* Backtracks when matching fails.
         Tries other matches when the resulting tactic or subsequent tactics fail.
      *)

      val termCaseB : term -> (term, unit, 'a tacticm) matcher -> 'a tacticm
      val unitCaseB : (unit, unit, 'a tacticm) matcher -> 'a tacticm
      val term2CaseB : term -> term -> (term * term, unit, 'a tacticm) matcher -> 'a tacticm
      val term3CaseB : term -> term -> term -> (term * term * term, unit, 'a tacticm) matcher -> 'a tacticm
      val spineCaseB : spine -> (spine, unit, 'a tacticm) matcher -> 'a tacticm
      val hypCaseB : hyp -> (hyp, unit, 'a tacticm) matcher -> 'a tacticm
      val contextCaseB : context -> Directory.directory -> (hyp, unit * Symbol.symbol, 'a tacticm) matcher -> 'a tacticm
      val contextnCaseB : context -> (hyp, unit * int, 'a tacticm) matcher -> 'a tacticm
      val goalCaseB : (term, unit, 'a tacticm) matcher -> 'a tacticm
      val goalHypCaseB : Symbol.symbol -> (hyp, unit, 'a tacticm) matcher -> 'a tacticm
      val goalHypnCaseB : int -> (hyp, unit, 'a tacticm) matcher -> 'a tacticm
      val goalContextCaseB : (hyp, unit * Symbol.symbol, 'a tacticm) matcher -> 'a tacticm
      val goalContextnCaseB : (hyp, unit * int, 'a tacticm) matcher -> 'a tacticm


      (* Returns (or passes to its continuation) a list containing the results for all
         matching hypotheses.  Will not fail.  Will not try other matches if subsequent
         tactics fail.
      *)

      val allContextCase : context -> Directory.directory -> (hyp, unit * Symbol.symbol, 'a) matcher -> 'a list
      val allGoalContextCase : (hyp, unit * Symbol.symbol, 'a) matcher -> ('a list -> 'b tacticm) -> 'b tacticm


      (* Note on rationale:
         One may wonder why termCase, etc. are not just polymorphic instead.
         We want to preserve an invariant on terms (namely, simple form), and
         that precludes having a polymorphic entry point that could be used
         with terms not satifying the invariant.

         The alternatives are to resimplify terms repeatedly in every case,
         which would be expensive, or to create the opportunity for subtle bugs
         by making it possible for term matching to bypass establishing the 
         invariant.
      *)

   end


structure Case :> CASE =
   struct

      structure T = Term
      structure N = Normalize
      structure J = Judgement

      type constant = Term.constant
      type term = Term.term
      type spine = Term.elim list
      type hyp = Judgement.hyp
      type context = Judgement.context

      type answer = exn
      type 'a tacticm = 'a Tactic.tacticm

      type ('a, 'b, 'c) matcher =
         'a                                    (* the discriminand *)
         -> 'b                                 (* the accumulator *)
         -> (unit -> answer)                   (* failure continuation *)
         -> ('c * (unit -> answer) -> answer)  (* success continuation *)
         -> answer

      
      fun wild _ x fk sk = sk (x, fk)


      fun what m x fk sk = sk ((x, m), fk)


      fun az f m x fk sk = f m (x, m) fk sk
      

      fun wrap f g m x fk sk =
         let
            do (y, fk') = f m x fk
         in
            sk (g y, fk')
         end


      fun alt l m x fk sk =
         (case l of
             [] => fk ()

           | f :: rest =>
                f m x (fn () => alt rest m x fk sk) sk)

         
      fun frame f m x fk sk =
         let
            do (y, fk') = f m () fk
         in
            sk ((x, y), fk')
         end


      fun fix f m () fk sk = f (fix f) m () fk sk

         
      fun cond f m x fk sk =
         let
            do (yopt, fk') = f m x fk
         in
            (case yopt of
                SOME y => sk (y, fk')
               
              | NONE => fk' ())
         end
         

      exception Backtrack

      fun tri f x =
         (try SOME (f x)
          with Backtrack => NONE)


      fun wrapk f g = cond (wrap f (tri g))


      fun seq f g (m, n) x fk sk =
         let
            do (y, fk') = f m x fk
         in
            g n y fk sk
         end


      fun discrim f m x fk sk = f x m x fk sk


      fun constant const m x fk sk =
         (case m of
             T.Elim (T.Const const', []) =>
                if Constant.eq (const, const') then
                   sk (x, fk)
                else
                   fk ()

           | _ => fk ())


      fun variable i m x fk sk =
         (case m of
             T.Elim (T.Var j, []) =>
                if i = j then
                   sk (x, fk)
                else
                   fk ()

           | _ => fk ())


      fun elim f g m x fk sk =
         (case m of
             T.Elim (h, spine) =>
                let
                   do (y, fk') = f (N.simplify h) x fk
                in
                   g spine y fk' sk
                end

           | _ => fk ())

      
      fun whatConstant m x fk sk =
         (case m of
             T.Elim (T.Const const, []) =>
                sk ((x, const), fk)

           | _ => fk ())


      fun whatVar m x fk sk =
         (case m of
             T.Elim (T.Var i, []) =>
                sk ((x, i), fk)

           | _ => fk ())


      fun whatEvar m x fk sk =
         (case m of
             T.Elim (T.Sub (T.Evar e, s), []) =>
                sk ((x, (e, s)), fk)

           | _ => fk ())


      fun lam f m x fk sk =
         (case m of
             T.Lam (_, n) =>
                f (N.simplify n) x fk sk

           | _ => fk ())


      fun lamb f m x fk sk =
         (case m of
             T.Lam (binder, n) =>
                f (N.simplify n) (x, binder) fk sk

           | _ => fk ())


      fun pair f g m x fk sk =
         (case m of
             T.Pair (m1, m2) =>
                let
                   val m1' = N.simplify m1
                   val m2' = N.simplify m2

                   do (x, fk') = f m1' x fk
                in
                   g m2' x fk' sk
                end

           | _ => fk ())


      fun next f m x fk sk =
         (case m of
             T.Next m1 =>
                f (N.simplify m1) x fk sk

           | _ => fk ())


      fun triv m x fk sk =
         (case m of
             T.Triv => sk (x, fk)

           | _ => fk ())


      fun marker sym m x fk sk =
         (case m of
             T.Marker sym' =>
                if Symbol.eq (sym, sym') then
                   sk (x, fk)
                else
                   fk ()

           | _ => fk ())

         
      fun whatNotvar m x fk sk =
         (case m of
             T.Elim (T.Var _, []) =>
                fk ()

           | _ => sk ((x, m), fk))
         

      fun whatNotevar m x fk sk =
         (case m of
             T.Elim (T.Sub _, []) =>
                (* in simple form, a substitution is always an evar *)
                fk ()

           | _ => sk ((x, m), fk))
         

      fun unify n m x fk sk =
         if Unify.unify1 n m then
            sk (x, fk)
         else
            fk ()


      fun whnf f m x fk sk =
         f (N.whnf m) x fk sk


      fun whnfHard f m x fk sk =
         f (N.whnfHard m) x fk sk


      fun whnfBasic f m x fk sk =
         f (N.whnfBasic m) x fk sk


      fun natLoop n m fk sk =
         (case m of
             T.Elim (T.Const const, spine) =>
                if Constant.eq (const, Prim.zero) then
                   (case spine of
                       [] =>
                          sk n

                     | _ =>
                          fk ())
                else if Constant.eq (const, Prim.succ) then
                   (case spine of
                       [T.App m'] =>
                          natLoop (n+1) (N.simplify m') fk sk

                     | _ =>
                          fk ())

                else
                   fk ()

           | _ => fk ())

      fun nat n m x fk sk =
         let
            do n' = natLoop 0 m fk
         in
            if n = n' then
               sk (x, fk)
            else
               fk ()
         end

      fun whatNat m x fk sk = 
         let
            do n = natLoop 0 m fk
         in
            sk ((x, n), fk)
         end

         
      fun integer y m x fk sk =
         (case m of
             T.Native (T.Integer y') => 
                if IntInf.= y y' then
                   sk (x, fk)
                else
                   fk ()

           | _ => fk ())

      fun whatInteger m x fk sk =
         (case m of
             T.Native (T.Integer y) => sk ((x, y), fk)

           | _ => fk ())


      fun symbol y m x fk sk =
         (case m of
             T.Native (T.Symbol y') => 
                if Symbol.eq (y, y') then
                   sk (x, fk)
                else
                   fk ()

           | _ => fk ())

      fun whatSymbol m x fk sk =
         (case m of
             T.Native (T.Symbol y) => sk ((x, y), fk)

           | _ => fk ())


      fun null spine x fk sk =
         (case spine of
             [] => sk (x, fk)

           | _ :: _ => fk ())


      fun app f g spine x fk sk =
         (case spine of
             T.App m :: rest =>
                let
                   do (y, fk') = f (N.simplify m) x fk
                in
                   g rest y fk' sk
                end

           | _ => fk ())


      fun pi1 f spine x fk sk =
         (case spine of
             T.Pi1 :: rest =>
                f rest x fk sk

           | _ => fk ())


      fun pi2 f spine x fk sk =
         (case spine of
             T.Pi2 :: rest =>
                f rest x fk sk

           | _ => fk ())


      fun prev f spine x fk sk =
         (case spine of
             T.Prev :: rest =>
                f rest x fk sk

           | _ => fk ())


      fun tm f hyp x fk sk =
         (case hyp of
             J.Tm a =>
                f (N.simplify a) x fk sk

           | _ =>
                fk ())


      fun tml f hyp x fk sk =
         (case hyp of
             J.Tml a =>
                f (N.simplify a) x fk sk

           | _ =>
                fk ())


      fun tmh f hyp x fk sk =
         (case hyp of
             J.Tmh a =>
                f (N.simplify a) x fk sk

           | _ =>
                fk ())


      fun tmlh f hyp x fk sk =
         (case hyp of
             J.Tmlh a =>
                f (N.simplify a) x fk sk

           | _ =>
                fk ())


      fun tp hyp x fk sk =
         (case hyp of
             J.Tp => sk (x, fk)

           | _ => fk ())


      fun tpl hyp x fk sk =
         (case hyp of
             J.Tpl => sk (x, fk)

           | _ => fk ())


      fun lett f hyp x fk sk =
         (case hyp of
             J.Let m =>
                f (N.simplify m) x fk sk

           | _ =>
                fk ())



      fun anyhypNumLoop f i l fk sk =
         (case Seq.expose l of
             Seq.Nil =>
                fk ()

           | Seq.Cons (h, rest) =>
                f
                   (J.subHyp h (T.Shift (i+1)))
                   ((), i)
                   (fn () => anyhypNumLoop f (i+1) rest fk sk)
                   sk)

      fun anyhypLoop f i l dir fk sk =
         (case (Seq.expose l, Directory.exposeOpt dir) of
             (Seq.Cons (h, l'), SOME (sym, dir')) =>
                f
                   (J.subHyp h (T.Shift (i+1)))
                   ((), sym)
                   (fn () => anyhypLoop f (i+1) l' dir' fk sk)
                   sk

           | _ =>
                fk ())



      exception NoMatch
      
      fun ('a, 'b) caseX (m : 'a) (f : ('a, unit, 'b) matcher) : 'b =
         let
            extension Answer of 'b
         in
            (case 
                f m () (fn () => raise NoMatch) (fn (y, _) => Answer y)
             of
                Answer y => y

              | _ => raise (Fail "impossible"))
         end

         
      fun termCase m f = caseX (N.simplify m) f
      fun term2Case m1 m2 f = caseX (N.simplify m1, N.simplify m2) f
      fun term3Case m1 m2 m3 f = caseX (N.simplify m1, (N.simplify m2, N.simplify m3)) f

      fun unitCase f = caseX () f

      val spineCase = caseX
      val hypCase = caseX

      fun 'b contextCase ctx dir (f : (hyp, unit * Symbol.symbol, 'b) matcher) : 'b =
         let
            extension Answer of 'b
         in
            (case
                anyhypLoop f 0 ctx dir (fn () => raise NoMatch) (fn (y, _) => Answer y)
             of
                Answer y => y

              | _ => raise (Fail "impossible"))
         end

      fun 'b contextnCase ctx (f : (hyp, unit * int, 'b) matcher) : 'b =
         let
            extension Answer of 'b
         in
            (case
                anyhypNumLoop f 0 ctx (fn () => raise NoMatch) (fn (y, _) => Answer y)
             of
                Answer y => y

              | _ => raise (Fail "impossible"))
         end



      fun caseT err x f goal fk sk =
         f x ()
            (fn () => fk err)
            (fn (tac, _) => tac goal fk sk)

      fun termCaseT m f goal fk sk =
         caseT "no match in termCaseT" (N.simplify m) f goal fk sk

      fun term2CaseT m1 m2 f goal fk sk =
         caseT "no match in term2CaseT" (N.simplify m1, N.simplify m2) f goal fk sk

      fun term3CaseT m1 m2 m3 f goal fk sk =
         caseT "no match in term3CaseT" (N.simplify m1, N.simplify m2, N.simplify m3) f goal fk sk

      fun unitCaseT f goal fk sk =
         caseT "no match in unitCaseT" () f goal fk sk

      fun spineCaseT m f goal fk sk = caseT "no match in spineCaseT" m f goal fk sk
      fun hypCaseT m f goal fk sk = caseT "no match in hypCaseT" m f goal fk sk

      fun contextCaseT ctx dir f goal fk sk =
         anyhypLoop f 0 ctx dir
            (fn () => fk "no match in contextCaseT")
            (fn (tac, _) => tac goal fk sk)

      fun contextnCaseT ctx f goal fk sk =
         anyhypNumLoop f 0 ctx
            (fn () => fk "no match in contextnCaseT")
            (fn (tac, _) => tac goal fk sk)

      fun goalCaseT f (goal as (jud, _)) fk sk =
         caseT "no match in goalCaseT" (N.simplify (J.concl jud)) f goal fk sk

      fun goalHypnCaseT i f (goal as (jud, _)) fk sk =
         (case Seq.nthOpt (J.context jud) i of
             NONE =>
                fk "no such hypothesis in goalHypnCaseT"

           | SOME h =>
                caseT "no match in goalHypnCaseT" (J.subHyp h (T.Shift (i+1))) f goal fk sk)

      fun goalHypCaseT sym f (goal as (_, dir)) fk sk =
         (case Directory.lookupVarOpt (Directory.idir dir) sym of
             SOME i =>
                goalHypnCaseT i f goal fk sk

           | NONE =>
                fk "no such hypothesis in goalHypCaseT")

      fun goalContextCaseT f (goal as (jud, dir)) fk sk =
         anyhypLoop f 0 (J.context jud) dir
            (fn () => fk "no match in goalContextCaseT")
            (fn (tac, _) => tac goal fk sk)

      fun goalContextnCaseT f (goal as (jud, _)) fk sk =
         anyhypNumLoop f 0 (J.context jud)
            (fn () => fk "no match in goalContextnCaseT")
            (fn (tac, _) => tac goal fk sk)

             

      fun caseB err x f goal fk sk =
         f x ()
            (fn () => fk err)
            (fn (tac, fk') => tac goal (fn _ => fk' ()) sk)

      fun termCaseB m goal fk sk =
         caseB "no match in termCaseB" (N.simplify m) goal fk sk

      fun term2CaseB m1 m2 f goal fk sk =
         caseB "no match in term2CaseB" (N.simplify m1, N.simplify m2) f goal fk sk

      fun term3CaseB m1 m2 m3 f goal fk sk =
         caseB "no match in term3CaseB" (N.simplify m1, N.simplify m2, N.simplify m3) f goal fk sk

      fun unitCaseB f goal fk sk =
         caseB "no match in unitCaseB" () f goal fk sk

      fun spineCaseB m f goal fk sk = caseB "no match in spineCaseB" m f goal fk sk
      fun hypCaseB m f goal fk sk = caseB "no match in hypCaseB" m f goal fk sk

      fun contextCaseB ctx dir f goal fk sk =
         anyhypLoop f 0 ctx dir
            (fn () => fk "no match in contextCaseBy")
            (fn (tac, fk') => tac goal (fn _ => fk' ()) sk)

      fun contextnCaseB ctx f goal fk sk =
         anyhypNumLoop f 0 ctx
            (fn () => fk "no match in contextnCaseB")
            (fn (tac, fk') => tac goal (fn _ => fk' ()) sk)

      fun goalCaseB f (goal as (jud, _)) fk sk =
         caseB "no match in goalCaseB" (N.simplify (J.concl jud)) f goal fk sk

      fun goalHypnCaseB i f (goal as (jud, _)) fk sk =
         (case Seq.nthOpt (J.context jud) i of
             NONE =>
                fk "no such hypothesis in goalHypnCaseB"

           | SOME h =>
                caseB "no match in goalHypnCaseB" (J.subHyp h (T.Shift (i+1))) f goal fk sk)

      fun goalHypCaseB sym f (goal as (_, dir)) fk sk =
         (case Directory.lookupVarOpt (Directory.idir dir) sym of
             SOME i =>
                goalHypnCaseB i f goal fk sk

           | NONE =>
                fk "no such hypothesis in goalHypCaseB")

      fun goalContextCaseB f (goal as (jud, dir)) fk sk =
         anyhypLoop f 0 (J.context jud) dir
            (fn () => fk "no match in goalContextCaseB")
            (fn (tac, fk') => tac goal (fn _ => fk' ()) sk)

      fun goalContextnCaseB f (goal as (jud, _)) fk sk =
         anyhypNumLoop f 0 (J.context jud)
            (fn () => fk "no match in goalContextnCaseB")
            (fn (tac, fk') => tac goal (fn _ => fk' ()) sk)


      fun allhypLoop f i l dir acc k =
         (case (Seq.expose l, Directory.exposeOpt dir) of
             (Seq.Cons (h, l'), SOME (sym, dir')) =>
                f
                   (J.subHyp h (T.Shift (i+1)))
                   ((), sym)
                   (fn () => allhypLoop f (i+1) l' dir' acc k)
                   (fn (x, _) => allhypLoop f (i+1) l' dir' (x :: acc) k)

           | _ =>
                k (List.rev acc))

      fun 'b allContextCase ctx dir (f : (hyp, unit * Symbol.symbol, 'b) matcher) : 'b list =
         let
            extension Answer of 'b list
         in
            (case allhypLoop f 0 ctx dir [] (fn l => Answer l) of
                Answer l => l

              | _ => raise (Fail "impossible"))
         end

      fun allGoalContextCase f tac (goal as (jud, dir)) fk sk =
         allhypLoop f 0 (J.context jud) dir []
            (fn l => tac l goal fk sk)

   end


structure CasePervasive =
   struct

      val termCase = Case.termCase
      val unitCase = Case.unitCase
      val term2Case = Case.term2Case
      val term3Case = Case.term3Case
      val spineCase = Case.spineCase
      val hypCase = Case.hypCase
      val contextCase = Case.contextCase
      val contextnCase = Case.contextnCase
      val termCaseT = Case.termCaseT
      val unitCaseT = Case.unitCaseT
      val term2CaseT = Case.term2CaseT
      val term3CaseT = Case.term3CaseT
      val spineCaseT = Case.spineCaseT
      val hypCaseT = Case.hypCaseT
      val contextCaseT = Case.contextCaseT
      val contextnCaseT = Case.contextnCaseT
      val goalCaseT = Case.goalCaseT
      val goalHypCaseT = Case.goalHypCaseT
      val goalHypnCaseT = Case.goalHypnCaseT
      val goalContextCaseT = Case.goalContextCaseT
      val goalContextnCaseT = Case.goalContextnCaseT
      val termCaseB = Case.termCaseB
      val unitCaseB = Case.unitCaseB
      val term2CaseB = Case.term2CaseB
      val term3CaseB = Case.term3CaseB
      val spineCaseB = Case.spineCaseB
      val hypCaseB = Case.hypCaseB
      val contextCaseB = Case.contextCaseB
      val contextnCaseB = Case.contextnCaseB
      val goalCaseB = Case.goalCaseB
      val goalHypCaseB = Case.goalHypCaseB
      val goalHypnCaseB = Case.goalHypnCaseB
      val goalContextCaseB = Case.goalContextCaseB
      val goalContextnCaseB = Case.goalContextnCaseB
      val allContextCase = Case.allContextCase
      val allGoalContextCase = Case.allGoalContextCase

      fun parseMatch x = x

   end



structure ParseCase =
   struct

      open Case

      fun id x = x

      val empty = []
      fun sing x = [x]
      fun duo x y = [x, y]
      fun cons h t = h :: t

      fun constpath const spine = elim (constant const) spine
      fun varpath i spine = elim (variable i) spine
         
      fun shortConstant name = Namespace.resolve [Symbol.fromValue name]
      fun longConstant name = Namespace.resolve (map Symbol.fromValue name)

      fun altsing x = alt [x]

   end


grammardef Case

   open ParseCase

   rule Match(4)      ::= "_" => wild
   rule Match(4)      ::= "?" => what
   rule Match(4)      ::= "(" Match(0) ")" => id

   rule Match(3)      ::= "$lit" EMBED => id
   rule Match(3)      ::= "$as" Match(3) => az
   rule Match(3)      ::= "$az" Match(3) => az

   rule Match(2)      ::= Match(3) "=>" EMBED => wrap
   rule Match(2)      ::= Match(3) "=!>" EMBED => wrapk

   rule Match(1)      ::= Match(2) ";" Match(1) => seq

   rule Match(0)      ::= AltMatches => alt
   rule Match(0)      ::= "|" AltMatches => alt
   rule Match(0)      ::= "|" Match(1) => altsing
   rule AltMatches    ::= Match(1) "|" Match(1) => duo
   rule AltMatches    ::= Match(1) "|" AltMatches => cons


   (* terms *)
   rule Match(4)      ::= "(" ")" => triv
   rule Match(4)      ::= EMBED => constant
   rule Match(4)      ::= MatchConstant => constant
   rule Match(4)      ::= "$var" EMBED => variable
   rule Match(4)      ::= "$nat" EMBED => nat
   rule Match(4)      ::= "$integer" EMBED => integer
   rule Match(4)      ::= "$symbol" EMBED => symbol
   rule Match(4)      ::= "const?" => whatConstant
   rule Match(4)      ::= "var?" => whatVar
   rule Match(4)      ::= "evar?" => whatEvar
   rule Match(4)      ::= "nat?" => whatNat
   rule Match(4)      ::= "integer?" => whatInteger
   rule Match(4)      ::= "symbol?" => whatSymbol
   rule Match(4)      ::= "notvar?" => whatNotvar
   rule Match(4)      ::= "notevar?" => whatNotevar

   rule Match(4)      ::= "(" Matches ")" => id
   rule Matches       ::= Match(0) "," Match(0) => pair
   rule Matches       ::= Match(0) "," Matches => pair

   rule Match(3)      ::= Match(4) "@" Match(3) => elim
   rule Match(3)      ::= EMBED NonemptySpine => constpath
   rule Match(3)      ::= MatchConstant NonemptySpine => constpath
   rule Match(3)      ::= "$var" EMBED NonemptySpine => varpath

   rule Match(3)      ::= "next" Match(3) => next
   rule Match(3)      ::= "$marker" EMBED => marker
   rule Match(3)      ::= "$unify" EMBED => unify
   rule Match(3)      ::= "$whnf" Match(3) => whnf
   rule Match(3)      ::= "$whnfHard" Match(3) => whnfHard
   rule Match(3)      ::= "$whnfBasic" Match(3) => whnfBasic
   rule Match(3)      ::= "fn" "." Match(3) => lam
   rule Match(3)      ::= "fn" "?" "." Match(3) => lamb

   (* general spines *)
   rule Match(3)      ::= "$nil" => null
   rule Match(3)      ::= "$ap" Match(4) Match(3) => app
   rule Match(3)      ::= "#1" Match(3) => pi1
   rule Match(3)      ::= "#2" Match(3) => pi2
   rule Match(3)      ::= "#prev" Match(3) => prev

   (* hyps *)
   rule Match(3)      ::= "$tm" Match(3) => tm
   rule Match(3)      ::= "$tml" Match(3) => tml
   rule Match(3)      ::= "$tmh" Match(3) => tmh
   rule Match(3)      ::= "$tmlh" Match(3) => tmlh
   rule Match(3)      ::= "$tp" => tp
   rule Match(3)      ::= "$tpl" => tpl
   rule Match(3)      ::= "$let" Match(3) => lett

   (* special spines *)
   rule Spine         ::= => null
   rule Spine         ::= Match(4) Spine => app
   rule Spine         ::= "#1" Spine => pi1
   rule Spine         ::= "#2" Spine => pi2
   rule Spine         ::= "#prev" Spine => prev
   rule NonemptySpine ::= Match(4) Spine => app
   rule NonemptySpine ::= "#1" Spine => pi1
   rule NonemptySpine ::= "#2" Spine => pi2
   rule NonemptySpine ::= "#prev" Spine => prev

   rule MatchConstant ::= LONGID => longConstant

   reserved "x" "as" "az" "next" "fn" "var" "tm" "tml" "tmh" "tmlh" "tp" "tpl" "ap" : MatchConstant


   start termCase _ Match
   start unitCase Match
   start term2Case _ _ Match
   start term3Case _ _ _ Match
   start spineCase _ Match
   start hypCase _ Match
   start contextCase _ _ Match
   start contextnCase _ Match
   start termCaseT _ Match
   start unitCaseT Match
   start term2CaseT _ _ Match
   start term3CaseT _ _ _ Match
   start spineCaseT _ Match
   start hypCaseT _ Match
   start contextCaseT _ _ Match
   start contextnCaseT _ Match
   start goalCaseT Match
   start goalHypCaseT Ident Match
   start goalHypnCaseT _ Match
   start goalContextCaseT Match
   start goalContextnCaseT Match
   start termCaseB _ Match
   start unitCaseB Match
   start term2CaseB _ _ Match
   start term3CaseB _ _ _ Match
   start spineCaseB _ Match
   start hypCaseB _ Match
   start contextCaseB _ _ Match
   start contextnCaseB _ Match
   start goalCaseB Match
   start goalHypCaseB Ident Match
   start goalHypnCaseB _ Match
   start goalContextCaseB Match
   start goalContextnCaseB Match
   start allContextCase _ _ Match
   start allGoalContextCase Match

   start parseMatch Match

end


grammardef CasePervasive

   open ParseCase

   (* Don't want to use this rule while building the prover. *)
   rule MatchConstant ::= IDENT => shortConstant

end


grammaron Case
