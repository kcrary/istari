
signature HYP =
   sig

      type tactic = Tactic.tactic
      type 'a tacticm = 'a Tactic.tacticm

      type symbol = Symbol.symbol
      datatype hypothesis = NAME of symbol | NUMBER of int

      (* raises Tactic.Tryf on failure *)
      val hypothesisToHyp : Tactic.goal -> hypothesis -> int
      val hypothesisToHypOrConcl : Tactic.goal -> hypothesis -> int option

      val findhyp : hypothesis -> (int -> 'a tacticm) -> 'a tacticm
      val findhypOrConcl : hypothesis -> (int option -> 'a tacticm) -> 'a tacticm
      val findhyps : hypothesis list -> (int list -> 'a tacticm) -> 'a tacticm
      val findname : hypothesis -> (symbol -> 'a tacticm) -> 'a tacticm
      val findnames : hypothesis list -> (symbol list -> 'a tacticm) -> 'a tacticm

      val hyp : hypothesis -> tactic
      val hypof : tactic

      val hypofOf : Term.term -> tactic
      val hypofEq : Term.term -> tactic
      val hypofIstp : Term.term -> tactic
      val hypofEqtp : Term.term -> tactic

      val rename : hypothesis -> symbol -> tactic

      val reintro : IntroPattern.ipattern list -> tactic
      val renameBefore : IntroPattern.ipattern list -> hypothesis -> tactic

      val weaken : int -> int -> tactic
      val clear : hypothesis list -> tactic
      val clearAll : tactic
      val renameOver : hypothesis -> hypothesis -> tactic

      val exchange : int -> int -> int -> tactic
      val moven : int -> int -> tactic
      val movePos : hypothesis list -> int -> tactic
      val moveBefore : hypothesis list -> hypothesis -> tactic
      val moveAfter : hypothesis list -> hypothesis -> tactic
      val moveBeforeDeps : hypothesis list -> hypothesis -> tactic

      val copy : hypothesis -> symbol option -> tactic

      val revert0 : bool -> tactic  (* bool: always use forall *)
      val revert : hypothesis list -> tactic
      val revertDep : hypothesis list -> tactic  (* always use forall *)

      val set : symbol -> ETerm.eterm -> tactic

      val assumption : tactic
      val eassumption : tactic

      val unhidePriority : Tactic.priority tacticm
      val unhideRaw : tactic
      val unhide : tactic
      val squashHidden : hypothesis list -> tactic

      (* infer the type obtained by following the supplied typing with the indicated spine *)
      val inferSpinePriority : hypothesis -> ETerm.eterm -> Symbol.symbol option -> Tactic.priority tacticm
      val inferSpineRaw : hypothesis -> ETerm.eterm -> Symbol.symbol option -> tactic
      val inferSpine : hypothesis -> ETerm.eterm -> Symbol.symbol option -> tactic


      (* move the term's dependencies before the indicated hypothesis *)
      val moveTermDeps : Term.term -> int -> tactic

   end


structure Hyp :> HYP =
   struct

      structure H = ConstantTable
      structure T = Term
      structure N = Normalize
      structure D = Directory
      structure J = Judgement
      structure R = Reduction
      structure S = Seq

      open Tactic
      open CasePervasive

      type symbol = Symbol.symbol
      datatype hypothesis = NAME of symbol | NUMBER of int

      fun hypothesisToString hyp =
         (case hyp of
             NAME sym => Symbol.toValue sym

           | NUMBER i => Int.toString i)

      val conclSym = Symbol.fromValue "concl"

      fun hypothesisToHyp (jud, dir) hyp =
         (case hyp of
             NAME name =>
                if Symbol.eq (name, conclSym) then
                   raise (Tryf "invalid hypothesis concl")
                else
                   (case D.lookupOpt (D.idir dir) name of
                       SOME (D.Hvar i) => i
          
                     | _ =>
                          raise (Tryf ("no hypothesis " ^ Symbol.toValue name)))

           | NUMBER i =>
                if 0 <= i andalso i < S.length (J.context jud) then
                   i
                else
                   raise (Tryf ("no hypothesis numbered " ^ Int.toString i)))

      fun hypothesisToHypOrConcl (jud, dir) hyp =
         (case hyp of
             NAME name =>
                if Symbol.eq (name, conclSym) then
                   NONE
                else
                   (case D.lookupOpt (D.idir dir) name of
                       SOME (D.Hvar i) =>
                          SOME i
       
                     | _ =>
                          raise (Tryf ("no hypothesis " ^ Symbol.toValue name)))

           | NUMBER i =>
                if 0 <= i andalso i < S.length (J.context jud) then
                   SOME i
                else
                   raise (Tryf ("no hypothesis numbered " ^ Int.toString i)))
         
      fun hypothesisToName (_, dir) hyp =
         (case hyp of
             NAME name => name

           | NUMBER i =>
                (case D.nameOpt dir i of
                    SOME name => name

                  | NONE => raise (Tryf ("no hypothesis numbered " ^ Int.toString i))))

      fun findhyp hyp tac goal fk sk =
         tryf 
            (fn () => hypothesisToHyp goal hyp)
            tac
            goal fk sk

      fun findhypOrConcl hyp tac (goal as (jud, dir)) fk sk =
         tryf
            (fn () => hypothesisToHypOrConcl goal hyp)
            tac
            goal fk sk

      fun findhyps hyps tac goal fk sk =
         tryf
            (fn () => List.map (hypothesisToHyp goal) hyps)
            tac
            goal fk sk

      fun findname hyp tac goal fk sk =
         tryf
            (fn () => hypothesisToName goal hyp)
            tac
            goal fk sk

      fun findnames hyps tac goal fk sk =
         tryf
            (fn () => List.map (hypothesisToName goal) hyps)
            tac
            goal fk sk



      fun bindmany dir l =
         List.foldl
            (fns sym d => D.bind d sym)
            dir
            l


      fun hyp h = 
         let
            do i = findhyp h
         in
            setFailure "hypothesis does not match goal" $
            Tactic.refine (Rule.hypothesis i)
         end


      fun hypofOf m =
         (case N.simplify m of
             T.Elim (T.Var i, [])  =>
                setFailure "hypothesis does not match goal" $
                Tactic.refine (Rule.hypothesisOf i)

           | _ =>
                fail "not a variable in hypof")

      fun hypofEq m  =
         (case N.simplify m of
             T.Elim (T.Var i, []) =>
                setFailure "hypothesis does not match goal" $
                Tactic.refine (Rule.hypothesisEq i)

           | _ =>
                fail "not a variable in hypof")
         
      fun hypofIstp a =
         (case N.simplify a of
             T.Elim (T.Var i, []) =>
                let
                   do (jud, _) = withgoal
                in
                   (case J.hypOpt jud i of
                       NONE =>
                          (* This could only happen in the most pathological case. *)
                          fail "unbound variable"
   
                     | SOME (J.Tm _) =>
                          refine (Rule.univForgetOf (T.evar ()) (T.evar ()))
                          >>
                          setFailure "hypothesis does not match goal"
                             (Tactic.refine (Rule.hypothesisOf i))
   
                     | SOME J.Tp =>
                          setFailure "hypothesis does not match goal" $
                          Tactic.refine (Rule.hypothesisOfTp i)
   
                     | SOME _ =>
                          fail "binding is not usable in hypof")
                end

           | _ =>
                fail "not a variable in hypof")
   
      fun hypofEqtp a =
         (case N.simplify a of
             T.Elim (T.Var i, []) =>
                let
                   do (jud, _) = withgoal
                in
                   (case J.hypOpt jud i of
                       NONE =>
                          fail "unbound variable"
   
                     | SOME (J.Tm _) =>
                          refine (Rule.univForgetEq (T.evar ()) (T.evar ()) (T.evar ()))
                          >>
                          setFailure "hypothesis does not match goal"
                             (Tactic.refine (Rule.hypothesisEq i))
   
                     | SOME J.Tp =>
                          setFailure "hypothesis does not match goal" $
                          Tactic.refine (Rule.hypothesisEqTp i)
   
                     | SOME _ =>
                          fail "binding is not usable in hypof")
                end

           | _ =>
                fail "not a variable in hypof")

      val hypof =
         let
            do (jud, _) = withgoal
         in
            termCaseT (J.concl jud)
            /
             | \Prim.ov\ _ ? => 
                  \fnc m => hypofOf m\

             | \Prim.eq\ _ ? _ =>
                  \fnc m => hypofEq m\

             | \Prim.istp\ ? =>
                  \fnc a => hypofIstp a\
             
             | \Prim.eqtp\ ? _ =>
                  \fnc a => hypofEqtp a\

             | _ =>
                  \fnc => fail "conclusion cannot follow from binding"\
            /
         end


      fun renamen i to =
         let
            do (_, dir) = Tactic.withgoal
         in
            (case D.splitOpt dir (i+1) of
                NONE => fail "insufficient hypotheses"

              | SOME (l, dir') =>
                   (try
                       chdir (bindmany (D.bind dir' to) (List.tl l))
                    with
                       D.Shadow sym =>
                          fail (String.concat ["identifier ", Symbol.toValue sym, " is in use"])))
         end

      fun rename from to =
         let
            do i = findhyp from
         in
            renamen i to
         end

      (* names given youngest first, n is the number of younger hyps being kept *)
      fun reintroLoop n pats dir =
         (case pats of
             [] =>
                idtacM dir

           | pat :: rest =>
                (case D.exposeOpt dir of
                    NONE =>
                       fail "too many patterns specified"

                  | SOME (old, dir') =>
                       (case pat of
                           IntroPattern.Wild =>
                              setFailure 
                                 ("cannot clear hypothesis " ^ Symbol.toValue old)
                                 (refine (Rule.weaken n 1))
                              >>
                              reintroLoop n rest dir'

                         | IntroPattern.Ident NONE =>
                              let
                                 do dir' = andthenM $ reintroLoop (n+1) rest dir'
                              in
                                 idtacM (D.bind dir' old)
                              end

                         | IntroPattern.Ident (SOME name) =>
                              let
                                 do dir' = andthenM $ reintroLoop (n+1) rest dir'
                              in
                                 idtacM (D.bind dir' name)
                              end

                         | _ =>
                              fail "reintro expects simple patterns")))

      fun reintro pats =
         let
            do (_, dir) = withgoal
            do dir' = andthenM $ reintroLoop 0 (List.rev pats) dir
         in
            chdir dir'
         end

      fun renameBefore pats h =
         let
            do jo = findhypOrConcl h
         in
            (case jo of
                NONE => reintro pats

              | SOME j =>
                   let
                      do (_, dir) = withgoal

                      val (names, dir) = D.split dir (j+1)
                      
                      do dir' = andthenM $ reintroLoop (j+1) (List.rev pats) dir
                   in
                      chdir (D.binds dir' names)
                   end)
         end


      fun weaken i j =
         cut (setFailure "cannot clear hypotheses" $ Tactic.refine $ Rule.weaken i j)
         >>
         let
            do (_, dir) = Tactic.withgoal
         in
            (case D.splitOpt dir i of
                NONE =>
                   fail "bad directory in weaken"

              | SOME (l, dir') =>
                   (case D.splitOpt dir' j of
                       NONE =>
                          fail "bad directory in weaken"

                     | SOME (_, dir'') =>
                          chdir (bindmany dir'' l)))
         end

      fun clearn i = weaken i 1

      fun clearLoop l =
         (case l of
             [] => idtac

           | name :: rest =>
                let
                   do i = findhyp (NAME name)
                in
                   cut (transformFailure 
                           (fn _ => String.concat ["dependencies on ", Symbol.toValue name, " exist"])
                           (clearn i))
                   >> clearLoop rest
                end)
         
      fun clear l = 
         let
            do l' = findnames l
         in
            clearLoop (List.rev l')
         end            


      fun renameOver from to = 
         let
            do to' = findname to
         in
            clear [NAME to'] >> rename from to'
         end
         
         

      val clearAll =
         let
            do (jud, _) = withgoal
         in
            Tactic.refine (Rule.weaken 0 (Seq.length (Judgement.context jud)))
            >> chdir Directory.empty
         end


      fun exchange i j k =
         cut (setFailure "illegal exchange" $ Tactic.refine $ Rule.exchange i j k)
         >>
         let
            do (_, dir) = Tactic.withgoal

            (* We know that i, j, and k are good, assuming dir matches the goal. *)

            val (l4, dir123) = D.split dir i
            val (l3, dir12) = D.split dir123 j
            val (l2, dir1) = D.split dir12 k
         in
            chdir (bindmany (bindmany (bindmany dir1 l3) l2) l4)
         end

      fun moven i j =
         (case Int.compare i j of
             EQUAL =>
                idtac

           | LESS =>
                exchange i 1 (j - i)

           | GREATER =>
                exchange j (i - j) 1)


      fun movePosLoop froms j =
         (case froms of
             [] => idtacM j

           | from :: rest =>
                let
                   do i = findhyp (NAME from)
                in
                   if i > j then
                      let
                         do j' = andthenM $ movePosLoop rest j
                         do i' = findhyp (NAME from)
                      in
                         moven i' j'
                         >> idtacM (j'+1)
                      end
                   else (* j >= i *)
                      moven i (j-1)
                      >>
                      let
                         do j' = andthenM $ movePosLoop rest (j-1)
                      in
                         idtacM (j'+1)
                      end
                end)

      fun movePos froms j =
         let
            do froms' = findnames froms
         in
            movePosLoop froms' j >> idtac
         end


      fun moveBefore froms to =
         let
            do jo = findhypOrConcl to
         in
            (case jo of
                NONE => movePos froms 0

              | SOME j => movePos froms (j+1))
         end


      fun moveAfter froms to =
         let
            do j = findhyp to
         in
            movePos froms j
         end


      fun copy from to =
         let
            do i = findhyp from
            do (jud, dir) = withgoal
         in
            (case J.hyp jud i of
                J.Tm a =>
                   refine (Rule.assert' (T.Sub (a, T.Shift (i+1))) (T.evar ()))
                   >>> [
                       refine (Rule.hypothesis i),
       
                       chdir (D.bindh dir to)
                       ]

              | _ =>
                   (* we could be more flexible *)
                   fail "hypothesis is the wrong sort to copy")
         end


      fun revert0 dep =
         let
            do (jud, dir) = withgoal
            val (name, dir') = D.expose dir
            val c = J.concl jud
         in
            (case J.hypOpt jud 0 of
                SOME (J.Tm a) =>
                   refine (Rule.forallElim (T.Sub (a, T.shift1)) (T.Sub (c, T.Idot (0, T.Shift 2))) T.zero)
                   >>> [
                       refine (Rule.weaken 0 1)
                       >> chdir dir'
                       >> 
                       (if dep then
                           replaceConcl (T.apply2 Prim.forall a (T.Lam (SOME name, c)))
                        else
                           first [
                                 refine (Rule.unreduce
                                            (T.apply2 Prim.arrow 
                                                a 
                                                (T.Sub (c, T.Dot (T.Triv, T.id))))
                                            Reduction.unfold),
 
                                 replaceConcl (T.apply2 Prim.forall a (T.Lam (SOME name, c)))
                                 ]),

                       refine (Rule.hypothesisOf 0)
                       ]

              | SOME (J.Tmh a) =>
                   refine (Rule.arrowElim (T.apply1 Prim.squash (T.Sub (a, T.shift1))) c)
                   >>> [
                       refine (Rule.weaken 0 1)
                       >> chdir dir',

                       refine (Rule.squashIntro (T.evar ()))
                       >> refine (Rule.hypothesis 0)                             
                       ]

              | SOME (J.Let m) =>
                   (* =M |- C *)
                   refine (Rule.unreduce 
                              (T.apply2 Prim.lett 
                                  T.zero 
                                  (T.Lam (SOME name, T.Sub (c, T.Idot (0, T.Shift 2)))))
                              (R.trans [R.unfold, R.beta 3]))
                   >>
                   (* =M |- let 0 (fn . C[0 . ^2]) *)
                   refine (Rule.letUnfold 0 
                              (T.apply2 Prim.lett
                                  T.zero
                                  (T.Lam (SOME name, T.Sub (c, T.Idot (0, T.Shift 3))))))
                   >>
                   (* =M |- let M[^] (fn . C[0 . ^2]) *)
                   refine (Rule.weaken 0 1)
                   >> chdir dir'
                   (* |- let M (fn . C) *)
                   
              | SOME _ =>
                   fail "hypothesis not revertable"

              | NONE =>
                   fail "no such hypothesis")
         end

      fun revertn dep i =
         setFailure "cannot revert hypothesis on which others depend" (exchange 0 i 1)
         >> revert0 dep

      fun revertone dep name =
         let
            do i = findhyp (NAME name)
         in
            revertn dep i
         end

      fun revertLoop dep names =
         (case names of
             [] => idtac

           | name :: rest =>
                revertone dep name >> revertLoop dep rest)

      fun revert hyps =
         let
            do hyps' = findnames hyps
         in
            revertLoop false (List.rev hyps')
         end

      fun revertDep hyps =
         let
            do hyps' = findnames hyps
         in
            revertLoop true (List.rev hyps')
         end


      fun set sym em =
         let
            do (_, dir) = withgoal
         in
            refine (Rule.letIntro 0 (ETerm.withdir dir em))
            >> chdir (D.bind dir sym)
         end


      val assumption =
         setFailure "no matching assumption" $
         goalContextnCaseB
         /
            $tm _ => 
            \(fnc i => refine (Rule.hypothesis i))\
         /


      val eassumption =
         setFailure "no matching assumption" $
         goalContextnCaseB
         /
            $tm _ => 
            \(fnc i => refine (Rule.hypothesisOf i))\
         /


      fun ifthenPri iftac thentac elsetac =
         ifthenM
            iftac
            (fn Primary => thentac
              | Secondary => idtacM Secondary)
            elsetac
            

      fun unhideHypMain a i =
         refine (Rule.assert' (T.Sub (a, T.Shift (i+1))) (T.evar ()))
         >>> [
             Typecheck.trivializePriority
             >>!
             refine (Rule.hypothesis i) >> done,

             (* if anyone depends on this hypothesis, the weaken will fail *)
             refine (Rule.weaken (i+1) 1)
             >>
             refine (Rule.exchange 0 1 i)
             >>
             idtacM Primary
             ]

      fun unhideLoop success ctx i =
         (case S.expose ctx of
             S.Nil =>
                if success then
                   idtacM Primary
                else
                   fail "cannot unhide anything"

           | S.Cons (h, rest) =>
                hypCaseT h
                /| $tmh $as (const? @ _) =>
                   \(fnc a const =>
                        if H.member TypecheckInternal.trivialIntroTactics const then
                           ifthenPri
                              (unhideHypMain a i)
                              (unhideLoop true rest (i+1))
                              (unhideLoop success rest (i+1))
                        else
                           unhideLoop success rest (i+1))\

                 | _ =>
                   \(fnc =>
                        unhideLoop success rest (i+1))\
                /)

      val unhidePriority =
         cut $
         first
            [
            Typecheck.trivializePriority,

            let
               do (jud, _) = withgoal
               val ctx = J.context jud
            in
               unhideLoop false ctx 0
            end
            ]

      val unhideRaw = unhidePriority >> idtac

      val unhide = Typecheck.withTypecheckSnd unhidePriority


      fun squashHiddenLoop hyps =
         (case hyps of
             [] =>
                idtac

           | name :: rest =>
                let
                   do i = findhyp (NAME name)
                   do (jud, _) = withgoal
                in
                   (case J.hyp jud i of
                       J.Tmh a =>
                          refine (Rule.assert 
                                     (T.apply1 Prim.squash (T.Sub (a, T.Shift (i+1))))
                                     (T.evar ()))
                          >>> [
                              refine (Rule.squashIntro (T.evar ()))
                              >>+
                              refine (Rule.hypothesis i),
              
                              refine (Rule.weaken (i+1) 1)
                              >>+
                              refine (Rule.exchange 0 1 i)
                              >>+
                              squashHiddenLoop rest
                              ]
       
                     | _ =>
                          fail "hidden term hypotheses expected")
                end)

      fun squashHidden hyps =
         let
            do hyps' = findnames hyps
         in
            squashHiddenLoop hyps'
         end



      structure IS = RedBlackSet (structure Elem = IntOrdered)

      val cycle = Tryf "move impossible due to cyclic dependency"

      (* dependencies cap adjust depth m

         Suppose the free variables of m are I.
         Let I' = { i - depth + adjust  |  i in I  and  i >= depth }
         
         if    cap in I'
         then  raises cycle
         else  returns I' intersect { i | i < cap }

         Does not prune out dependencies from evars.
      *)
      fun dependencies cap adjust depth m =
         (case Normalize.whnf m of
             T.Elim (m1, spine) =>
                IS.union 
                   (dependenciesHead cap adjust depth m1)
                   (List.foldl
                       (fns elim set =>
                           (case elim of
                               T.App mk =>
                                  IS.union
                                     (dependencies cap adjust depth mk)
                                     set

                             | _ => set))
                       IS.empty
                       spine)

           | T.Lam (_, m1) =>
                dependencies cap adjust (depth+1) m1

           | T.Pair (m1, m2) =>
                IS.union
                   (dependencies cap adjust depth m1)
                   (dependencies cap adjust depth m2)

           | T.Next m1 =>
                dependencies cap adjust depth m1

           | T.Triv => IS.empty

           | T.Native _ => IS.empty

           | T.Marker _ => IS.empty

           | T.Var _ => raise (Fail "should be whnf")
           | T.Const _ => raise (Fail "should be whnf")
           | T.Evar _ => raise (Fail "should be whnf")
           | T.Sub _ => raise (Fail "should be whnf"))

      and dependenciesHead cap adjust depth h =
         (case h of
             T.Var j =>
                if j < depth then
                   IS.empty
                else
                   let
                      val j' = j - depth + adjust
                   in
                      (case Int.compare j' cap of
                          LESS =>
                             IS.singleton j'

                        | EQUAL =>
                             raise cycle

                        | GREATER =>
                             IS.empty)
                   end

           | T.Const _ => IS.empty

           | T.Sub (T.Evar _, s) =>
                dependenciesSub cap adjust depth s

           | _ => raise (Fail "should be head"))

      and dependenciesSub cap adjust depth s =
         (case s of
             T.Shift j =>
                if j - depth + adjust > cap then
                   IS.empty
                else
                   raise cycle

           | T.Dot (m, s') =>
                IS.union
                   (dependencies cap adjust depth m)
                   (dependenciesSub cap adjust depth s)

           | T.Idot (j, s') =>
                let
                   val j' = j - depth + adjust
                in
                   (case Int.compare j' cap of
                       LESS =>
                          IS.singleton j'

                     | EQUAL =>
                          raise cycle

                     | GREATER =>
                          IS.empty)
                end)

      (* dependenciesTrans G cap set acc

         returns L @ acc
         where 
            L is a list (ordered decreasing) of the transitive dependencies of the
            hypotheses in set that are less then cap

         (or raises Cycle if cap would have been in L)
      *)
      fun dependenciesTrans ctx cap set acc =
         if IS.isEmpty set then
            acc
         else
            let
               val i = IS.least set
               val set' = IS.remove set i

               val a =
                  (case S.nth ctx i of
                      J.Tm a => a
                    | J.Tml a => a
                    | J.Tmh a => a
                    | J.Let a => a
                    | J.Tp => T.Triv
                    | J.Tpl => T.Triv
                    | J.Tph => T.Triv)

               val set'' =
                  IS.union
                     (dependencies cap (i+1) 0 a)
                     set'
            in
               dependenciesTrans ctx cap set'' (i :: acc)
            end

      (* the set is given by a function so we can put its computation inside the handler *)
      fun moveDepsMain ctx dir setf to =
         let
            do l =
               tryf
               (fn () =>
                   List.map 
                      (fn k => NAME (D.name dir k))
                      (dependenciesTrans ctx to (setf ()) []))
         in
            movePos l (to+1)
         end
            

      fun moveBeforeDeps from to =
         let
            do j = findhyp to
            do goal as (jud, dir) = withgoal
         in
            moveDepsMain 
               (J.context jud)
               dir
               (fn () =>
                   List.foldl
                      (fns h set =>
                          let
                             val i = hypothesisToHyp goal h
                          in
                             (case Int.compare i j of
                                 LESS =>
                                    IS.insert set i
    
                               | EQUAL =>
                                    raise cycle
    
                               | GREATER =>
                                    set)
                          end)
                      IS.empty
                      from)
               j
         end
         

      fun moveTermDeps m to =
         let
            do (jud, dir) = withgoal
         in
            moveDepsMain 
               (J.context jud) 
               dir
               (fn () => dependencies to 0 0 m)
               to
         end


      (* This stuff doesn't really belong here, but Typecheck is prior to this, before
         hypothesis is defined.
      *)

      fun inferSpinePriority hyp en symopt =
         let
            do i = findhyp hyp
         in
            Typecheck.inferSpinePriority i en symopt
         end

      fun inferSpineRaw hyp en symopt = inferSpinePriority hyp en symopt >> idtac

      fun inferSpine hyp en symopt = Typecheck.withTypecheckSnd $ inferSpinePriority hyp en symopt

   end


structure ParseHypothesis =
   struct

      val null = []
      fun cons x y = x :: y

      val name = Hyp.NAME
      val number = Hyp.NUMBER

   end


grammardef Hypothesis

   open ParseHypothesis

   rule Hypothesis ::= Ident => name
   rule Hypothesis ::= NUMBER => number
   rule Hypothesis ::= "#" NUMBER => number
   rule Hypothesis ::= EMBED => name
   rule Hypothesis ::= "#" EMBED => number
   

   rule Hypotheses ::= => null
   rule Hypotheses ::= Hypothesis Hypotheses => cons

end


grammaron Hypothesis
