
signature FILE =
   sig

      exception LoadError of string

      (* load Istari library *)
      val load : string -> unit

      (* load Istari library without loading dependencies or recording a dependency *)
      val loadWithoutDependencies : string -> unit

      
      (* use IML file (but only once) *)
      val import : string -> unit

      (* the library search path *)
      val libraryPath : string list ref

   end


signature FILE_INTERNAL =
   sig

      include FILE


      (* save Istari library *)
      val save : string -> unit


      (* forget any dependencies of files previously loaded *)
      val forgetDependencies : unit -> unit


      (* the IML "use" function *)
      val useHook : (string -> unit) ref

   end


structure FileInternal :> FILE_INTERNAL =
   struct

      val magicNumber = Bytestring.fromString "Ist0000T"

      structure CR = CheckpointedRef
      structure D = DatabaseInternal
      structure De = DefineInternal
      structure N = NamespaceInternal
      structure P = Pickle
      structure PP = Pickling
      structure R = ReductionInternal
      structure RR = RegistryInternal
      structure T = Term



      exception LoadError of string

      fun signalError msg = raise (LoadError
                                      (String.concat
                                          [
                                          "Error: ",
                                          msg,
                                          ".\n"
                                          ]))

      val () =
         Handler.customHandler
         (fn LoadError msg => (print msg; true)
           | _ => false)



      fun iterup f x i j =
         if i = j then
            x
         else
            iterup f (f i x) (i+1) j

      fun input1 ins =
         (case BinIO.input1 ins of
             SOME b => b
           | NONE => raise Pickle.Error)



      (* Constant table *)

      val puNamespaceEntry = P.pair (P.list PP.puSymbol) PP.puConstant
            

      (* Representation note:
         P.list p is pickled as a series of P.option p, ending in NONE.
      *)

      fun writeNamespace outs =
         (
         N.appExport
            (fn (addr, const) =>
                P.pickle
                   (BinIO.output1 outs)
                   (P.option puNamespaceEntry)
                   (SOME (addr, const)));

         P.pickle
            (BinIO.output1 outs)
            (P.option puNamespaceEntry)
            NONE
         )


      fun gotoModule toplevel old new =
         (case (old, new) of
             ([], []) => ()

           | ([], sym' :: _) =>
                if toplevel andalso N.moduleExists [sym'] then
                   signalError
                      (String.concat
                          [
                          "module name ",
                          Symbol.toValue sym',
                          " to be loaded is already used in the namespace"
                          ])
                else
                   List.app N.beginModuleSym new

           | (sym :: _, []) =>
                (
                List.app (fn _ => N.endModule ()) old;
                
                if toplevel then
                   N.hideModule sym
                else
                   ()
                )

           | (sym :: restold, sym' :: restnew) =>
                if Symbol.eq (sym, sym') then
                   gotoModule false restold restnew
                else if toplevel andalso N.moduleExists [sym'] then
                   signalError
                      (String.concat
                          [
                          "module name ",
                          Symbol.toValue sym',
                          " to be loaded is already used in the namespace"
                          ])
                else
                   (
                   List.app (fn _ => N.endModule ()) old;

                   if toplevel then
                      N.hideModule sym
                   else
                      ();

                   List.app N.beginModuleSym new
                   ))


      fun readNamespaceLoop ins currModule =
         (case 
             P.unpickle 
                (fn () => input1 ins)
                (P.option puNamespaceEntry)
          of
             NONE =>
                gotoModule true currModule []

           | SOME (address, const) =>
                let
                   val (module, sym) =
                      (case List.rev address of
                          [] => raise Pickle.Error

                        | sym :: revmodule =>
                             (List.rev revmodule, sym))

                   val () = gotoModule true currModule module
                in
                   N.aliasExport sym const;

                   readNamespaceLoop ins module
                end)

      fun readNamespace ins = readNamespaceLoop ins []



      (* Registry *)

      val puRegistryEntry =
         P.option
            (P.pair
                (P.list PP.puSymbol)
                RR.puItem)


      fun writeRegistry outs =
         (
         RR.appExport
            (fn entry => P.pickle (BinIO.output1 outs) puRegistryEntry (SOME entry));

         P.pickle (BinIO.output1 outs) puRegistryEntry NONE
         )


      fun readRegistry ins =
         (case
             P.unpickle
                (fn () => input1 ins)
                puRegistryEntry
          of
             NONE => ()

           | SOME (name, item) =>
                (
                RR.import name item;
                readRegistry ins
                ))




      (* Define *)

      val impossible = Fail "impossible"

      val puGeneralReduction =
         P.alt
            (fn De.Standard _ => 0
              | De.Native _ => 1)
            [
            P.wrap
               (fn De.Standard r => r
                 | _ => raise impossible)
               De.Standard
               R.puUreduction,

            P.wrap
               (fn De.Native (i, n, r) => (i, n, r)
                 | _ => raise impossible)
               De.Native
               (P.tuple3 P.int P.int R.puUreduction)
            ]

      fun writeReductions outs =
         P.pickle (BinIO.output1 outs) (P.list puGeneralReduction) (De.registered ())

      fun readReductions ins =
         (case
             P.unpickle
                (fn () => input1 ins)
                (P.option puGeneralReduction)
          of
             NONE => ()

           | SOME r =>
                (
                DefineInternal.importReduction r;
                readReductions ins
                ))
         



      (* All together *)

      val dependencies : string list CR.cref = CR.new []

      fun save filename =
         let
            val outs = BinIO.openOut filename
         in
            Finally.finally
               (fn () => 
                   (
                   Bytestring.output outs magicNumber;
                   P.pickle (BinIO.output1 outs) P.word32 (Nonce.nonce ());
                   P.pickle (BinIO.output1 outs) (P.list P.string) (List.rev (CR.deref dependencies));
                   P.pickle (BinIO.output1 outs) P.bool (Unsafe.allowed ());
                   writeNamespace outs;
                   DatabaseInternal.writeDatabase outs;
                   writeRegistry outs;
                   writeReductions outs;
                   DatatypeInternal.write (BinIO.output1 outs);
                   print "[";
                   print filename;
                   print " written]\n"
                   ))
               (fn () => BinIO.closeOut outs)
         end


      structure Word32Ordered
         :> ORDERED where type t = Word32.word
         =
         struct
            type t = Word32.word
      
            fun eq (x, y) = Word32.= x y
            fun compare (x, y) = Word32.compare x y
         end

      structure NS = RedBlackSet (structure Elem = Word32Ordered)

      val loaded = CR.new NS.empty

      val magicNumberErrorMessage = "imported database is not an Istari file or was written by an incompatible version of Istari"

      fun loadMain loaddeps top filename =
         if Unsafe.getParanoid () then
            signalError "paranoid is set"
         else if not (List.null (N.currentModule ())) then
            (* We aren't at top level.  Object. *)
            signalError "load initiated within a module"
         else
            let
               val ins = BinIO.openIn filename
            in
               try
                  Finally.finally
                     (fn () => 
                         let
                            val magicNumber' =
                               Bytestring.implode
                                  (List.rev
                                      (iterup
                                          (fns _ l =>
                                              (case BinIO.input1 ins of
                                                  NONE =>
                                                     signalError magicNumberErrorMessage
                           
                                                | SOME b => b :: l))
                                          []
                                          0 8))

                            val () =
                               if Bytestring.eq (magicNumber, magicNumber') then
                                  ()
                               else
                                  signalError magicNumberErrorMessage

                            val nonce = P.unpickle (fn () => input1 ins) P.word32
                         in
                            if NS.member (CR.deref loaded) nonce then
                               (* already loaded; ignore *)
                               if top then
                                  (
                                  print "[";
                                  print filename;
                                  print " already loaded]\n"
                                  )
                               else
                                  (* ignore silently *)
                                  ()
                            else
                               let
                                  val () = CR.assign loaded (NS.insert (CR.deref loaded) nonce)

                                  val deps = P.unpickle (fn () => input1 ins) (P.list P.string)
                               in
                                  if loaddeps then
                                     List.app (loadMain true false) deps
                                  else
                                     () ;

                                  if
                                     P.unpickle (fn () => input1 ins) P.bool
                                  then
                                     Unsafe.allow ()
                                  else
                                     () ;
   
                                  readNamespace ins;
                                  DatabaseInternal.readDatabase ins;
                                  readRegistry ins;
                                  readReductions ins;
                                  DatatypeInternal.read (fn () => input1 ins);
                                  print "[";
                                  print filename;
                                  print " loaded]\n"
                               end
                         end)
                  (fn () => BinIO.closeIn ins)
               with
                  Pickle.Error =>
                     signalError
                        (String.concat
                            [
                            "imported file ",
                            filename,
                            " is corrupted"
                            ])

                | Pickling.UnknownConstant name =>
                     raise (LoadError 
                               (String.concat
                                   [
                                   "Error: imported file ",
                                   filename,
                                   " uses an unknown constant named ",
                                   name,
                                   ".\n(Probably a dependency is not loaded or has changed.)\n"
                                   ]))
      
                | Pickling.Paranoid =>
                     signalError 
                        (String.concat
                            [
                            "cannot import file ",
                            filename,
                            ": paranoid is set"
                            ])
      
                | Refine.NoExtracts =>
                     signalError 
                        (String.concat
                            [
                            "imported file ",
                            filename,
                            " does not support extracts"
                            ])
            end

      fun load filename =
         let
            val filename =
               try
                  Path.canonize filename
               with Path.Path =>
                  signalError ("bad path name " ^ filename)
         in
            loadMain true true filename;
            CR.assign dependencies (filename :: CR.deref dependencies)
         end

      fun loadWithoutDependencies filename = loadMain false true filename

      fun forgetDependencies () = CR.assign dependencies nil




      val useHook : (string -> unit) ref =
         ref (fn _ => signalError "use unimplemented")

      structure StringSet = RedBlackSet (structure Elem = StringOrdered)

      val imported : StringSet.set CR.cref = CR.new StringSet.empty

      val libraryPath : string list ref = ref []


      fun tryimport filename =
         let
            val filename' =
               try
                  Path.canonize filename
               with Path.Path =>
                  signalError ("bad path name " ^ filename)
         in
            if StringSet.member (CR.deref imported) filename' then
               true
            else if FileSystem.exists filename' then
               (
               CR.assign imported (StringSet.insert (CR.deref imported) filename');

               (* This will end up canonizing filename again, but it doesn't seem like
                  a big enough deal to do anything about it.
               *)
               !useHook filename';

               true
               )
            else
               false
         end

      (* precondition: filename is a relative path *)
      fun importLoop filename searchpath =
         (case searchpath of
             nil =>
                signalError
                   (String.concat
                       [
                       "cannot find ",
                       filename,
                       " in the search path"
                       ])

           | dir :: rest =>
                if tryimport (Path.join dir filename) then
                   ()
                else
                   importLoop filename rest)
                
      fun import filename =
         if Path.isRelative filename then
            importLoop filename ("." :: !libraryPath)
         else
            if
               tryimport filename
            then
               ()
            else
               signalError
                  (String.concat
                      [
                      "file ",
                      filename,
                      " is not found"
                      ])

   end


structure File :> FILE = FileInternal
