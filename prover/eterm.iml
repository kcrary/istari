
structure SyntaxError =
   struct

      exception Syntax of string

      val () = 
         Handler.customHandler
         (fn Syntax msg => 
                (
                print "Syntax error: ";
                print msg; 
                print "\n";
                true
                )

           | _ => false)

   end


signature ETERM =
   sig

      type eterm
      type symbol = Symbol.symbol
      type binder = symbol option

      exception Syntax of string

      val closed     : eterm -> Term.term
      val withidir   : Directory.idirectory -> eterm -> Term.term
      val withdir    : Directory.directory -> eterm -> Term.term

      val literal    : Term.term -> eterm

      val short      : symbol -> eterm
      val var        : symbol -> eterm        (* always a variable *)
      val long       : symbol list -> eterm   (* always a constant *)

      (* suppress insertion of implicit variables *)
      val explicit   : eterm -> eterm

      val const      : Constant.constant -> eterm
      val lam        : binder -> eterm -> eterm
      val lamann     : binder -> eterm -> eterm -> eterm
      val app        : eterm -> eterm -> eterm
      val pair       : eterm -> eterm -> eterm
      val pi1        : eterm -> eterm
      val pi2        : eterm -> eterm
      val next       : eterm -> eterm
      val prev       : eterm -> eterm
      val triv       : eterm
      val evar       : eterm
      val integer    : IntInf.int -> eterm
      val symbol     : Symbol.symbol -> eterm
      val hole       : eterm
      val marker     : symbol -> eterm

      val apply1     : Constant.constant -> eterm -> eterm
      val apply2     : Constant.constant -> eterm -> eterm -> eterm
      val apply3     : Constant.constant -> eterm -> eterm -> eterm -> eterm
      val apply4     : Constant.constant -> eterm -> eterm -> eterm -> eterm -> eterm
      val apply5     : Constant.constant -> eterm -> eterm -> eterm -> eterm -> eterm -> eterm
      val applyn     : Constant.constant -> eterm list -> eterm
      val appn       : eterm -> eterm list -> eterm

      (* binds additional variables before resolving *)
      val additional : symbol option list -> eterm -> eterm

      (* absolute dir M returns an eterm that resolves to M using dir *)
      val absolute   : Directory.directory -> Term.term -> eterm

      (* subst M x N = [M/x] N *)
      val subst      : eterm -> symbol -> eterm -> eterm

      (* resulting term cannot depend on the indicated variable *)
      val exclude    : symbol -> eterm -> eterm

      (* raises Syntax using the given location if the eterm contains an unbound variable *)
      val withloc    : int * int -> eterm -> eterm

   end


structure ETermInternal
   :> sig

         include ETERM
   
         type eterm_ =
            (Directory.idirectory -> Term.elim list -> Term.term) SymbolDict.dict
            -> Directory.idirectory
            -> bool
            -> Term.elim list
            -> Term.term
   
         val expose : eterm -> eterm_
         val hide : eterm_ -> eterm

      end
   =
   struct

      structure D = Directory
      structure T = Term
      structure SD = SymbolDict
      structure CR = CheckpointedRef

      type symbol = Symbol.symbol
      type binder = symbol option

      type eterm =
         (D.idirectory -> T.elim list -> T.term) SymbolDict.dict  (* special forms *)
         -> D.idirectory   (* identifers *)
         -> bool           (* insert implicit arguments? *)
         -> T.elim list    (* delayed spine *)
         -> T.term

      type eterm_ = eterm


      fun expose x = x
      fun hide x = x


      fun elim m spine =
         (case spine of
             [] => m

           | _ :: _ => T.Elim (m, spine))


      fun implicits n acc =
         if n <= 0 then
            acc
         else
            implicits (n-1) (T.App (T.evar ()) :: acc)
         

      exception Syntax = SyntaxError.Syntax


      fun short sym special dir imps spine =
         (case D.lookupOpt dir sym of
             SOME (D.Hvar i) =>
                elim (T.Var i) spine

           | SOME (D.Hconst const) =>
                (case SD.find special sym of
                    NONE =>
                       elim 
                          (T.Const const)
                          (if imps then
                              implicits (Database.findImplicits const) spine
                           else
                              spine)

                  | SOME f => 
                       (* specials shadow constants *)
                       f dir spine)

           | NONE =>
                (case SD.find special sym of
                    NONE => raise (D.Unbound sym)

                  | SOME f => f dir spine))
         

      fun var sym _ dir _ spine = elim (T.Var (D.lookupVar dir sym)) spine
         
      fun signalUnknownConstant syms = 
         raise (Syntax (String.concat
                           [
                           "unknown constant ",
                           String.concatWith "." (List.map Symbol.toValue syms),
                           "."
                           ]))

      fun long syms _ _ imps spine =
         (case Namespace.resolveOpt syms of
             NONE =>
                signalUnknownConstant syms

           | SOME const =>
                elim
                   (T.Const const)
                   (if imps then
                       implicits (Database.findImplicits const) spine
                    else
                       spine))
         

      fun const const _ _ _ spine = elim (T.Const const) spine

      fun lam binder body special dir imps spine =
         elim
            (case binder of
                NONE =>
                   T.Lam (NONE, body special (D.ibind0 dir) imps [])
   
              | SOME x =>
                   T.Lam (binder, body special (D.ibind dir x) imps []))
            spine

      fun lamann binder a body special dir imps spine =
         elim
            (case binder of
                NONE =>
                   T.apply2 Prim.fnann
                      (a special dir imps [])
                      (T.Lam (NONE, body special (D.ibind0 dir) imps []))
   
              | SOME x =>
                   T.apply2 Prim.fnann
                      (a special dir imps [])
                      (T.Lam (binder, body special (D.ibind dir x) imps [])))
            spine

      fun app m1 m2 special dir imps spine =
         m1 special dir imps (T.App (m2 special dir imps []) :: spine)

      fun pair m1 m2 special dir imps spine =
         elim
            (T.Pair (m1 special dir imps [],
                     m2 special dir imps []))
            spine

      fun pi1 m special dir imps spine = m special dir imps (T.Pi1 :: spine)

      fun pi2 m special dir imps spine = m special dir imps (T.Pi2 :: spine)

      fun next m special dir imps spine =
         elim
            (T.Next (m special dir imps []))
            spine

      fun prev m special dir imps spine = m special dir imps (T.Prev :: spine)

      fun triv _ _ _ spine = elim T.Triv spine

      fun evar _ _ _ spine = elim (T.evar ()) spine

      fun integer x _ _ _ spine = elim (T.Native (T.Integer x)) spine

      fun symbol x _ _ _ spine = elim (T.Native (T.Symbol x)) spine

      val zilch = Symbol.fromValue ""

      fun hole _ _ _ spine = elim (T.Marker zilch) spine

      fun marker sym _ _ _ spine = elim (T.Marker sym) spine

      fun apply1 c m1 special dir imps spine =
         T.Elim (T.Const c, T.App (m1 special dir imps []) :: spine)

      fun apply2 c m1 m2 special dir imps spine =
         T.Elim (T.Const c, 
                 T.App (m1 special dir imps []) 
                 :: T.App (m2 special dir imps []) 
                 :: spine)

      fun apply3 c m1 m2 m3 special dir imps spine =
         T.Elim (T.Const c, 
                 T.App (m1 special dir imps []) 
                 :: T.App (m2 special dir imps []) 
                 :: T.App (m3 special dir imps []) 
                 :: spine)


      fun apply4 c m1 m2 m3 m4 special dir imps spine =
         T.Elim (T.Const c, 
                 T.App (m1 special dir imps []) 
                 :: T.App (m2 special dir imps []) 
                 :: T.App (m3 special dir imps []) 
                 :: T.App (m4 special dir imps []) 
                 :: spine)

      fun apply5 c m1 m2 m3 m4 m5 special dir imps spine =
         T.Elim (T.Const c, 
                 T.App (m1 special dir imps []) 
                 :: T.App (m2 special dir imps []) 
                 :: T.App (m3 special dir imps []) 
                 :: T.App (m4 special dir imps []) 
                 :: T.App (m5 special dir imps []) 
                 :: spine)

      fun applyn c l special dir imps spine =
         T.Elim (T.Const c, 
                 List.foldr
                    (fns m rest => T.App (m special dir imps []) :: rest)
                    spine
                    l)

      fun appn m1 l special dir imps spine =
         m1 special dir imps
            (List.foldr
                (fns m rest => T.App (m special dir imps []) :: rest)
                spine
                l)

      fun additional xs m special dir imps spine =
         (case xs of
             [] =>
                m special dir imps spine

           | NONE :: rest =>
                additional rest m special (D.ibind0 dir) imps spine

           | SOME x :: rest =>
                additional rest m special (D.ibind dir x) imps spine)

      fun literal m _ _ _ spine = elim m spine

      fun explicit m special dir _ spine = m special dir false spine



      fun closed m = m SD.empty D.iempty true []

      fun withidir idir m = m SD.empty idir true []

      fun withdir dir m = m SD.empty (Directory.idir dir) true []



      fun absoluteMain from to depth m =
         (case Normalize.simplify m of
             T.Elim (T.Var i, spine) =>
                if i < depth then
                   T.Elim (T.Var i,
                           absoluteSpine from to depth spine)
                else
                   T.Elim (T.Var (D.lookupVar to (D.name from (i-depth)) + depth),
                           absoluteSpine from to depth spine)

           | T.Elim (T.Const const, spine) =>
                T.Elim (T.Const const,
                        absoluteSpine from to depth spine)

           | T.Elim (T.Sub (evar, s), spine) =>
                T.Elim (T.Sub (evar, absoluteSub from to depth s),
                        absoluteSpine from to depth spine)

           | T.Lam (binder, m1) =>
                T.Lam (binder,
                       absoluteMain from to (depth+1) m1)

           | T.Pair (m1, m2) =>
                T.Pair (absoluteMain from to depth m1, absoluteMain from to depth m2)

           | T.Next m1 =>
                T.Next (absoluteMain from to depth m1)

           | T.Triv => T.Triv

           | m' as T.Marker _ => m'

           | _ =>
                (* impossible in simple form *)
                raise (Fail "impossible"))

      and absoluteSpine from to depth l =
         (case l of
             [] => []

           | T.App m :: rest =>
                T.App (absoluteMain from to depth m) :: absoluteSpine from to depth rest

           | elim :: rest =>
                elim :: absoluteSpine from to depth rest)

      and absoluteSub from to depth s =
         (case s of
             T.Dot (m, s') =>
                T.Dot (absoluteMain from to depth m, absoluteSub from to depth s')

           | T.Idot (i, s') =>
                let
                   val i' = 
                      if i < depth then
                         i
                      else
                         D.lookupVar to (D.name from (i-depth)) + depth
                in
                   (case absoluteSub from to depth s' of
                       s'' as T.Shift k =>
                          if i' = k-1 then
                             T.Shift i'
                          else
                             T.Idot (i', s'')
                             
                     | s'' => 
                          T.Idot (i', s''))
                end

           | T.Shift k =>
                let
                   val sz = D.size from
                in
                   if k >= sz + depth then
                      T.Shift (k - sz + D.isize to)
                   else
                      absoluteSub from to depth (T.Idot (k, T.Shift (k+1)))
                end)

      fun absolute from m _ to _ spine =
         elim (absoluteMain from to 0 m) spine


      fun subst em sym en special dir imps spine =
         elim
            (T.Sub (en special (D.ibind dir sym) imps [],
                    T.Dot (em special dir imps [], T.id)))
            spine


      fun excludeSub i =
         if i = 0 then
            Prune.Pundef (Prune.Pshift 1)
         else
            Prune.punder (excludeSub (i-1)) 

      fun exclude sym em special dir imps spine =
         (case D.lookupVarOpt dir sym of
             NONE =>
                raise (Syntax (String.concat
                                  [
                                  "unbound variable ",
                                  Symbol.toValue sym,
                                  " in exclusion."
                                  ]))

           | SOME i =>
                let
                   val m = em special dir imps []
                in
                   (case Prune.prune m (excludeSub i) of
                       NONE =>
                          raise (Syntax (String.concat
                                            [
                                            "term depends on excluded variable ",
                                            Symbol.toValue sym,
                                            "."
                                            ]))

                     | SOME m' => elim m' spine)
                end)


      fun withloc (r, c) m special dir imps spine =
         try
            m special dir imps spine
         with
            D.Unbound sym =>
               raise (Syntax (String.concat
                                 [
                                 "unbound variable ",
                                 Symbol.toValue sym,
                                 " at ",
                                 Int.toString r,
                                 ".",
                                 Int.toString c,
                                 "."
                                 ]))

   end


structure ETerm 
   :> ETERM where type eterm = ETermInternal.eterm 
   = ETermInternal
