
signature PRIM_REDUCTION =
   sig

      type reduction
      type reduction1
      type reduction2

      val unroll_fix : reduction1
      val unroll_pause : reduction1
      val reduce_lett : reduction1

      val ite_tru : reduction2
      val ite_fals : reduction2

      val sum_case_inl : reduction2
      val sum_case_inr : reduction2

      val nat_case_zero : reduction2
      val nat_case_succ : reduction2
      val unroll_zero : reduction1
      val unroll_succ : reduction1
      
      val letnext_next : reduction
      val apply_fnann : reduction

   end



signature PRIM_REDUCTION_INTERNAL =
   sig

      include PRIM_REDUCTION

      val redices : reduction2 list

      type constant
      val hardcodes : (constant * reduction) list

   end


functor PrimReductionFun (structure Term : TERM
                          structure Constant : CONSTANT
                                               where type constant = Term.constant
                          structure Prim : PRIM
                                           where type constant = Term.constant
                          structure Reduction : REDUCTION_PRIV
                                                where type constant = Term.constant
                                                where type term = Term.term
                                                where type elim = Term.elim)
   :> 
   PRIM_REDUCTION_INTERNAL
   where type constant = Term.constant
   where type reduction = Reduction.reduction
   where type reduction1 = Reduction.reduction1
   where type reduction2 = Reduction.reduction2
   =
   struct

      structure R = Reduction
      structure T = Term

      open Prim

      type reduction = Reduction.reduction
      type reduction1 = Reduction.reduction1
      type reduction2 = Reduction.reduction2


      val theRedices : reduction2 list ref = ref []

      fun redex r =
         let
            val red = R.backdoor2 r
         in
            theRedices := red :: !theRedices;
            red
         end


      val unroll_pause =
         R.new1 pause 1 T.zero (R.trans [R.unfold, R.beta 1]) R.refl

      val unroll_fix =
         R.new1 fix 1
            (T.app T.zero (T.apply1 fix T.zero))
            (R.trans
                [
                R.unfold,
                R.user1 unroll_pause,
                R.beta 2,
                ])
            (R.within [1] R.unfold)

      val reduce_lett =
         R.new1 lett 2 
            (T.app T.zero (T.Var 1))
            (R.trans [R.unfold, R.beta 2])
            R.refl

      val ite_tru =
         (* ite true M1 M0 --> M1 *)
         redex (ite, 0, 2, tru, 0, T.Var 1)
   
      val ite_fals =
         (* ite fals M1 M0 --> M0 *)
         redex (ite, 0, 2, fals, 0, T.Var 0)
   
      val sum_case_inl =
         (* sum_case (inl M2) M1 M0 --> M1 M2 *)
         redex (sum_case, 0, 2, inl, 1, T.Elim (T.Var 1, [T.App (T.Var 2)]))
   
      val sum_case_inr =
         (* sum_case (inr M2) M1 M0 --> M0 M2 *)
         redex (sum_case, 0, 2, inr, 1, T.Elim (T.Var 0, [T.App (T.Var 2)]))
   
      val nat_case_zero =
         (* nat_case zero M1 M0 --> M1 *)
         R.new2 nat_case 0 2 zero 0 
            (T.Var 1) 
            (R.trans
                [
                R.unfold,
                R.beta 3,
                R.within [1] R.unfold,
                R.user2 sum_case_inl,
                R.beta 1
                ])
            R.refl

      val nat_case_succ =
         (* nat_case (succ M2) M1 M0 --> M0 M2 *)
         R.new2 nat_case 0 2 succ 1
            (T.app (T.Var 0) (T.Var 2))
            (R.trans
                [
                R.unfold,
                R.beta 3,
                R.within [1] (R.trans [R.unfold, R.beta 1]),
                R.user2 sum_case_inr,
                R.beta 1
                ])
            R.refl

      val unroll_zero =
         R.new1 zero 0 (T.apply1 inl T.Triv) R.unfold R.refl

      val unroll_succ =
         R.new1 succ 1 (T.apply1 inr T.zero) (R.trans [R.unfold, R.beta 1]) R.refl

      val () = theRedices := nat_case_zero :: nat_case_succ :: !theRedices

      val redices = !theRedices
      val () = theRedices := []



      val letnext_next =
         R.trans [R.unfold, R.beta 2, R.compat [R.beta 1]]

      val apply_fnann =
         R.trans [R.unfold, R.beta 3]

      type constant = T.constant

      val hardcodes =
         [(Prim.letnext, letnext_next),
          (Prim.fnann, apply_fnann)]

   end
