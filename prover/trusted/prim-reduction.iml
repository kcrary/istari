
signature PRIM_REDUCTION =
   sig

      type reduction
      type ureduction

      val unroll_fix : ureduction
      val unroll_pause : ureduction
      val reduce_lett : ureduction

      val ite_tru : ureduction
      val ite_fals : ureduction

      val sum_case_inl : ureduction
      val sum_case_inr : ureduction

      val nat_case_zero : ureduction
      val nat_case_succ : ureduction
      val unroll_zero : ureduction
      val unroll_succ : ureduction
      
      val letnext_next : reduction
      val letpair_pair : reduction
      val apply_fnann : reduction

   end



signature PRIM_REDUCTION_INTERNAL =
   sig

      include PRIM_REDUCTION

      val redices : ureduction list

      type constant
      val hardcodes : (constant * reduction) list

   end


functor PrimReductionFun (structure Term : TERM
                          structure Constant : CONSTANT
                                               where type constant = Term.constant
                          structure Prim : PRIM
                                           where type constant = Term.constant
                          structure Reduction : REDUCTION_PRIV
                                                where type constant = Term.constant
                                                where type term = Term.term
                                                where type elim = Term.elim)
   :> 
   PRIM_REDUCTION_INTERNAL
   where type constant = Term.constant
   where type reduction = Reduction.reduction
   where type ureduction = Reduction.ureduction
   =
   struct

      structure R = Reduction
      structure T = Term

      open Prim

      type reduction = Reduction.reduction
      type ureduction = Reduction.ureduction


      val unroll_pause =
         R.new pause [] 1 T.zero (R.trans [R.unfold, R.beta 1]) R.refl

      val unroll_fix =
         R.new fix [] 1
            (T.app T.zero (T.apply1 fix T.zero))
            (R.trans
                [
                R.unfold,
                R.user unroll_pause,
                R.beta 2,
                ])
            (R.within [1] R.unfold)

      val reduce_lett =
         R.new lett [] 2 
            (T.app T.zero (T.Var 1))
            (R.trans [R.unfold, R.beta 2])
            R.refl

      val ite_tru =
         (* ite true M1 M0 --> M1 *)
         R.backdoor (ite, [(0, tru, 0)], 2, T.Var 1)
   
      val ite_fals =
         (* ite fals M1 M0 --> M0 *)
         R.backdoor (ite, [(0, fals, 0)], 2, T.Var 0)
   
      val sum_case_inl =
         (* sum_case (inl M2) M1 M0 --> M1 M2 *)
         R.backdoor (sum_case, [(0, inl, 1)], 2, T.Elim (T.Var 1, [T.App (T.Var 2)]))
   
      val sum_case_inr =
         (* sum_case (inr M2) M1 M0 --> M0 M2 *)
         R.backdoor (sum_case, [(0, inr, 1)], 2, T.Elim (T.Var 0, [T.App (T.Var 2)]))
   
      val nat_case_zero =
         (* nat_case zero M1 M0 --> M1 *)
         R.new nat_case [(0, zero, 0)] 2
            (T.Var 1) 
            (R.trans
                [
                R.unfold,
                R.beta 3,
                R.within [1] R.unfold,
                R.user sum_case_inl,
                R.beta 1
                ])
            R.refl

      val nat_case_succ =
         (* nat_case (succ M2) M1 M0 --> M0 M2 *)
         R.new nat_case [(0, succ, 1)] 2
            (T.app (T.Var 0) (T.Var 2))
            (R.trans
                [
                R.unfold,
                R.beta 3,
                R.within [1] (R.trans [R.unfold, R.beta 1]),
                R.user sum_case_inr,
                R.beta 1
                ])
            R.refl

      val unroll_zero =
         R.new zero [] 0 (T.apply1 inl T.Triv) R.unfold R.refl

      val unroll_succ =
         R.new succ [] 1 (T.apply1 inr T.zero) (R.trans [R.unfold, R.beta 1]) R.refl

      val redices =
         [nat_case_zero, nat_case_succ, ite_tru, ite_fals, sum_case_inl, sum_case_inr]



      val letnext_next =
         R.trans [R.unfold, R.beta 2, R.compat [R.beta 1]]

      val letpair_pair =
         R.trans [R.unfold, R.beta 2, R.compat [R.beta 1, R.beta 1]]

      (* This doesn't perfectly capture what lete is doing, but it's fine for auto-reduce purposes. *)
      val reduce_lete =
         R.trans [R.unfold, R.beta 2]

      val apply_fnann =
         R.trans [R.unfold, R.beta 3]

      val reduceSeq = R.seq

      val reduceSeqt =
         R.trans [R.unfold, R.seq]

      type constant = T.constant

      val hardcodes =
         [(Prim.letnext, letnext_next),
          (Prim.letpair, letpair_pair),
          (Prim.lete, reduce_lete),
          (Prim.fnann, apply_fnann),
          (Prim.seq, reduceSeq),
          (Prim.seqt, reduceSeqt)]

   end
