
signature PRIM =
   sig

      type constant

      (* primitive *)
      val bool : constant
      val eq : constant
      val eqtp : constant
      val exists : constant
      val fals : constant        (* false *)
      val forall : constant
      val foralltp : constant
      val future : constant
      val iexists : constant
      val iforall : constant
      val inl : constant
      val inr : constant
      val integer : constant
      val intersect : constant
      val iset : constant
      val ite : constant
      val guard : constant
      val karrow : constant
      val kind : constant
      val level : constant
      val lleq : constant
      val lmax : constant
      val lsucc : constant
      val lzero : constant
      val mu : constant
      val partial : constant
      val prod : constant
      val quotient : constant
      val rec : constant
      val seq : constant
      val set : constant
      val subtype : constant
      val sum : constant
      val sum_case : constant
      val tarrow : constant
      val tru : constant         (* true *)
      val union : constant
      val unit : constant
      val univ : constant
      val void : constant

      (* primitive, invisible until placed into library *)
      val admiss : constant
      val bogus : constant       (* for placeholder terms *)
      val entailment : constant  (* dummy constant for the rewriter *)
      val eqzb : constant
      val halts : constant
      val leqzb : constant
      val magic : constant       (* extract for trustme *)
      val negative : constant
      val negz : constant
      val orphan : constant      (* substituted for variables going out of scope *)
      val plusz : constant
      val positive : constant
      val sequal : constant
      val symbol : constant
      val symbol_eqb : constant
      val timesz : constant
      val uptype : constant

      (* defined *)
      val abort : constant
      val acc : constant      (* Acc *)
      val ann : constant
      val ap : constant
      val arrow : constant
      val eeqtp : constant
      val fix : constant
      val fnann : constant    (* annotated fn *)
      val iff : constant
      val implies : constant
      val istp : constant
      val lett : constant     (* let *)
      val letnext : constant
      val manual : constant
      val manualf : constant
      val manuals : constant
      val nat : constant
      val nat_case : constant
      val ov : constant       (* of *)
      val pause : constant
      val squash : constant
      val succ : constant
      val zero : constant

      (* defined, invisible until placed into library *)
      val bottom : constant
      val eqb : constant
      val cEqzb : constant                 (* Eqzb *)
      val cInteger : constant
      val integer_from_Integer : constant
      val integer_to_Integer : constant
      val integer_to_nat : constant
      val leqb : constant
      val cLeqzb : constant                (* Leqzb *)
      val nat_to_integer : constant
      val cNegz : constant                 (* Negz *)
      val plus : constant
      val cPlusz : constant                (* Plusz *)
      val times : constant
      val cTimesz : constant               (* Timesz *)

   end


signature PRIM_INTERNAL =
   sig

      include PRIM

      val primitives : (Symbol.symbol * constant) list

   end


functor PrimFun (structure Term : TERM
                 structure Constant : CONSTANT_INTERNAL
                                      where type term = Term.term
                                      where type constant = Term.constant
                 structure Pickling : PICKLING_PRIV
                                      where type constant = Term.constant)
   :> 
   PRIM_INTERNAL
   where type constant = Constant.constant
   =
   struct

      type constant = Constant.constant

      structure T = Term

      val numPrimitives = ref 0
      val thePrimitives : (Symbol.symbol * constant) list ref = ref []

      (* visible: whether to place the constant into primitives
         and hence into the namespace.
      *)
      fun declare visible str path def =
         let
            val i = !numPrimitives
            val sym = Symbol.fromValue str

            val opac =
               (case def of
                   NONE => Constant.OPAQUE

                 | SOME _ => Constant.HARD)

            val const = Constant.declare false def (sym :: path) opac
         in
            numPrimitives := 1 + i;

            if visible then
               thePrimitives := (sym, const) :: !thePrimitives
            else
               ();

            Pickling.primitive const i;
            const
         end

      fun newconst str = declare true str [] NONE
      fun newconstInvis str path = declare false str path NONE
      fun defconst str m = declare true str [] (SOME m)
      fun defconstInvis str path m = declare false str path (SOME m)

      (* Anticipate where the invisible constants will eventually be made visible. *)
      val intPath = List.map Symbol.fromValue ["Integer"]
      val natPath = List.map Symbol.fromValue ["Nat"]
      val symPath = List.map Symbol.fromValue ["Symbol"]
      val intdefPath = List.map Symbol.fromValue ["Def", "Symbol"]
      val intisoPath = List.map Symbol.fromValue ["Iso", "Symbol"]
      val miscPath = List.map Symbol.fromValue ["Miscellaneous"]
      val partialPath = List.map Symbol.fromValue ["Partial"]
      val sequalPath = List.map Symbol.fromValue ["SyntacticEquality"]

      val bool = newconst "bool"
      val eq = newconst "eq"
      val eqtp = newconst "eqtp"
      val exists = newconst "exists"
      val fals = newconst "false"
      val forall = newconst "forall"
      val foralltp = newconst "foralltp"
      val future = newconst "future"
      val iexists = newconst "iexists"
      val iforall = newconst "iforall"
      val inl = newconst "inl"
      val inr = newconst "inr"
      val integer = newconst "integer"
      val intersect = newconst "intersect"
      val iset = newconst "iset"
      val ite = newconst "ite"
      val guard = newconst "guard"
      val karrow = newconst "karrow"
      val kind = newconst "Kind"
      val level = newconst "level"
      val lleq = newconst "lleq"
      val lmax = newconst "lmax"
      val lsucc = newconst "lsucc"
      val lzero = newconst "lzero"
      val mu = newconst "mu"
      val partial = newconst "partial"
      val prod = newconst "prod"
      val quotient = newconst "quotient"
      val rec = newconst "rec"
      val seq = newconst "seq"
      val set = newconst "set"
      val subtype = newconst "subtype"
      val sum = newconst "sum"
      val sum_case = newconst "sum_case"
      val tarrow = newconst "tarrow"
      val tru = newconst "true"
      val union = newconst "union"
      val unit = newconst "unit"
      val univ = newconst "univ"
      val void = newconst "void"

      val admiss = newconstInvis "admiss" partialPath
      val bogus = newconstInvis "bogus" miscPath
      val entailment = newconstInvis "entailment" miscPath
      val eqzb = newconstInvis "eqzb" intPath
      val halts = newconstInvis "halts" partialPath
      val leqzb = newconstInvis "leqzb" intPath
      val magic = newconstInvis "magic" miscPath
      val negative = newconstInvis "negative" miscPath
      val negz = newconstInvis "negz" intPath
      val orphan = newconstInvis "orphan" miscPath
      val plusz = newconstInvis "plusz" intPath
      val positive = newconstInvis "positive" miscPath
      val sequal = newconstInvis "sequal" sequalPath
      val symbol = newconstInvis "symbol" symPath
      val symbol_eqb = newconstInvis "symbol_eqb" symPath
      val timesz = newconstInvis "timesz" intPath
      val uptype = newconstInvis "uptype" partialPath

      val abort =
         defconst "abort"
         (T.Lam (NONE, T.zero))

      val ann =
         defconst "ann"
         (T.Lam (NONE, T.Lam (NONE, T.zero)))

      val ap =
         defconst "ap"
         (T.Lam (NONE, T.Lam (NONE, T.Var 1)))

      val arrow = 
         defconst "arrow"
         (T.Lam (NONE, T.Lam (NONE, T.apply2 forall (T.Var 1) (T.Lam (NONE, T.Var 1)))))

      val eeqtp =
         defconst "eeqtp"
         (T.Lam (NONE, T.Lam (NONE, T.apply2 prod (T.apply2 subtype (T.Var 1) (T.Var 0)) (T.apply2 subtype (T.Var 0) (T.Var 1)))))

      val iff =
         defconst "iff"
         (T.Lam (NONE, T.Lam (NONE, T.apply2 prod (T.apply2 arrow (T.Var 1) (T.Var 0)) (T.apply2 arrow (T.Var 0) (T.Var 1)))))

      val fnann =
         defconst "fnann"
         (T.Lam (NONE, T.Lam (NONE, T.zero)))

      val implies =
         defconst "implies"
         (T.Const arrow)

      val istp =
         defconst "istp"
         (T.Lam (NONE, T.apply2 eqtp T.zero T.zero))

      (* hardcoded reduction in Redex depends on this definition *)
      val letnext =
         defconst "letnext"
         (T.Lam (NONE, T.Lam (NONE, T.app T.zero (T.prev (T.Var 1)))))

      val lett =
         defconst "let"
         (T.Lam (NONE, T.Lam (NONE, T.app T.zero (T.Var 1))))

      val manual =
         defconst "manual"
         (T.Lam (NONE, T.zero))

      val manualf =
         defconst "manualf"
         (T.Lam (NONE, T.zero))

      val manuals =
         defconst "manuals"
         (T.Lam (NONE, T.zero))

      val nat =
         defconst "nat"
         (T.apply1 mu (T.Lam (NONE, T.apply2 sum (T.Const unit) (T.Var 0))))

      val nat_case =
         defconst "nat_case"
         (T.Lam (NONE, 
                 T.Lam (NONE, 
                        T.Lam (NONE,
                               T.apply3 sum_case
                                  (T.Var 2)
                                  (T.Lam (NONE, T.Var 2))
                                  (T.Lam (NONE, T.app (T.Var 1) (T.Var 0)))))))

      val ov =
         defconst "of"
         (T.Lam (NONE, T.Lam (NONE, T.apply3 eq (T.Var 1) T.zero T.zero)))

      val pause =
         defconst "pause"
         (T.Lam (NONE, T.zero))

      val squash = 
         defconst "squash"
         (T.Lam (NONE, T.apply2 set (T.Const unit) (T.Lam (NONE, T.Var 1))))

      val succ = 
         defconst "succ"
         (T.Lam (NONE, T.apply1 inr T.zero))

      val zero =
         defconst "zero"
         (T.apply1 inl T.Triv)

      (* Uses pause.  This isn't strictly necessary, but it's protection in case the user
         accidentally unfolds fix.
      *)
      val fix =
         defconst "fix"
         (T.apply2 pause
             (T.Lam (NONE,
                     T.Lam (SOME (Symbol.fromValue "f"),
                            T.app
                               (T.Var 0)
                               (T.apply3 pause (T.Var 1) (T.Var 1) (T.Var 0)))))
             (T.Lam (NONE,
                     T.Lam (SOME (Symbol.fromValue "f"),
                            T.app
                               (T.Var 0)
                               (T.apply3 pause (T.Var 1) (T.Var 1) (T.Var 0))))))

      fun lamb str m = T.Lam (SOME (Symbol.fromValue str), m)

      fun lamsb l m = List.foldr lamb m l

      val acc =
         defconst "Acc"
         (* fn A R x .
               exists (a : mu t . exists (y : A) . forall (z : A) . R z y -> t) .
                  fix
                     (fn wf b y .
                         exists (_ : y = b #1 : A) .
                            forall (z : A) (r : R z y) .
                               wf (b #2 z r) z)
                     a x
         *)
         (lamsb ["A", "R", "x"]
             (T.apply2 exists
                 (T.apply1 mu
                     (lamb "t"
                         (T.apply2 exists
                             (T.Var 3)
                             (lamsb ["y"]
                                 (T.apply2 forall
                                     (T.Var 4)
                                     (lamsb ["z"]
                                         (T.apply2 arrow
                                             (T.app2 (T.Var 4) (T.Var 0) (T.Var 1))
                                             (T.Var 2))))))))
                 (lamb "a"
                     (T.apply3 fix
                         (lamsb ["W", "b", "y"]
                             (T.apply2 exists
                                 (T.apply3 eq (T.Var 6) (T.Var 0) (T.pi1 (T.Var 1)))
                                 (lamb "v"
                                     (T.apply2 forall
                                         (T.Var 7)
                                         (lamb "z"
                                             (T.apply2 forall
                                                 (T.app2 (T.Var 7) (T.Var 0) (T.Var 2))
                                                 (lamb "r"
                                                     (T.app2
                                                         (T.Var 5)
                                                         (T.app2 (T.pi2 (T.Var 4)) (T.Var 1) (T.Var 0))
                                                         (T.Var 1)))))))))
                         (T.Var 0)
                         (T.Var 1)))))
                                     


      val integer_to_nat =
         defconstInvis "integer_to_nat" intPath
         (T.apply1 fix
             (T.Lam (NONE, 
                     T.Lam (SOME (Symbol.fromValue "a"),
                            T.apply3 ite
                               (T.apply2 leqzb (T.Var 0) (T.Native (T.Integer 0I)))
                               (T.Const zero)
                               (T.apply1 succ 
                                   (T.app (T.Var 1) 
                                       (T.apply2 plusz (T.Native (T.Integer ~1I)) (T.Var 0))))))))

      val nat_to_integer =
         defconstInvis "nat_to_integer" intPath
         (T.apply1 fix
             (T.Lam (NONE,
                     T.Lam (SOME (Symbol.fromValue "n"),
                            T.apply3 nat_case
                               (T.Var 0)
                               (T.Native (T.Integer 0I))
                               (T.Lam (SOME (Symbol.fromValue "n'"),
                                       T.apply2 plusz
                                          (T.Native (T.Integer 1I))
                                          (T.app (T.Var 2) (T.Var 0))))))))

      val plus =
         defconstInvis "plus" natPath
         (T.apply1 fix
             (T.Lam (NONE,
                     T.Lam (NONE,
                            T.Lam (NONE,
                                   T.apply3 nat_case
                                   (T.Var 1)
                                   (T.Var 0)
                                   (T.Lam (NONE,
                                           T.apply1 succ
                                              (T.app2 (T.Var 3) (T.Var 0) (T.Var 1)))))))))

      val times =
         defconstInvis "times" natPath
         (T.apply1 fix
             (T.Lam (NONE,
                     T.Lam (NONE,
                            T.Lam (NONE,
                                   T.apply3 nat_case
                                   (T.Var 1)
                                   (T.Const zero)
                                   (T.Lam (NONE,
                                           T.apply2 plus 
                                              (T.Var 1)
                                              (T.app2 (T.Var 3) (T.Var 0) (T.Var 1)))))))))

      val bottom =
         defconstInvis "bottom" partialPath
         (T.apply1 fix (T.Lam (NONE, T.Var 0)))

      val eqb =
         defconstInvis "eqb" natPath
         (T.apply1 fix
             (T.Lam (NONE,
                     T.Lam (NONE,
                            T.Lam (NONE,
                                   T.apply3 nat_case 
                                      (T.Var 1)
                                      (T.apply3 nat_case
                                          (T.Var 0)
                                          (T.Const tru)
                                          (T.Lam (NONE, T.Const fals)))
                                      (T.Lam (NONE,
                                              T.apply3 nat_case
                                                 (T.Var 1)
                                                 (T.Const fals)
                                                 (T.Lam (NONE,
                                                         T.app2 (T.Var 4) (T.Var 1) (T.Var 0))))))))))

      val cEqzb =
         defconstInvis "Eqzb" intdefPath
         (T.Lam (NONE,
                 T.Lam (NONE,
                        T.apply2 eqb
                           (T.apply2 plus (T.Elim (T.Var 1, [T.Pi1])) (T.Elim (T.Var 0, [T.Pi2])))
                           (T.apply2 plus (T.Elim (T.Var 1, [T.Pi2])) (T.Elim (T.Var 0, [T.Pi1]))))))
         
      val cInteger =
         defconstInvis "Integer" intdefPath
         (T.apply2 quotient
              (T.apply2 prod (T.Const nat) (T.Const nat))
              (T.Lam (NONE,
                      T.Lam (NONE,
                             T.apply3 eq
                                (T.Const nat)
                                (T.apply2 plus (T.Elim (T.Var 1, [T.Pi1])) (T.Elim (T.Var 0, [T.Pi2])))
                                (T.apply2 plus (T.Elim (T.Var 1, [T.Pi2])) (T.Elim (T.Var 0, [T.Pi1])))))))
 
      val integer_from_Integer =
         defconstInvis "integer_from_Integer" intisoPath
         (T.Lam (NONE,
                 T.apply2 plusz
                     (T.apply1 nat_to_integer (T.pi1 (T.Var 0)))
                     (T.apply1 negz (T.apply1 nat_to_integer (T.pi2 (T.Var 0))))))

      val integer_to_Integer =
         defconstInvis "integer_to_Integer" intisoPath
         (T.Lam (NONE,
                 T.apply3 ite
                     (T.apply2 leqzb (T.Native (T.Integer 0I)) (T.Var 0))
                     (T.Pair (T.apply1 integer_to_nat (T.Var 0), T.Const zero))
                     (T.Pair (T.Const zero, T.apply1 integer_to_nat (T.apply1 negz (T.Var 0))))))

      val leqb =
         defconstInvis "leqb" natPath
         (T.apply1 fix
             (T.Lam (NONE,
                     T.Lam (NONE,
                            T.Lam (NONE,
                                   T.apply3 nat_case 
                                      (T.Var 1)
                                      (T.Const tru)
                                      (T.Lam (NONE,
                                              T.apply3 nat_case
                                                 (T.Var 1)
                                                 (T.Const fals)
                                                 (T.Lam (NONE,
                                                         T.app2 (T.Var 4) (T.Var 1) (T.Var 0))))))))))

      val cLeqzb =
         defconstInvis "Leqzb" intdefPath
         (T.Lam (NONE,
                 T.Lam (NONE,
                        T.apply2 leqb
                           (T.apply2 plus (T.Elim (T.Var 1, [T.Pi1])) (T.Elim (T.Var 0, [T.Pi2])))
                           (T.apply2 plus (T.Elim (T.Var 1, [T.Pi2])) (T.Elim (T.Var 0, [T.Pi1]))))))
         
      val cNegz =
         defconstInvis "Negz" intdefPath
         (T.Lam (NONE,
                 T.Pair (T.pi2 (T.Var 0), T.pi1 (T.Var 0))))

      val cPlusz =
         defconstInvis "Plusz" intdefPath
         (T.Lam (NONE,
                 T.Lam (NONE,
                        T.Pair (T.apply2 plus (T.pi1 (T.Var 1)) (T.pi1 (T.Var 0)),
                                T.apply2 plus (T.pi2 (T.Var 1)) (T.pi2 (T.Var 0))))))


      val cTimesz =
         defconstInvis "Timesz" intdefPath
         (T.Lam (NONE,
                 T.Lam (NONE,
                        T.Pair (T.apply2 plus
                                   (T.apply2 times (T.pi1 (T.Var 1)) (T.pi1 (T.Var 0)))
                                   (T.apply2 times (T.pi2 (T.Var 1)) (T.pi2 (T.Var 0))),
                                T.apply2 plus
                                   (T.apply2 times (T.pi1 (T.Var 1)) (T.pi2 (T.Var 0)))
                                   (T.apply2 times (T.pi2 (T.Var 1)) (T.pi1 (T.Var 0)))))))




      val primitives = !thePrimitives
      val () = thePrimitives := []

      val () =
         List.app (fn const => Constant.setOpacity const Constant.SOFT)
         [manuals]

      val () =
         List.app (fn const => Constant.setOpacity const Constant.FIRM)
         [ann, ap, fnann, lett, manualf]

      val () =
         List.app (fn const => Constant.setOpacity const Constant.SOFT_STRICT)
         [iff]

   end
