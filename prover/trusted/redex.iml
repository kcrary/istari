
signature REDEX =
   sig

      type term
      type constant
      type elim


      (* redex whnf const spine

         if    whnf computes the hard weak-head normal form of its input
         then  if    const @ spine reduces to some M
               then  returns SOME M
               else  returns NONE
      *)
      val redex : (term -> term) -> constant -> elim list -> term option

   end


signature REDEX_INTERNAL =
   sig

      include REDEX

      type reduction1
      type reduction2

      (* You probably don't want these.  You probably want Define.register, ... instead. *)
      val register : reduction2 -> unit
      val registerNative : int -> int -> reduction1 -> unit

      (* Returns true iff the constant has a reduction registered (including primitively). *)
      val registered : constant -> bool

   end


functor RedexFun (structure Term : TERM
                  structure Constant : CONSTANT
                                       where type constant = Term.constant
                                       where type term = Term.term
                  structure Valuability : VALUABILITY
                                          where type term = Term.term
                  structure Native : NATIVE
                                     where type constant = Term.constant
                                     where type term = Term.term
                                     where type native = Term.native
                  structure Reduction : REDUCTION_INTERNAL
                                        where type constant = Term.constant
                                        where type term = Term.term
                                        where type elim = Term.elim
                  structure Prim : PRIM
                                   where type constant = Term.constant
                  structure PrimReduction : PRIM_REDUCTION_INTERNAL
                                            where type reduction = Reduction.reduction
                                            where type reduction2 = Reduction.reduction2)
   :>
   REDEX_INTERNAL
   where type term = Term.term
   where type constant = Term.constant
   where type elim = Term.elim
   where type reduction1 = Reduction.reduction1
   where type reduction2 = Reduction.reduction2
   =
   struct

      structure R = Reduction
      structure T = Term

      type term = T.term
      type constant = T.constant
      type elim = T.elim

      type reduction1 = Reduction.reduction1
      type reduction2 = Reduction.reduction2

      structure D = RedBlackDict (structure Key = Constant.Ordered)
      structure H = CheckpointedHashTable (structure Key = Constant.Hashable)


      (* We use two tables: the redex table and the user table.

         The redex table directly implements redex (as above).
       
         We use the user table for user-supppied redices, to prevent incompatible
         reductions from being registered, and to combine compatible ones.

         If a reduction has been registered for const, then the userTable will map
         const to a reduction sort.

         - If the reduction is one or more standard reductions (i.e., reduction2s)
           then the reduction sort will be STANDARD (i, d).

           + i is the index of the constant's principal argument, which must agree
             for all of const's redices

           + d maps each reduction's second constant to the reduction

           + Thus if red is a registered reduction2, and

             triggers red = (const, i, const')

             then the table will map const to NATIVE (i, d) where d maps const' to red.

         - If the reduction is some other sort of reduction (unary native, binary native,
           or hardcoded), the reduction sort will be OTHER.
      *)

      val redexTable : ((term -> term) -> elim list -> term option) H.table = H.table ()

      datatype reduction_sort =
         STANDARD of int * Reduction.reduction2 D.dict
       | OTHER

      val userTable : reduction_sort H.table = H.table ()



      fun redex whnf const spine =
         (case H.find redexTable const of
             NONE => NONE

           | SOME f => f whnf spine)

      fun registered const = H.member redexTable const



      (* standardRedex i d whnf spine

         if    const's active argument has index i
               forall all red in const's reductions, d maps red's second constant to red
               whnf computes hard weak-head normal forms
         then  if    const spine reduces to M
               then  returns SOME M
               else  returns NONE
      *)
      fun standardRedex i d whnf spine =
         (case List.splitOpt spine i of
             SOME (spine1, T.App arg :: spine3) =>
                (case whnf arg of
                    T.Elim (T.Const const', spine2) =>
                       (case D.find d const' of
                           SOME red =>
                              (try
                                  SOME (Reduction.ureduce2 red spine1 spine2 spine3)
                               with
                                  Reduction.Reduce => NONE)

                         | NONE => NONE)

                  | _ => NONE)

           | _ => NONE)



      (* nativeRedex i n red whnf spine

         if    const's active arguments have index i ... i+n-1
               red is const's reduction
               whnf computes hard weak-head normal forms
         then  if    const spine reduces to M
               then  returns SOME M
               else  returns NONE
      *)
      fun nativeRedex i n red whnf spine =
         (case List.splitOpt spine i of
             SOME (spine1, spine23) =>
                (case List.splitOpt spine23 n of
                    SOME (spine2, spine3) =>
                       (try
                           let
                              val spine2' =
                                 List.map
                                    (fn T.App arg =>
                                           (case whnf arg of
                                               arg' as T.Native _ => T.App arg'
                                             | _ => raise Reduction.Reduce)
   
                                      | _ => raise Reduction.Reduce)
                                    spine2
                           in
                              SOME (Reduction.ureduce1 red (spine1 @ spine2' @ spine3))
                           end
                        with
                           Reduction.Reduce => NONE)

                  | _ => NONE)

           | _ => NONE)



      fun register red =
         let
            val (const, i, const') = Reduction.triggers red

            val (_, x) =
               H.operate userTable const
                  (fn () => STANDARD (i, D.singleton const' red))
                  (fn STANDARD (i', d) =>
                         if i <> i' then
                            raise (Fail "inconsistent active argument in registered reductions")
                         else
                            let
                               val (d', overlap) = D.insert' d const' red
                            in
                               if overlap then
                                  raise (Fail "overlapping registered reductions")
                               else
                                  STANDARD (i, D.insert d const' red)
                            end

                    | OTHER =>
                         raise (Fail "overlapping registered reductions"))
         in
            (case x of
                STANDARD (_, d) =>
                   H.insert redexTable const (standardRedex i d)

              | OTHER =>
                   raise (Fail "impossible"))
         end



      fun registerNative i n red =
         let
            val const = Reduction.trigger red
         in
            H.operate userTable const
               (fn () =>
                   (
                   H.insert redexTable const (nativeRedex i n red);
                   OTHER
                   ))
               (fn _ =>
                   raise (Fail "overlapping registered reductions"));

            ()
         end



      (* Primitive standard reductions *)

      val () = List.app register PrimReduction.redices



      (* Primitive native reductions *)

      (* primitiveNativeUnaryRedex f whnf spine

         if    spine = Native(x) spine'
               f x = SOME z
         then  returns SOME (z @ spine')
         else  returns NONE
      *)
      fun primitiveNativeUnaryRedex f whnf spine =
         (case spine of
             T.App arg :: spine' =>
                (case whnf arg of
                    T.Native x =>
                       (case f x of
                           SOME z =>
                              SOME (T.Elim (z, spine'))

                         | NONE => NONE)

                  | _ => NONE)

           | _ => NONE)
      


      (* primitiveNativeBinaryRedex f whnf spine

         if    spine = Native(x) Native(y) spine'
               f x y = SOME z
         then  returns SOME (z @ spine')
         else  returns NONE
      *)
      fun primitiveNativeBinaryRedex f whnf spine =
         (case spine of
             T.App arg1 :: T.App arg2 :: spine' =>
                (case (whnf arg1, whnf arg2) of
                    (T.Native x, T.Native y) =>
                       (case f x y of
                           SOME z =>
                              SOME (T.Elim (z, spine'))

                         | NONE => NONE)

                  | _ => NONE)

           | _ => NONE)



      val () =
         List.app
            (fn (const, Native.Unary f) =>
                   (
                   (* This happens at startup, so not bothering to check for overlapping. *)
                   H.insert userTable const OTHER;
                   H.insert redexTable const (primitiveNativeUnaryRedex f)
                   )

              | (const, Native.Binary f) =>
                   (
                   (* This happens at startup, so not bothering to check for overlapping. *)
                   H.insert userTable const OTHER;
                   H.insert redexTable const (primitiveNativeBinaryRedex f)
                   ))
            Native.operators



      (* Hardcoded primitive reductions *)

      fun reduceLetnext whnf spine =
         (case spine of
             T.App arg :: T.App body :: spine' =>
                (case whnf arg of
                    T.Next arg' =>
                       SOME (T.Elim (body, T.App arg' :: spine'))

                  | _ => NONE)

           | _ => NONE)

      val () = H.insert userTable Prim.letnext OTHER
      val () = H.insert redexTable Prim.letnext reduceLetnext



      fun reduceFnann whnf spine =
         (case spine of
             _ :: T.App func :: T.App arg :: spine' =>
                (case whnf func of
                    T.Lam (_, body) =>
                       SOME (T.Elim (T.Sub (body, T.Dot (arg, T.id)), spine'))

                  | _ => NONE)

           | _ => NONE)

      val () = H.insert userTable Prim.fnann OTHER
      val () = H.insert redexTable Prim.fnann reduceFnann


      fun reduceSeq whnf spine =
         (case spine of
             T.App m1 :: T.App m2 :: spine' =>
                let
                   val m1' = whnf m1
                in
                   if Valuability.valuability m1' > 0 then
                      SOME (T.Elim (m2, T.App m1' :: spine'))
                   else
                      NONE
                end

           | _ => NONE)

      val () = H.insert userTable Prim.seq OTHER
      val () = H.insert redexTable Prim.seq reduceSeq

      val () = H.insert userTable Prim.seqt OTHER
      val () = H.insert redexTable Prim.seqt reduceSeq

   end
