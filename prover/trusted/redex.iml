
signature REDEX =
   sig

      type term
      type constant
      type elim


      (* redex whnf const spine

         if    whnf computes the hard weak-head normal form of its input
         then  if    const @ spine reduces to some M
               then  returns SOME M
               else  returns NONE
      *)
      val redex : (term -> term) -> constant -> elim list -> term option

   end


signature REDEX_INTERNAL =
   sig

      include REDEX

      type ureduction

      (* You probably don't want this.  You probably want Define.register instead. *)
      val register : ureduction -> unit

      (* registerNative i n red: arguments i ... i+n-1 must be native for the reduction to activate
         You probably don't want this.  You probably want Define.register instead.
      *)
      val registerNative : int -> int -> ureduction -> unit  

      (* Returns true iff the constant has a reduction registered (including primitively). *)
      val registered : constant -> bool

   end


functor RedexFun (structure Term : TERM
                  structure Constant : CONSTANT
                                       where type constant = Term.constant
                                       where type term = Term.term
                  structure Valuability : VALUABILITY
                                          where type term = Term.term
                  structure Native : NATIVE
                                     where type constant = Term.constant
                                     where type term = Term.term
                                     where type native = Term.native
                  structure Reduction : REDUCTION_INTERNAL
                                        where type constant = Term.constant
                                        where type term = Term.term
                                        where type elim = Term.elim
                  structure Prim : PRIM
                                   where type constant = Term.constant
                  structure PrimReduction : PRIM_REDUCTION_INTERNAL
                                            where type reduction = Reduction.reduction
                                            where type ureduction = Reduction.ureduction)
   :>
   REDEX_INTERNAL
   where type term = Term.term
   where type constant = Term.constant
   where type elim = Term.elim
   where type ureduction = Reduction.ureduction
   =
   struct

      structure R = Reduction
      structure T = Term

      type term = T.term
      type constant = T.constant
      type elim = T.elim

      type ureduction = Reduction.ureduction

      structure D = RedBlackDict (structure Key = Constant.Ordered)
      structure H = CheckpointedHashTable (structure Key = Constant.Hashable)


      (* We use two tables: the redex table and the user table.

         The redex table directly implements redex (as above).
       
         We use the user table for user-supppied redices, to prevent incompatible
         reductions from being registered, and to combine compatible ones.

         If a reduction has been registered for const, then the userTable will map
         const to a reduction sort.

         - If the reduction is one or more standard reductions (i.e., ureductions)
           then the reduction sort will be STANDARD t, where t is a reduction
           tree indicating how to process arguments.

           A reduction tree one of the following:

           + NODE (i, d) indicates that the next active argument is the ith argument
             remaining.  The constant of that ith argument is used as a key in the 
             dictionary to find out what to do next.  If the dictionary returns
             (m, t), it means that the last active argument (i.e., the ith argument)
             must have exactly m arguments, and with continue with t.

           + LEAF red indicates there are no more active arguments, and red is the
             reduction to use.

           + NATIVE (i, n, t) indicates that, of the arguments remaining, i ... i+n-1
             must be native.  After those arguments, continue with t.

         - If the reduction is some other sort of reduction (unary native, binary native,
           or hardcoded), the reduction sort will be OTHER.
      *)

      val redexTable : ((term -> term) -> elim list -> term option) H.table = H.table ()

      datatype reduction_tree =
         LEAF of int * term
       | NODE of int * (int * reduction_tree) D.dict
       | NATIVE of int * int * reduction_tree
         
      datatype reduction_sort =
         STANDARD of reduction_tree
       | OTHER

      val userTable : reduction_sort H.table = H.table ()



      fun redex whnf const spine =
         (case H.find redexTable const of
             NONE => NONE

           | SOME f => f whnf spine)

      fun registered const = H.member redexTable const




      exception Grab

      fun grab i spine s =
         if i = 0 then
            (s, spine)
         else
            (case spine of
                T.App m :: rest =>
                   grab (i-1) rest (T.Dot (m, s))

              | _ => raise Grab)

      fun grabNative whnf i spine s =
         if i = 0 then
            (s, spine)
         else
            (case spine of
                T.App m :: rest =>
                   (case whnf m of
                       m' as T.Native _ => 
                          grabNative whnf (i-1) rest (T.Dot (m', s))

                     | _ => raise Grab)

              | _ => raise Grab)




      (* standardRedexLoop whnf t spine s

         s and t incorporate the spine seen so far
         spine is the remaining spine
         whnf computes hard weak-head-normal forms
      *)
      fun standardRedexLoop whnf t spine s =
         (case t of
             NODE (i, d) =>
                let
                   val (s', spine') = grab i spine s
                in
                   (case spine' of
                       T.App m :: spine'' =>
                          (case whnf m of
                              T.Elim (T.Const const, argspine) =>
                                 (case D.find d const of
                                     SOME (j, t') =>
                                        (case grab j argspine s' of
                                            (s'', []) =>
                                               standardRedexLoop whnf t' spine'' s''

                                          | _ => NONE)

                                   | NONE => NONE)

                            | _ => NONE)

                     | _ => NONE)
                end

           | LEAF (i, p) =>
                let
                   val (s', spine') = grab i spine s
                in
                   SOME (T.Elim (T.Sub (p, s'), spine'))
                end

           | NATIVE (i, n, t') =>
                let
                   val (s', spine') = grab i spine s
                   val (s'', spine'') = grabNative whnf n spine' s'
                in
                   standardRedexLoop whnf t' spine'' s''
                end)


      fun standardRedex t whnf spine =
         try
            standardRedexLoop whnf t spine T.id
         with
            Grab => NONE



      (* makeTree i k zones n p

         arguments i .. i+k-1 must be native  (if k = 0 then no native arguments)
         zones are the remaining active arguments
         n residual arguments at the end
         p is the right-hand-side
      *)
      fun makeTree i k zones n p =
         (case zones of
             nil =>
                if k = 0 then
                   LEAF (n, p)
                else if i + k <= n then
                   NATIVE (i, k, LEAF (n - i - k, p))
                else (* i + k > n *)
                   raise (Fail "native arguments are out of bounds")

           | (l, const, m) :: rest =>
                if k = 0 then
                   NODE (l, D.singleton const (m, makeTree 0 0 rest n p))
                else if i + k <= l then
                   NATIVE (i, k, NODE (l - i - k, D.singleton const (m, makeTree 0 0 rest n p)))
                else if l < i then
                   NODE (l, D.singleton const (m, makeTree (i-l-1) k rest n p))
                else (* i <= l < i + k *)
                   raise (Fail "native arguments overlap with active arguments"))


      fun mergeTree (t1 : reduction_tree) t2 =
         (case (t1, t2) of
             (LEAF _, LEAF _) => raise (Fail "overlapping registered reductions")

           | (NODE (l1, d1), NODE (l2, d2)) =>
                if l1 = l2 then
                   NODE (l1, D.union d1 d2 
                                (fn (_, (p1, t1'), (p2, t2')) => 
                                    if p1 = p2 then
                                       (p1, mergeTree t1' t2')
                                    else
                                       raise (Fail "conflicting arity of active arguments in registered reductions")))
                else
                   raise (Fail "conflicting active arguments in registered reductions")

           | (NATIVE (i1, k1, t1'), NATIVE (i2, k2, t2')) =>
                if i1 = i2 andalso k1 = k2 then
                   NATIVE (i1, k1, mergeTree t1' t2')
                else
                   raise (Fail "conflicting native arguments in registered reductions")

           | _ => raise (Fail "overlapping registered reductions"))
       

      (* precondition: i >= 0, k >= 0 *)
      fun registerMain i k red =
         let
            val (const, zones, n, p) = Reduction.expose red

            val t = makeTree i k zones n p

            val (_, x) =
               H.operate userTable const
                  (fn () => STANDARD t)
                  (fn (STANDARD t') => STANDARD (mergeTree t t')

                    | OTHER =>  raise (Fail "overlapping registered reductions"))
         in
            (case x of
                STANDARD t =>
                   H.insert redexTable const (standardRedex t)

              | OTHER =>
                   raise (Fail "impossible"))
         end
                      
      fun register red = registerMain 0 0 red

      fun registerNative i k red =
         if 0 <= i andalso 0 <= k then
            registerMain i k red
         else
            raise (Fail "native arguments are out of bounds")



      (* Primitive standard reductions *)

      val () = List.app register PrimReduction.redices



      (* Primitive native reductions *)

      (* primitiveNativeUnaryRedex f whnf spine

         if    spine = Native(x) spine'
               f x = SOME z
         then  returns SOME (z @ spine')
         else  returns NONE
      *)
      fun primitiveNativeUnaryRedex f whnf spine =
         (case spine of
             T.App arg :: spine' =>
                (case whnf arg of
                    T.Native x =>
                       (case f x of
                           SOME z =>
                              SOME (T.Elim (z, spine'))

                         | NONE => NONE)

                  | _ => NONE)

           | _ => NONE)
      


      (* primitiveNativeBinaryRedex f whnf spine

         if    spine = Native(x) Native(y) spine'
               f x y = SOME z
         then  returns SOME (z @ spine')
         else  returns NONE
      *)
      fun primitiveNativeBinaryRedex f whnf spine =
         (case spine of
             T.App arg1 :: T.App arg2 :: spine' =>
                (case (whnf arg1, whnf arg2) of
                    (T.Native x, T.Native y) =>
                       (case f x y of
                           SOME z =>
                              SOME (T.Elim (z, spine'))

                         | NONE => NONE)

                  | _ => NONE)

           | _ => NONE)



      val () =
         List.app
            (fn (const, Native.Unary f) =>
                   (
                   (* This happens at startup, so not bothering to check for overlapping. *)
                   H.insert userTable const OTHER;
                   H.insert redexTable const (primitiveNativeUnaryRedex f)
                   )

              | (const, Native.Binary f) =>
                   (
                   (* This happens at startup, so not bothering to check for overlapping. *)
                   H.insert userTable const OTHER;
                   H.insert redexTable const (primitiveNativeBinaryRedex f)
                   ))
            Native.operators



      (* Hardcoded primitive reductions *)

      fun reduceLetnext whnf spine =
         (case spine of
             T.App arg :: T.App body :: spine' =>
                (case whnf arg of
                    T.Next arg' =>
                       SOME (T.Elim (body, T.App arg' :: spine'))

                  | _ => NONE)

           | _ => NONE)

      val () = H.insert userTable Prim.letnext OTHER
      val () = H.insert redexTable Prim.letnext reduceLetnext


      fun reduceLetpair whnf spine =
         (case spine of
             T.App arg :: T.App body :: spine' =>
                (case whnf arg of
                    T.Pair (m1, m2) =>
                       SOME (T.Elim (body, T.App m1 :: T.App m2 :: spine'))

                  | _ => NONE)

           | _ => NONE)

      val () = H.insert userTable Prim.letpair OTHER
      val () = H.insert redexTable Prim.letpair reduceLetpair


      fun reduceLeteager whnf spine =
         (case spine of
             T.App arg :: T.App body :: spine' =>
                SOME (T.Elim (body, T.App (whnf arg) :: spine'))

           | _ => NONE)

      val () = H.insert userTable Prim.lete OTHER
      val () = H.insert redexTable Prim.lete reduceLeteager


      fun reduceFnann whnf spine =
         (case spine of
             _ :: T.App func :: T.App arg :: spine' =>
                (case whnf func of
                    T.Lam (_, body) =>
                       SOME (T.Elim (T.Sub (body, T.Dot (arg, T.id)), spine'))

                  | _ => NONE)

           | _ => NONE)

      val () = H.insert userTable Prim.fnann OTHER
      val () = H.insert redexTable Prim.fnann reduceFnann


      fun reduceSeq whnf spine =
         (case spine of
             T.App m1 :: T.App m2 :: spine' =>
                let
                   val m1' = whnf m1
                in
                   if Valuability.valuability m1' > 0 then
                      SOME (T.Elim (m2, T.App m1' :: spine'))
                   else
                      NONE
                end

           | _ => NONE)

      val () = H.insert userTable Prim.seq OTHER
      val () = H.insert redexTable Prim.seq reduceSeq

      val () = H.insert userTable Prim.seqt OTHER
      val () = H.insert redexTable Prim.seqt reduceSeq

   end
