
signature CONSTANT =
   sig

      type constant
      type term

      (* The order is the order in which the constants were declared. *)
      structure Ordered : ORDERED where type t = constant
      structure Hashable : HASHABLE where type t = constant
      val eq : constant * constant -> bool

      (* Opacity never matters to soundness; it's definitions that matter to soundness.
         Opacity may affect the behavior of the prover a lot, though.

                      OPAQUE
                        |
                       HARD
                     /      \
                FIRM          SOFT_STRICT
                     \      /
                       SOFT

         - SOFT means the constant is automatically unfolded by unification, 
           and is also unfolded by a variety of tactics including typechecking.

         - FIRM is like soft, but the constant is not unfolded in typechecking
           when in the subject position.

         - SOFT_STRICT is like soft, but when unification is presented with
           c M1 ... Mk == c M1' ... Mk' where c is SOFT_STRICT, unification
           will not unfold c, but instead will unify Mi == Mi' for each i.

           Note that Istari does not check that this is correct.  Marking a
           constant as SOFT_STRICT that is not actually strict will not 
           compromise soundness, but it will cause unification to fail sometimes
           when it need not fail.

         - HARD is normal for constants with a definition.  A few tactics unfold
           hard constants.

         - OPAQUE means the constant cannot be unfolded, even explicitly.

           Note that an opaque constant is not necessarily abstract, since a
           constant's opacity can be changed.  To make a constant permanently
           opaque, call abstract to remove its definition.

         Non-opaque constants always have definitions.
      *)
      datatype opacity = SOFT | FIRM | SOFT_STRICT | HARD | OPAQUE

      (* returns the constant's definition if the constant is not OPAQUE *)
      val definition : constant -> term option

      val opacity : constant -> opacity
      val setOpacity : constant -> opacity -> unit

      val valuability : constant -> int
      val reduceValuability : constant -> int -> unit

      (* sets opacity to OPAQUE and deletes the definition (cannot be reversed) *)
      val abstract : constant -> unit

   end


signature VALUABILITY =
   sig

      type term

      (* If valuability M > 0 then M is valuable.
         If valuability M = succ n then M applied to up to n arguments is valuable.
      *)
      val valuability : term -> int

   end


signature CONSTANT_INTERNAL =
   sig

      include CONSTANT


      (* fills in variable and evars to make the term closed and ground *)
      val clean : term -> term


      type problem

      exception DeclareUnclean of problem

      (* Creates a constant with a given definition, and recording a luid and
         a symbol list.

         The symbol list is used by pretty-printing to provide a name for constants
         whose names have left scope, and by I/O to produce a useful error message
         for constants that are referred to but not loaded.  The list is the constant's
         full original path, reversed.

         You probably don't want this.  You probably want Namespace.declare instead.

         If bool is true, cleans the definition to make it closed and ground.
         If bool is false, raises DeclareUnclean if the definition is open or not ground.
      *)
      val declare : bool -> term option -> Symbol.symbol list -> opacity -> constant


      (* Returns the symbol list that was supplied when the constant was declared.
         You probably don't want this.  You probably want Namespace.name instead.
      *)
      val path : constant -> Symbol.symbol list

   end


signature CONSTANT_PRIV =
   sig

      include CONSTANT_INTERNAL


      datatype constant_info =
         CI of {
               def : term option,
               path : Symbol.symbol list,
               opacity : opacity,
               valu : int
               }

      val export : constant -> constant_info
      val import : constant_info -> constant


      (* Not actually privileged, but it's neater to exclude it from the public signature. *)
      structure Valuability : VALUABILITY where type term = term


      (* for the use of Reduction.recomputeValuability *)
      val setValuability : constant -> int -> unit

      (* So we can backpatch the fixpoint constant for valuability computation. *)
      val fix_constant : constant ref

   end


functor ConstantFun (structure Term : TERM 
                                      where type constant = int
                     structure Trail : TRAIL_PRIV
                                       where type term = Term.term
                                       where type ebind = Term.ebind)
   :> CONSTANT_PRIV
      where type constant = int
      where type term = Term.term
      where type problem = Term.problem
   =
   struct

      type constant = int

      structure T = Term

      type term = T.term
      type problem = T.problem

   
      fun eq (i, j) = i = j

      structure Ordered =
         struct
            type t = constant

            val eq = eq
            fun compare (i, j) = Int.compare i j
         end

      structure Hashable =
         struct
            type t = constant
            
            val eq = eq
            val hash = Word.fromInt
         end



      datatype opacity = SOFT | FIRM | SOFT_STRICT | HARD | OPAQUE

      (* invariant: if def = NONE then opacity = OPAQUE *)
      datatype constant_info =
         CI of {
               def : term option,
               path : Symbol.symbol list,
               opacity : opacity,
               valu : int  (* valuability *)
               }

      val bogus =
         CI {
            def = NONE,
            path = [],
            opacity = OPAQUE,
            valu = 0
            }

      val nextConstant = ref 0

      (* NB:  We never rewind the constant table!   Constants are forever. *)

      val theConstants : constant_info ArrayInf.array = ArrayInf.array bogus



      fun definition const =
         let
            val CI {def, opacity=opac } = ArrayInf.sub (theConstants, const)
         in
            (case opac of
                OPAQUE => NONE

              | _ => def)
         end

             
      fun path const =
         let
            val CI { path=p } = ArrayInf.sub (theConstants, const)
         in
            p
         end


      fun opacity const =
         let
            val CI { opacity=opac } = ArrayInf.sub (theConstants, const)
         in
            opac
         end


      fun setOpacity const opac =
         let
            val info = ArrayInf.sub (theConstants, const)
            val CI { def, path, opacity=old, valu } = info
         in
            (case (def, opac) of
                (NONE, OPAQUE) =>
                   (* by invariant, no change necessary *)
                   ()

              | (NONE, _) =>
                   raise (Fail "invalid opacity for constant with no definition")

              | (SOME _, _) =>
                   (
                   ArrayInf.update (theConstants, const,
                                    CI { def=def, path=path, opacity=opac, valu=valu });
                   Checkpoint.log 
                      (fn () =>
                          ArrayInf.update (theConstants, const, info))
                   ))
         end


      fun valuability const =
         let
            val CI { valu } = ArrayInf.sub (theConstants, const)
         in
            valu
         end


      fun setValuability const n =
         let
            val info = ArrayInf.sub (theConstants, const)
            val CI { def, path, opacity, valu } = info
         in
            if n < 0 then
               raise (Fail "new valuability is negative")
            else
               (
               ArrayInf.update (theConstants, const,
                                CI { def=def, path=path, opacity=opacity, valu=n });
               Checkpoint.log
                  (fn () =>
                      ArrayInf.update (theConstants, const, info))
               )
         end
         

      fun reduceValuability const new =
         let
            val old = valuability const
         in
            if new > old then
               raise (Fail "new valuability is not lower")
            else
               setValuability const new
         end


      fun abstract const =
         let
            val info = ArrayInf.sub (theConstants, const)
            val CI { def, path, opacity=old, valu } = info
         in
            ArrayInf.update (theConstants, const, 
                             CI { def=NONE, path=path, opacity=OPAQUE, valu=valu });
            Checkpoint.log
               (fn () =>
                   ArrayInf.update (theConstants, const, info))
         end



      structure IS = RedBlackSet (structure Elem = IntOrdered)

      (* Compute the maximum index appearing in m[s], and bind free evars to Triv. *)
      fun cleanLoop m s =
         (case m of
             T.Var i =>
                (case T.substVar i s of
                    T.Idx j => j + 1

                  | T.Term m' =>
                       cleanLoop m' T.id)

           | T.Const _ => 0

           | T.Elim (h, spine) =>
                List.foldl
                (fns e j =>
                    (case e of
                        T.App n => Int.max (cleanLoop n s) j
                      | _ => j))
                (cleanLoop h s)
                spine

           | T.Lam (_, m1) =>
                let
                   val i = cleanLoop m1 (T.under 1 s)
                in
                   if i = 0 then
                      0
                   else
                      i - 1
                end

           | T.Pair (m1, m2) =>
                Int.max (cleanLoop m1 s) (cleanLoop m2 s)

           | T.Next m1 =>
                cleanLoop m1 s

           | T.Triv => 0

           | T.Sub (m1, s') =>
                cleanLoop m1 (T.compose s' s)

           | T.Evar eb =>
                (case T.readEbind eb of
                    NONE =>
                       (
                       Trail.setEbind eb T.Triv;
                       0
                       )

                  | SOME m' =>
                       cleanLoop m' s)

           | T.Native _ => 0

           | T.Marker _ =>
                raise (Invalid "definition contains marker"))


      (* Turns unbound variables and free evars into Triv. *)
      fun clean m =
         let
            val i = cleanLoop m T.id

            fun mksub j =
               if j = 0 then
                  T.id
               else
                  T.Dot (T.Triv, mksub (j-1))
         in
            if i = 0 then
               m
            else
               T.Sub (m, mksub i)
         end



      (* This will get filled in with fix. *)
      val fix_constant = ref ~1

      structure Valuability =
         struct

            type term = term


            (* n >= 0 *)
            fun subtract n spine =
               if n = 0 then
                  0
               else
                  (case spine of
                      [] => n

                    | T.App _ :: rest => subtract (n-1) rest

                    | _ => 0)
               

            fun valuabilityMain m s spine =
               (case m of
                   T.Var i =>
                      (case T.substVar i s of
                          T.Idx _ => 0

                        | T.Term m' => valuabilityMain m' T.id spine)

                 | T.Const const =>
                      if const = !fix_constant then
                         (* Special case for fixpoints. Otherwise we would have to eta-expand all over the place. *)
                         (case spine of
                             [] => 1

                           | T.App m' :: rest =>
                                subtract (Int.max (valuabilityMain m' T.id [] - 1) 0) rest

                           | _ => 0)
                      else
                         (* calling Const's version of valuability *)
                         subtract (valuability const) spine

                 | T.Evar eb =>
                      (case T.readEbind eb of
                          NONE => 0

                        | SOME m' => valuabilityMain m' s spine)

                 | T.Elim (m', spine') =>
                      valuabilityMain m' s (T.ssubst spine' s @ spine)

                 | T.Lam (_, m') =>
                      (case spine of
                          [] => 1 + valuabilityMain m' (T.under 1 s) []

                        | _ => 0)

                 | T.Pair _ =>
                      (case spine of [] => 1 | _ => 0)

                 | T.Next _ =>
                      (case spine of [] => 1 | _ => 0)

                 | T.Triv =>
                      (case spine of [] => 1 | _ => 0)

                 | T.Native _ =>
                      (case spine of [] => 1 | _ => 0)

                 | T.Sub (m', s') =>
                      valuabilityMain m' (T.compose s' s) spine

                 | T.Marker _ => 0)


            (* Valuability's version of valuability *)
            fun valuability m = valuabilityMain m T.id []

         end



      exception DeclareUnclean of problem

      fun declare force def path opac =
         let
            val const = !nextConstant

            val def' =
               (case def of
                   NONE => NONE

                 | SOME m =>
                      if force then
                         SOME (clean m)
                      else
                         (case T.isClean m of
                             NONE => def

                           | SOME prob => raise (DeclareUnclean prob)))

            val valu =
               (case def' of
                   NONE => 0

                 | SOME m => Valuability.valuability m)
         in
            (case (def', opac) of
                (NONE, OPAQUE) => ()

              | (NONE, _) =>
                   raise (Invalid "non-opaque constant without definition")

              | (SOME _, _) => Trail.commit ());

            nextConstant := const + 1;
            ArrayInf.update (theConstants, const, 
                             CI { def=def', path=path, opacity=opac, valu=valu });
            const
         end



      fun export const = ArrayInf.sub (theConstants, const)

      fun import info =
         let
            val const = !nextConstant
         in
            nextConstant := const + 1;
            ArrayInf.update (theConstants, const, info);
            const
         end

   end
