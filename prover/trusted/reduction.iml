
signature REDUCTION =
   sig

      type constant
      type term
      type elim

      type reduction
      type ureduction  (* user-defined reduction *)

      val refl : reduction
      val trans : reduction list -> reduction

      (* if    const unfolds to M
         then  reduces const @ spine --> M @ spine
               (spine may be empty)
      *)
      val unfold : reduction

      (* beta n

         contracts n beta redices
      *)
      val beta : int -> reduction

      (* reduces all top-level beta redices *)
      val betas : reduction

      (* reduces native operations *)
      val native : reduction

      (* does nothing on native terms, fails otherwise *)
      val reflNative : reduction

      (* reduces seq V M --> M V *)
      val seq : reduction

      val user : ureduction -> reduction

      (* within path red  follows path to a subterm, where red is applied

         Paths are interpreted as by Simplify.applySubterm.
      *)
      val within : int list -> reduction -> reduction

      (* applies reductions to the first n arguments *)
      val compat : reduction list -> reduction


      exception Reduce

      val reduce : reduction -> term -> term


      (* new const [(lk, constk, mk) ... (l1, const1, m1)] n P red1 red2

         if    M = const ... ni+mi+li-1 .. ni+mi (consti ni+mi-1 .. ni) ... n-1 0
                             +--------     for i = k .. 1     --------+
               where n1 = n  and  ni+1 = ni + mi + li
               M reduces to Q by red1
               P reduces to Q by red
         then  returns a reduction that reduces
               const ... M_ni+mi+li-1 ... M_ni+mi (consti M_ni+mi-1 .. M_ni) ... M_n-1 M_0 
                         +--------         for i = k .. 1          --------+
               to
               P [M_0 ... M_ni+mi+li-1 . id]
         else  raises Reduce
      *)
      val new : constant -> (int * constant * int) list -> int -> term -> reduction -> reduction -> ureduction

   end



signature REDUCTION_INTERNAL =
   sig

      include REDUCTION 


      val trigger : ureduction -> constant

      val expose : ureduction -> constant * (int * constant * int) list * int * term


      val puUreduction : ureduction Pickle.pu
      val puReduction : reduction Pickle.pu


      structure Detail :
         sig
            datatype reduction =
               Trans of reduction list
             | Unfold
             | Beta of int option
             | Within of int list * reduction
             | Compat of reduction list
             | Nativered
             | ReflNative
             | Seq
             | User of constant * (int * constant * int) list * int * term
         end

      val detail : reduction -> Detail.reduction


      (* recomputeValuability const red

         if    red : const --> M
         then  sets const's valuability to M's valuability
      *)
      val recomputeValuability : constant -> reduction -> unit

   end



(* Prim uses backdoor to declare reductions for primitive constants. *)
signature REDUCTION_PRIV =
   sig

      include REDUCTION_INTERNAL

      val backdoor : constant * (int * constant * int) list * int * term -> ureduction

   end


functor ReductionFun (structure Term : TERM
                      structure Constant : CONSTANT_PRIV
                                           where type constant = Term.constant
                                           where type term = Term.term
                      structure Valuability : VALUABILITY
                                              where type term = Term.term
                      structure Simplify : SIMPLIFY
                                           where type term = Term.term
                                           where type sub = Term.sub
                                           where type elim = Term.elim
                      structure Native : NATIVE
                                         where type constant = Term.constant
                                         where type term = Term.term
                                         where type native = Term.native
                      structure Trail : TRAIL
                      structure Pickling : PICKLING
                                           where type constant = Term.constant
                                           where type term = Term.term
                      structure Prim : PRIM
                                       where type constant = Term.constant
                      structure Unsafe : UNSAFE)
   :> 
   REDUCTION_PRIV
   where type constant = Term.constant
   where type term = Term.term
   where type elim = Term.elim
   =
   struct

      open Term

      structure Table = HashTable (structure Key = Constant.Hashable)

      type ureduction = constant * (int * constant * int) list * int * term

      (* it would be nice to have datatype copying *)
      structure Detail =
         struct

            datatype reduction =
               Trans of reduction list
             | Unfold
             | Beta of int option  (* nonnegative *)
             | Within of int list * reduction
             | Compat of reduction list
             | Nativered
             | ReflNative
             | Seq
             | User of ureduction

         end

      open Detail

      exception Reduce

      val refl = Trans []
      fun trans l = Trans l
      val unfold = Unfold
      fun beta i = if i < 0 then raise Reduce else Beta (SOME i)
      val betas = Beta NONE
      fun within p r = Within (p, r)
      fun compat l = Compat l
      val native = Nativered
      val reflNative = ReflNative
      val seq = Seq
      val user = User




      (* grab n spine s

         if    spine = M1 ... Mn spine'
         then  return (Mn ... M1 . s, spine')
      *)
      fun grab n spine s =
         if n = 0 then
            (s, spine)
         else
            (case spine of
                [] => raise Reduce

              | App m :: rest =>
                   grab (n-1) rest (Dot (m, s))

              | _ => raise Reduce)





      fun dec iopt = Option.map (fn i => i - 1) iopt



      (* Put Native.operators into a form that can be searched efficiently. *)

      val theOperators : Native.operator Table.table = Table.table 17

      val () =
         List.app
            (fn (const, oper) => Table.insert theOperators const oper)
            Native.operators



      fun reduceMain red m s spine =
         let
            val (h, spine') = Simplify.simp m s spine
         in
            reduceHead red h spine'
         end


      (* h @ spine is in simple form *)
      and reduceHead red h spine =
         (case red of
             Trans [] =>
                Elim (h, spine)

           | Trans (red1 :: rest) =>
                reduceMain (Trans rest) (reduceHead red1 h spine) id []

           | Unfold =>
                (case h of
                    Const const =>
                       (case Constant.definition const of
                           SOME m => Elim (m, spine)

                         | NONE => raise Reduce)

                  | _ => raise Reduce)

           | Beta (SOME 0) =>
                Elim (h, spine)

           | Beta iopt =>
                (case (h, spine) of
                    (Lam (_, m1), App m2 :: rest) =>
                       reduceMain (Beta (dec iopt)) m1 (Dot (m2, id)) rest

                  | (Pair (m1, m2), Pi1 :: rest) =>
                       reduceMain (Beta (dec iopt)) m1 id rest

                  | (Pair (m1, m2), Pi2 :: rest) =>
                       reduceMain (Beta (dec iopt)) m2 id rest

                  | (Next m1, Prev :: rest) =>
                       reduceMain (Beta (dec iopt)) m1 id rest

                  | _ =>
                       (case iopt of
                           NONE =>
                              Elim (h, spine)

                         | SOME _ =>
                              raise Reduce))

           | Seq =>
                (case (h, spine) of
                    (Const const, App m1 :: App m2 :: rest) =>
                       if Constant.eq (const, Prim.seq) then
                          if Valuability.valuability m1 > 0 then
                             Elim (m2, App m1 :: rest)
                          else
                             raise Reduce
                       else
                          raise Reduce

                  | _ =>
                       raise Reduce)

           | Within (path, red) =>
                (try
                    Simplify.applySubterm
                       (fn m => reduceMain red m id [])
                       path
                       (Elim (h, spine))
                 with
                    Simplify.ApplySubterm => raise Reduce)

           | Compat reds =>
                Elim (h, reduceSpine reds spine [])

           | User (const1, zones, n, p) =>
                (case h of
                    Const const1' =>
                       if Constant.eq (const1, const1') then
                          let
                             val (s, spine') =
                                List.foldl
                                   (fns (l, const2, m) (s, spine) =>
                                       let
                                          val (s', spine') = grab l spine s
                                       in
                                          (case spine' of
                                              App arg ::  rest =>
                                                 (case Simplify.simplify arg of
                                                     Elim (Const const2', argspine) =>
                                                        if Constant.eq (const2, const2') then
                                                           (case grab m argspine s' of
                                                               (s'', []) =>
                                                                  (s'', rest)

                                                             | _ => raise Reduce)
                                                        else
                                                           raise Reduce

                                                   | _ => raise Reduce)

                                            | _ => raise Reduce)
                                       end)
                                   (id, spine)
                                   zones

                             val (s', residual) = grab n spine' s
                          in
                             Elim (Sub (p, s'), residual)
                          end
                       else
                          raise Reduce

                  | _ => raise Reduce)

           | Nativered =>
                (case h of
                    Const const =>
                       (case Table.find theOperators const of
                           NONE => raise Reduce

                         | SOME (Native.Unary f) =>
                              (case spine of
                                  App arg :: spine' =>
                                     (case Simplify.simp arg id [] of
                                         (Native x, []) =>
                                            (case f x of
                                                SOME y =>
                                                   Elim (y, spine')

                                              | NONE =>
                                                   raise Reduce)
    
                                       | _ => raise Reduce)
    
                                | _ => raise Reduce)

                         | SOME (Native.Binary f) =>
                              (case spine of
                                  App arg1 :: App arg2 :: spine' =>
                                     (case (Simplify.simp arg1 id [], Simplify.simp arg2 id []) of
                                         ((Native x, []), (Native y, [])) =>
                                            (case f x y of
                                                SOME z =>
                                                   Elim (z, spine')

                                              | NONE =>
                                                   raise Reduce)
    
                                       | _ => raise Reduce)
    
                                | _ => raise Reduce))

                  | _ => raise Reduce)

           | ReflNative =>
                (case (h, spine) of
                    (Native _, []) => Elim (h, spine)

                  | _ => raise Reduce))


      (* i >= 0 *)
      and reduceElim red i spine acc =
         (case spine of
             [] => raise Reduce

           | (elim as App m) :: rest =>
                if i = 0 then
                   List.revAppend
                      acc
                      (App (reduceMain red m id []) :: rest)
                else
                   reduceElim red (i-1) rest (elim :: acc)

           | elim :: rest =>
                if i = 0 then
                   raise Reduce
                else
                   reduceElim red (i-1) rest (elim :: acc))


      and reduceSpine reds spine acc =
         (case reds of
             [] =>
                List.revAppend acc spine

           | red :: reds' =>
                (case spine of
                    [] => raise Reduce

                  | App m :: spine' =>
                       reduceSpine reds' spine' (App (reduceMain red m id []) :: acc)

                  | elim :: spine' =>
                       reduceSpine reds spine' (elim :: acc)))


      fun reduce red m = reduceMain red m id []


      (* natrec f x i = f (i-1) (f (i-2) (... (f 0 x) ...)) *)
      fun natrec f x i =
         if i = 0 then
            x
         else
            f (i-1) (natrec f x (i-1))


      fun new const1 zones n q red1 red2 =
         if
            n >= 0 andalso List.all (fn (l, _, m) => l >= 0 andalso n >= 0) zones
            andalso
            let
               val (_, spine) =
                  List.foldr
                     (fns (l, const2, m) (i, spine) =>
                         let
                            val innerspine =
                               Int.natrecUp (fns j sp => App (Var (i+j)) :: sp) [] m

                            val spine' = App (Elim (Const const2, innerspine)) :: spine
                            
                            val spine'' =
                               Int.natrecUp (fns j sp => App (Var (i+m+j)) :: sp) spine' l
                         in
                            (i + l + m, spine'')
                         end)
                     (n, Int.natrecUp (fns j sp => App (Var j) :: sp) [] n)
                     zones

                val q' = Elim (Const const1, spine)
            in
               Simplify.same (reduce red1 q') (reduce red2 q)
            end
         then
            (
            Trail.commit ();
            (const1, zones, n, q)
            )
         else
            raise Reduce



      fun trigger (const, _, _, _) = const

      fun backdoor ured = ured
      fun expose ured = ured

      structure P = Pickle
      structure PP = Pickling


      val impossible = Fail "impossible"

      val puUred =
         P.tuple4 PP.puConstant (P.list (P.tuple3 P.int PP.puConstant P.int)) P.int PP.puTerm

      val puRed =
         P.fix
            (fn puRed =>
                P.alt
                   (fn Trans _ => 0
                     | Unfold => 1
                     | Beta _ => 2
                     | Within _ => 3
                     | Compat _ => 4
                     | Nativered => 5
                     | User _ => 6
                     | ReflNative => 7
                     | Seq => 8)
                   [
                   P.wrap
                      (fn Trans l => l
                        | _ => raise impossible)
                      Trans
                      (P.list puRed),

                   P.const Unfold,

                   P.wrap
                      (fn Beta i => i
                        | _ => raise impossible)
                      Beta
                      (P.option P.int),

                   P.wrap
                      (fn Within (l, r) => (l, r)
                        | _ => raise impossible)
                      Within
                      (P.pair (P.list P.int) puRed),

                   P.wrap
                      (fn Compat l => l
                        | _ => raise impossible)
                      Compat
                      (P.list puRed),

                   P.const Nativered,

                   P.wrap
                      (fn User r => r
                        | _ => raise impossible)
                      User
                      puUred,

                   P.const ReflNative,

                   P.const Seq
                   ])

      val puUreduction =
         P.wrap
            (fn r => r)
            (fn r =>
                if Unsafe.getParanoid () then
                   raise PP.Paranoid
                else
                   r)
            puUred

      val puReduction =
         P.wrap
            (fn r => r)
            (fn r =>
                if Unsafe.getParanoid () then
                   raise PP.Paranoid
                else
                   r)
            puRed

      fun detail red = red


      fun recomputeValuability const red =
         Constant.setValuability const
            (Constant.Valuability.valuability (reduce red (Elim (Const const, []))))

   end
