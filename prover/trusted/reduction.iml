
signature REDUCTION =
   sig

      type constant
      type term
      type elim

      type reduction
      type reduction1  (* user reduction involving one constant *)
      type reduction2  (* user reduction involving two interacting constants *)

      val refl : reduction
      val trans : reduction list -> reduction

      (* if    const unfolds to M
         then  reduces const @ spine --> M @ spine
               (spine may be empty)
      *)
      val unfold : reduction

      (* beta n

         contracts n beta redices
      *)
      val beta : int -> reduction

      (* reduces all top-level beta redices *)
      val betas : reduction

      (* reduces native operations *)
      val native : reduction

      (* does nothing on native terms, fails otherwise *)
      val reflNative : reduction

      (* reduces seq V M --> M V *)
      val seq : reduction

      val user1 : reduction1 -> reduction
      val user2 : reduction2 -> reduction

      (* within path red  follows path to a subterm, where red is applied

         Paths are interpreted as by Simplify.applySubterm.
      *)
      val within : int list -> reduction -> reduction

      (* applies reductions to the first n arguments *)
      val compat : reduction list -> reduction


      exception Reduce

      val reduce : reduction -> term -> term


      (* new1 const n P red1 red2
         (n is the arity of const)

         if    0 <= n
         and   const n-1 ... 0  reduces to Q by red1
               P reduces to Q by red2
         then  returns a reduction1 that reduces
               const Mn-1 ... M0
               to
               P [M0 ... Mn-1 . id]
         else  raises Reduce
      *)
      val new1 : constant -> int -> term -> reduction -> reduction -> reduction1


      (* new2 const l m const' n Q red1 red2
         (arity of const is l + m + 1, arity of const' is n)

         if    0 <= l, m, n  
         and   const m+n+l-1 .. m+n+0 (const' m+n-1 ... m+0) m-1 ... 0  reduces to R by red1
               Q reduces to R by red2
         then  returns a reduction2 that reduces
               const Pl-1 ... P0 (const' Nn-1 ... N0) Mm-1 ... M0
               to
               Q [M0 ... Mm-1 . N0 ... Nn-1 . P0 ... Pl-1 . id]
         else  raises Reduce
      *)
      val new2 : constant -> int -> int -> constant -> int -> term -> reduction -> reduction -> reduction2

   end



signature REDUCTION_INTERNAL =
   sig

      include REDUCTION 


      (* trigger red

         if    red = new1 const n p red1 red2
         then  returns const
      *)
      val trigger : reduction1 -> constant

      (* triggers red

         if    red = new2 k l m k' n Q red1 red2
         then  returns (k, l, k')
      *)
      val triggers : reduction2 -> constant * int * constant

      (* ureduce1 red spine
         where trigger(red) = k
         applies red to k @ spine
      *)
      val ureduce1 : reduction1 -> elim list -> term

      (* ureduce2 red spine1 spine2 spine3
         where triggers(red) = (k1, l, k2)
         applies red to k1 @ spine1 (k2 @ spine2) spine3
      *)
      val ureduce2 : reduction2 -> elim list -> elim list -> elim list -> term


      val puReduction1 : reduction1 Pickle.pu
      val puReduction2 : reduction2 Pickle.pu
      val puReduction : reduction Pickle.pu


      structure Detail :
         sig
            datatype reduction =
               Trans of reduction list
             | Unfold
             | Beta of int option
             | Within of int list * reduction
             | Compat of reduction list
             | Nativered
             | ReflNative
             | Seq
             | User1 of constant * int * term
             | User2 of constant * int * int * constant * int * term
         end

      val detail : reduction -> Detail.reduction


      (* recomputeValuability const red

         if    red : const --> M
         then  sets const's valuability to M's valuability
      *)
      val recomputeValuability : constant -> reduction -> unit

   end



(* Prim uses backdoor to declare reductions for primitive constants. *)
signature REDUCTION_PRIV =
   sig

      include REDUCTION_INTERNAL

      val backdoor1 : constant * int * term -> reduction1
      val backdoor2 : constant * int * int * constant * int * term -> reduction2

   end


functor ReductionFun (structure Term : TERM
                      structure Constant : CONSTANT_PRIV
                                           where type constant = Term.constant
                                           where type term = Term.term
                      structure Valuability : VALUABILITY
                                              where type term = Term.term
                      structure Simplify : SIMPLIFY
                                           where type term = Term.term
                                           where type sub = Term.sub
                                           where type elim = Term.elim
                      structure Native : NATIVE
                                         where type constant = Term.constant
                                         where type term = Term.term
                                         where type native = Term.native
                      structure Trail : TRAIL
                      structure Pickling : PICKLING
                                           where type constant = Term.constant
                                           where type term = Term.term
                      structure Prim : PRIM
                                       where type constant = Term.constant
                      structure Unsafe : UNSAFE)
   :> 
   REDUCTION_PRIV
   where type constant = Term.constant
   where type term = Term.term
   where type elim = Term.elim
   =
   struct

      open Term

      structure Table = HashTable (structure Key = Constant.Hashable)

      type reduction1 = constant * int * term
      type reduction2 = constant * int * int * constant * int * term

      (* it would be nice to have datatype copying *)
      structure Detail =
         struct

            datatype reduction =
               Trans of reduction list
             | Unfold
             | Beta of int option  (* nonnegative *)
             | Within of int list * reduction
             | Compat of reduction list
             | Nativered
             | ReflNative
             | Seq
             | User1 of reduction1
             | User2 of reduction2

         end

      open Detail

      exception Reduce

      val refl = Trans []
      fun trans l = Trans l
      val unfold = Unfold
      fun beta i = if i < 0 then raise Reduce else Beta (SOME i)
      val betas = Beta NONE
      fun within p r = Within (p, r)
      fun compat l = Compat l
      val native = Nativered
      val reflNative = ReflNative
      val seq = Seq
      val user1 = User1
      val user2 = User2




      (* takeSpine n s spine

         if    spine = M1 ... Mn spine'
         then  return (Mn ... M1 . s, spine')
      *)
      fun takeSpine n s spine =
         if n = 0 then
            (s, spine)
         else
            (case spine of
                [] => raise Reduce

              | App m :: rest =>
                   takeSpine (n-1) (Dot (m, s)) rest

              | _ => raise Reduce)


      fun ureduce1 (const, i, p) spine =
         let
            val (s, spine') = takeSpine i id spine
         in
            Elim (Sub (p, s), spine')
         end

      fun ureduce2 (const1, l, m, const2, n, q) spine1 spine2 spine3 =
         (case takeSpine l id spine1 of
             (s1, []) =>
                (case takeSpine n s1 spine2 of
                    (s2, []) =>
                       let
                          val (s3, spine3') = takeSpine m s2 spine3
                       in
                          Elim (Sub (q, s3), spine3')
                       end

                  | _ => raise Reduce)

           | _ => raise Reduce)



      fun dec iopt = Option.map (fn i => i - 1) iopt



      (* Put Native.operators into a form that can be searched efficiently. *)

      val theOperators : Native.operator Table.table = Table.table 17

      val () =
         List.app
            (fn (const, oper) => Table.insert theOperators const oper)
            Native.operators



      fun reduceMain red m s spine =
         let
            val (h, spine') = Simplify.simp m s spine
         in
            reduceHead red h spine'
         end


      (* h @ spine is in simple form *)
      and reduceHead red h spine =
         (case red of
             Trans [] =>
                Elim (h, spine)

           | Trans (red1 :: rest) =>
                reduceMain (Trans rest) (reduceHead red1 h spine) id []

           | Unfold =>
                (case h of
                    Const const =>
                       (case Constant.definition const of
                           SOME m => Elim (m, spine)

                         | NONE => raise Reduce)

                  | _ => raise Reduce)

           | Beta (SOME 0) =>
                Elim (h, spine)

           | Beta iopt =>
                (case (h, spine) of
                    (Lam (_, m1), App m2 :: rest) =>
                       reduceMain (Beta (dec iopt)) m1 (Dot (m2, id)) rest

                  | (Pair (m1, m2), Pi1 :: rest) =>
                       reduceMain (Beta (dec iopt)) m1 id rest

                  | (Pair (m1, m2), Pi2 :: rest) =>
                       reduceMain (Beta (dec iopt)) m2 id rest

                  | (Next m1, Prev :: rest) =>
                       reduceMain (Beta (dec iopt)) m1 id rest

                  | _ =>
                       (case iopt of
                           NONE =>
                              Elim (h, spine)

                         | SOME _ =>
                              raise Reduce))

           | Seq =>
                (case (h, spine) of
                    (Const const, App m1 :: App m2 :: rest) =>
                       if Constant.eq (const, Prim.seq) then
                          if Valuability.valuability m1 > 0 then
                             Elim (m2, App m1 :: rest)
                          else
                             raise Reduce
                       else
                          raise Reduce

                  | _ =>
                       raise Reduce)

           | Within (path, red) =>
                (try
                    Simplify.applySubterm
                       (fn m => reduceMain red m id [])
                       path
                       (Elim (h, spine))
                 with
                    Simplify.ApplySubterm => raise Reduce)

           | Compat reds =>
                Elim (h, reduceSpine reds spine [])

           | User1 (ured as (const, _, _)) =>
                (case h of
                    Const const' =>
                       if Constant.eq (const, const') then
                          ureduce1 ured spine
                       else
                          raise Reduce

                  | _ => raise Reduce)

           | User2 (ured as (const1, l, _, const2, _, _)) =>
                (case h of
                    Const const1' =>
                       if Constant.eq (const1, const1') then
                          (case List.splitOpt spine l of
                              SOME (spine1, App arg :: spine3) =>
                                 let
                                    val (h', spine2) = Simplify.simp arg id []
                                 in
                                    (case h' of
                                        Const const2' =>
                                           if Constant.eq (const2, const2') then
                                              ureduce2 ured spine1 spine2 spine3
                                           else
                                              raise Reduce

                                      | _ => raise Reduce)
                                 end

                            | _ => raise Reduce)
                       else
                          raise Reduce

                  | _ => raise Reduce)

           | Nativered =>
                (case h of
                    Const const =>
                       (case Table.find theOperators const of
                           NONE => raise Reduce

                         | SOME (Native.Unary f) =>
                              (case spine of
                                  App arg :: spine' =>
                                     (case Simplify.simp arg id [] of
                                         (Native x, []) =>
                                            (case f x of
                                                SOME y =>
                                                   Elim (y, spine')

                                              | NONE =>
                                                   raise Reduce)
    
                                       | _ => raise Reduce)
    
                                | _ => raise Reduce)

                         | SOME (Native.Binary f) =>
                              (case spine of
                                  App arg1 :: App arg2 :: spine' =>
                                     (case (Simplify.simp arg1 id [], Simplify.simp arg2 id []) of
                                         ((Native x, []), (Native y, [])) =>
                                            (case f x y of
                                                SOME z =>
                                                   Elim (z, spine')

                                              | NONE =>
                                                   raise Reduce)
    
                                       | _ => raise Reduce)
    
                                | _ => raise Reduce))

                  | _ => raise Reduce)

           | ReflNative =>
                (case (h, spine) of
                    (Native _, []) => Elim (h, spine)

                  | _ => raise Reduce))


      (* i >= 0 *)
      and reduceElim red i spine acc =
         (case spine of
             [] => raise Reduce

           | (elim as App m) :: rest =>
                if i = 0 then
                   List.revAppend
                      acc
                      (App (reduceMain red m id []) :: rest)
                else
                   reduceElim red (i-1) rest (elim :: acc)

           | elim :: rest =>
                if i = 0 then
                   raise Reduce
                else
                   reduceElim red (i-1) rest (elim :: acc))


      and reduceSpine reds spine acc =
         (case reds of
             [] =>
                List.revAppend acc spine

           | red :: reds' =>
                (case spine of
                    [] => raise Reduce

                  | App m :: spine' =>
                       reduceSpine reds' spine' (App (reduceMain red m id []) :: acc)

                  | elim :: spine' =>
                       reduceSpine reds spine' (elim :: acc)))


      fun reduce red m = reduceMain red m id []


      (* natrec f x i = f (i-1) (f (i-2) (... (f 0 x) ...)) *)
      fun natrec f x i =
         if i = 0 then
            x
         else
            f (i-1) (natrec f x (i-1))


      fun new1 const n p red1 red2 =
         if
            n >= 0 andalso
            let
               val p' =
                  Elim (Const const,
                        natrec (fns i sp => App (Var i) :: sp) [] n)
            in
               Simplify.same (reduce red1 p') (reduce red2 p)
            end
         then
            (
            Trail.commit ();
            (const, n, p)
            )
         else
            raise Reduce


      fun new2 const l m const' n q red1 red2 =
         if
            l >= 0 andalso m >= 0 andalso n >= 0
            andalso
            let
               val q' =
                  Elim (Const const,
                        natrec 
                           (fns i sp => App (Var (m+n+i)) :: sp)
                           (App (Elim (Const const',
                                       natrec (fns i sp => App (Var (m+i)) :: sp) [] n))
                            :: natrec (fns i sp => App (Var i) :: sp) [] m)
                           l)
            in
               Simplify.same (reduce red1 q') (reduce red2 q)
            end
         then
            (
            Trail.commit ();
            (const, l, m, const', n, q)
            )
         else
            raise Reduce
            
                           
      fun trigger (const, _, _) = const
      fun triggers (const, l, _, const', _, _) = (const, l, const')

      fun backdoor1 ured = ured
      fun backdoor2 ured = ured

      structure P = Pickle
      structure PP = Pickling


      val impossible = Fail "impossible"

      val pu1 =
         P.tuple3 PP.puConstant P.int PP.puTerm

      val pu2 =
         P.tuple6 PP.puConstant P.int P.int PP.puConstant P.int PP.puTerm

      val puRed =
         P.fix
            (fn puRed =>
                P.alt
                   (fn Trans _ => 0
                     | Unfold => 1
                     | Beta _ => 2
                     | Within _ => 3
                     | Compat _ => 4
                     | Nativered => 5
                     | User1 _ => 6
                     | User2 _ => 7
                     | ReflNative => 8
                     | Seq => 9)
                   [
                   P.wrap
                      (fn Trans l => l
                        | _ => raise impossible)
                      Trans
                      (P.list puRed),

                   P.const Unfold,

                   P.wrap
                      (fn Beta i => i
                        | _ => raise impossible)
                      Beta
                      (P.option P.int),

                   P.wrap
                      (fn Within (l, r) => (l, r)
                        | _ => raise impossible)
                      Within
                      (P.pair (P.list P.int) puRed),

                   P.wrap
                      (fn Compat l => l
                        | _ => raise impossible)
                      Compat
                      (P.list puRed),

                   P.const Nativered,

                   P.wrap
                      (fn User1 r => r
                        | _ => raise impossible)
                      User1
                      pu1,

                   P.wrap
                      (fn User2 r => r
                        | _ => raise impossible)
                      User2
                      pu2,

                   P.const ReflNative,

                   P.const Seq
                   ])

      val puReduction1 =
         P.wrap
            (fn r => r)
            (fn r =>
                if Unsafe.getParanoid () then
                   raise PP.Paranoid
                else
                   r)
            pu1

      val puReduction2 =
         P.wrap
            (fn r => r)
            (fn r =>
                if Unsafe.getParanoid () then
                   raise PP.Paranoid
                else
                   r)
            pu2
            
      val puReduction =
         P.wrap
            (fn r => r)
            (fn r =>
                if Unsafe.getParanoid () then
                   raise PP.Paranoid
                else
                   r)
            puRed

      fun detail red = red


      fun recomputeValuability const red =
         Constant.setValuability const
            (Constant.Valuability.valuability (reduce red (Elim (Const const, []))))

   end
