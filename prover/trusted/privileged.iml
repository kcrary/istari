
signature PRIVILEGED =
   sig

      structure Term :
         TERM

      structure Trail :
         TRAIL 
         where type term = Term.term
         where type ebind = Term.ebind

      structure Constant :
         CONSTANT_INTERNAL 
         where type constant = Term.constant
         where type term = Term.term
         where type problem = Term.problem

      structure Pickling : 
         PICKLING
         where type constant = Term.constant
         where type term = Term.term

      structure Unsafe :
         UNSAFE
         where type term = Term.term
         where type ebind = Term.ebind

      structure Simplify :
         SIMPLIFY
         where type term = Term.term
         where type sub = Term.sub
         where type elim = Term.elim

      structure Prim : 
         PRIM_INTERNAL
         where type constant = Term.constant

      structure Native :
         NATIVE
         where type constant = Term.constant
         where type term = Term.term
         where type native = Term.native

      structure Reduction : 
         REDUCTION_INTERNAL
         where type constant = Term.constant
         where type term = Term.term
         where type elim = Term.elim

      structure PrimReduction :
         PRIM_REDUCTION_INTERNAL
         where type reduction = Reduction.reduction
         where type ureduction1 = Reduction.ureduction1
         where type ureduction2 = Reduction.ureduction2

      structure Redex :
         REDEX_INTERNAL
         where type term = Term.term
         where type constant = Term.constant
         where type elim = Term.elim
         where type reduction = Reduction.reduction
         where type ureduction2 = Reduction.ureduction2

      structure Normalize : 
         NORMALIZE
         where type term = Term.term
         where type constant = Term.constant

      structure Prune :
         PRUNE
         where type term = Term.term
         where type sub = Term.sub
         where type ebind = Term.ebind

      structure Unify : 
         UNIFY
         where type term = Term.term

   end


(* Some trusted modules have privileged interfaces that are used by various other
   trusted modules.  Also, there are some cyclic dependencies, which we untangle by
   observing (privately) that constant = int.
*)

structure Privileged :> PRIVILEGED =
   struct

      structure Term =
         TermFun 
         (type constant = int)

      structure Trail =
         TrailFun 
         (structure Term = Term)

      structure Constant =
         ConstantFun 
         (structure Term = Term
          structure Trail = Trail)

      structure Pickling =
         PicklingFun 
         (structure Term = Term
          structure Trail = Trail
          structure Constant = Constant)

      structure Unsafe =
         UnsafeFun 
         (structure Term = Term
          structure Trail = Trail)

      structure Simplify =
         SimplifyFun (structure Term = Term
                      structure Constant = Constant)

      structure Prim =
         PrimFun 
         (structure Term = Term
          structure Constant = Constant
          structure Pickling = Pickling)

      structure Native =
         NativeFun
         (structure Term = Term
          structure Prim = Prim)

      structure Reduction =
         ReductionFun
         (structure Term = Term
          structure Constant = Constant
          structure Simplify = Simplify
          structure Native = Native
          structure Trail = Trail
          structure Pickling = Pickling
          structure Unsafe = Unsafe)

      structure PrimReduction =
         PrimReductionFun
         (structure Term = Term
          structure Constant = Constant
          structure Prim = Prim
          structure Reduction = Reduction)

      structure Redex =
         RedexFun
         (structure Term = Term
          structure Constant = Constant
          structure Native = Native
          structure Reduction = Reduction
          structure Prim = Prim
          structure PrimReduction = PrimReduction)
          
      structure Normalize =
         NormalizeFun
         (structure Term = Term
          structure Constant = Constant
          structure Simplify = Simplify
          structure Redex = Redex)

      structure Prune =
         PruneFun
         (structure Term = Term
          structure Prim = Prim
          structure Trail = Trail
          structure Normalize = Normalize)

      structure Unify =
         UnifyFun 
         (structure Term = Term
          structure Constant = Constant
          structure Trail = Trail
          structure Normalize = Normalize
          structure Prune = Prune)

   end


structure Term = Privileged.Term
structure Trail = Privileged.Trail
structure ConstantInternal = Privileged.Constant
structure Pickling = Privileged.Pickling
structure Unsafe = Privileged.Unsafe
structure Simplify = Privileged.Simplify
structure PrimInternal = Privileged.Prim
structure Native = Privileged.Native
structure ReductionInternal = Privileged.Reduction
structure PrimReductionInternal = Privileged.PrimReduction
structure RedexInternal = Privileged.Redex
structure Normalize = Privileged.Normalize
structure Prune = Privileged.Prune
structure Unify = Privileged.Unify


structure Constant :>
   CONSTANT
   where type constant = Term.constant
   where type term = Term.term
   where type opacity = ConstantInternal.opacity
   = ConstantInternal

structure Prim :>
   PRIM
   where type constant = Term.constant
   = PrimInternal

structure Reduction :>
   REDUCTION
   where type constant = Term.constant
   where type term = Term.term
   where type elim = Term.elim
   where type reduction = ReductionInternal.reduction
   where type ureduction1 = ReductionInternal.ureduction1
   where type ureduction2 = ReductionInternal.ureduction2
   = ReductionInternal

structure PrimReduction :>
   PRIM_REDUCTION
   where type reduction = ReductionInternal.reduction
   where type ureduction1 = ReductionInternal.ureduction1
   where type ureduction2 = ReductionInternal.ureduction2
   = PrimReductionInternal

structure Redex :>
   REDEX
   where type term = Term.term
   where type constant = Term.constant
   where type elim = Term.elim
   where type reduction = Reduction.reduction
   = RedexInternal

structure ConstantTable =
   CheckpointedHashTable 
   (structure Key = Constant.Hashable)

structure Constant2Table =
   CheckpointedHashTable
   (structure Key =
       ProductHashable
       (structure X = Constant.Hashable
        structure Y = Constant.Hashable))

