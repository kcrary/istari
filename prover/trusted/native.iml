
signature NATIVE =
   sig

      type constant
      type term
      type native

      datatype operator =
         Unary of native -> term option
       | Binary of native -> native -> term option

      val operators : (constant * operator) list

   end


functor NativeFun (structure Term : TERM
                   structure Prim : PRIM 
                                    where type constant = Term.constant)
   :> 
   NATIVE
   where type constant = Term.constant
   where type term = Term.term
   where type native = Term.native
   =
   struct

      open Term


      fun eqzb native native' =
         (case (native, native') of
             (Integer p, Integer q) =>
                if IntInf.= p q then
                   SOME (Const Prim.tru)
                else
                   SOME (Const Prim.fals)

           | _ =>
                NONE)
             

      fun leqzb native native' =
         (case (native, native') of
             (Integer p, Integer q) =>
                if IntInf.<= p q then
                   SOME (Const Prim.tru)
                else
                   SOME (Const Prim.fals)

           | _ =>
                NONE)


      fun negz native =
         (case native of
             Integer p =>
                SOME (Native (Integer (IntInf.~ p)))

           | _ =>
                NONE)


      fun plusz native native' =
         (case (native, native') of
             (Integer p, Integer q) =>
                SOME (Native (Integer (IntInf.+ p q)))

           | _ =>
                NONE)


      fun timesz native native' =
         (case (native, native') of
             (Integer p, Integer q) =>
                SOME (Native (Integer (IntInf.* p q)))

           | _ =>
                NONE)


      fun symbol_eqb native native' =
         (case (native, native') of
             (Symbol p, Symbol q) =>
                if Symbol.eq (p, q) then
                   SOME (Const Prim.tru)
                else
                   SOME (Const Prim.fals)

           | _ =>
                NONE)




      datatype operator =
         Unary of native -> term option
       | Binary of native -> native -> term option

      val operators =
         [
         (Prim.eqzb, Binary eqzb),
         (Prim.leqzb, Binary leqzb),
         (Prim.negz, Unary negz),
         (Prim.plusz, Binary plusz),
         (Prim.timesz, Binary timesz),
         (Prim.symbol_eqb, Binary symbol_eqb)
         ]

   end
