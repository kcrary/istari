
signature SUBTYPE_TACTIC =
   sig

      type tactic = Tactic.tactic

      val subsume : ETerm.eterm -> tactic
      val esubsume : tactic

      val eqtp : ETerm.eterm -> tactic
      val eeqtp : tactic

      val forceExactPriority : ETerm.eterm -> Tactic.priority Tactic.tacticm
      val forceExactRaw : ETerm.eterm -> tactic
      val forceExact : ETerm.eterm -> tactic

      val tightenPriority : Hyp.hypothesis -> ETerm.eterm -> Tactic.priority Tactic.tacticm
      val tightenRaw : Hyp.hypothesis -> ETerm.eterm -> tactic
      val tighten : Hyp.hypothesis -> ETerm.eterm -> tactic

   end


structure SubtypeTactic :> SUBTYPE_TACTIC =
   struct

      structure T = Term
      structure R = Reorder
      structure TC = Typecheck

      open Tactic
      open RefineTactic
      open CasePervasive

      fun subsume ea =
         let
            do a = withterm ea
         in
            goalCaseT
            /| \Prim.eq\ ? ? ? =>
               \(fnc b m n =>
                    refine (Rule.subsumptionEq a b m n))\

             | \Prim.ov\ ? ? =>
               \(fnc b m =>
                    refine (Rule.subsumptionOf a b m))\

             | ? =>
               \(fnc b =>
                    refine (Rule.subsumption a b))\
            /
         end

      val esubsume = subsume ETerm.evar

      fun eqtp ea =
         let
            do a = withterm ea
         in
            goalCaseT
            /| \Prim.eq\ ? ? ? =>
               \(fnc b m n =>
                    refine (Rule.equivalenceEq a b m n))\

             | \Prim.ov\ ? ? =>
               \(fnc b m =>
                    refine (Rule.equivalenceOf a b m))\

             | ? =>
               \(fnc b =>
                    refine (Rule.equivalence a b))\
            /
         end

      val eeqtp = eqtp ETerm.evar

      fun forceExactPriority em =
         let
            do () = lift
         in
            (* B *)
            Reorder.reorder
               (refine (Rule.equivalence (T.evar ()) (T.evar ())))
               (Reorder.pull 1)
            >>> [
                (* A *)
                IntroTactic.exactRaw em >> idtacM Secondary,

                (* A = B : type *)
                idtacM Primary
                ]
         end

      fun forceExactRaw em = forceExactPriority em >> idtac

      fun forceExact em = Typecheck.withTypecheckSnd (forceExactPriority em)



      fun tightenPriority hyp eb =
         let
            do i = Hyp.findhyp hyp
            do bsh = withterm eb
            val b = T.evar ()
         in
            if Unify.unify1 bsh (T.Sub (b, T.Shift (i+1))) then
               (* A ... |- C *)
               refine (Rule.tighten i (T.evar ()) b (T.evar ()))
               >>> [
                   (* A ... |- B[^i+1] <: A[^i+1] *)
                   idtacM Secondary,

                   (* A ... |- i : B[^i+1] *)
                   idtacM Primary,

                   (* B ... |- C *)
                   idtacM Primary
                   ]
            else
               fail "type depends on subsequent variables"
         end

      fun tightenRaw hyp eb = tightenPriority hyp eb >> idtac

      fun tighten hyp eb = Typecheck.withTypecheckSnd (tightenPriority hyp eb)

   end
