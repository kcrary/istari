
signature TYPECHECK =
   sig

      type tactic = Tactic.tactic
      type 'a tacticm = 'a Tactic.tacticm
      type priority = Tactic.priority


      (* run typechecker on current goal *)
      val typecheck : tactic

      (* run typechecker on all subgoals *)
      val withTypecheck : tactic -> tactic               

      (* run typechecker on all secondary subgoals *)
      val withTypecheckSnd : Tactic.priority tacticm -> tactic

      (* run typechecker for side-effects only *)
      val inference : tactic

      (* run typechecker on current goal for one layer only *)
      val typecheck1 : tactic

      (* infer the type of the indicated term *)
      val inferPriority : ETerm.eterm -> Symbol.symbol option -> priority tacticm
      val inferRaw : ETerm.eterm -> Symbol.symbol option -> tactic
      val infer : ETerm.eterm -> Symbol.symbol option -> tactic

      (* infer the type obtained by following the supplied typing with the indicated spine *)
      val inferSpinePriority : int -> ETerm.eterm -> Symbol.symbol option -> priority tacticm

      (* prove the goal using a known extract, subgoals will have the same context *)
      val trivializePriority : priority tacticm
      val trivializeRaw : tactic
      val trivialize : tactic

      val trace : bool -> unit

   end


signature TYPECHECK_INTERNAL =
   sig

      include TYPECHECK


      val isTypecheckGoal : Judgement.judgement -> bool

      val multigoalTypecheck :
         (string * Tactic.goal) list
         -> (Message.label * Tactic.goal) list * (Refine.validation list -> Refine.validation list)


      structure Indirection :
         sig

            type 'a cref = 'a CheckpointedRef.cref

            val isTypecheckGoal : (Judgement.judgement -> bool) cref
            val masterTypecheck : (bool -> (string option * Tactic.goal) list -> Tactic.tactic list) cref
            val trace : bool ref cref
            
         end

   end



structure TypecheckInternal :> TYPECHECK_INTERNAL =
   struct

      structure D = Directory
      structure J = Judgement
      structure T = Term
      structure CR = CheckpointedRef
      structure H = ConstantTable

      open Tactic
      open Case

      val showPrefixed = Show.showPrefixed


      (*** Tactic manipulation ***)

      fun valcons first rest vs =
         let
            val (v, vs') = first vs
         in
            v :: rest vs'
         end


      (* precondition: |tacs| = |goals| *)
      fun andthenloop tacs goals acc fk sk =
         (case (tacs, goals) of
             (nil, nil) =>
                sk (List.rev acc, (fn vs => vs), fk)

           | (tac :: tacs, (_, subgoal) :: rest) =>
                let
                   do (subgoals, validate, fk') = tac subgoal fk

                   do (allgoals, valrest, fk'') =
                      andthenloop tacs rest (List.revAppend subgoals acc) fk'
                in
                   sk (allgoals, valcons validate valrest, fk'')
                end

           | _ =>
                raise (Fail "precondition1"))



      (* Indirection *)

      structure Indirection =
         struct

            type 'a cref = 'a CR.cref
            
            val isTypecheckGoal = CR.new TypecheckMain.isTypecheckGoal
            val masterTypecheck = CR.new TypecheckMain.masterTypecheck
            val trace = CR.new TypecheckMain.trace
            
         end

      fun isTypecheckGoal jud = CR.deref Indirection.isTypecheckGoal jud

      fun masterTypecheck inc goals = CR.deref Indirection.masterTypecheck inc goals

      fun trace b = CR.deref Indirection.trace := b



      (*** Entry points ***)

      fun withTypecheckMain f tac (goal as (_, dir)) fk sk =
         let
            do (subgoals, validate, fk') = tac goal fk

            val tacs = 
               masterTypecheck false (map (fn (x, goal) => (f x, goal)) subgoals)

            do (allgoals, subvalidate, _) =
               andthenloop tacs subgoals []
                  (fn str => raise (Fail ("typechecker internal tactic failed: " ^ str)))
         in
            sk (allgoals, (fn vs => validate (subvalidate vs)), fk')
         end


      fun withTypecheckSnd tac = 
         withTypecheckMain 
            (fn Primary => NONE
              | Secondary => SOME "")
            tac

      fun withTypecheck tac = 
         withTypecheckMain
            (fn label => SOME (Message.toString label))
            tac

      val typecheck = 
         withTypecheckMain
            (fn _ => SOME "")
            idtac

                   
      fun inference (goal as (jud, dir)) fk sk =
         let
            val goal' =
               (J.make (J.context jud) (T.apply1 Prim.istp (J.concl jud)),
                dir)
         in
            (* Do all this just for the side effects. *)
            masterTypecheck false [(SOME "", goal')];

            idtac goal fk sk
         end


      fun typecheck1 (goal as (jud, _)) fk sk =
         if isTypecheckGoal jud then
            (case masterTypecheck true [(SOME "", goal)] of
                [tac] =>
                   tac goal fk sk

              | _ =>
                   raise (Fail "impossible"))
         else
            fk "not a typechecking goal"



      extension Answer of (Message.label * Tactic.goal) list * (Refine.validation list -> Refine.validation list)

      fun multigoalTypecheck goals =
         let
            val tacs =
               masterTypecheck false (List.map (fn (str, goal) => (SOME str, goal)) goals)
         in
            (case 
                andthenloop tacs goals []
                (fn msg => raise (Fail ("internal typechecking tactic failure:" ^ msg)))
                (fn (subgoals, validate, _) => Answer (subgoals, validate))
             of
                Answer (subgoals, validate) => (subgoals, validate)

              | _ => raise (Fail "impossible"))
         end


      
      (*** Inference entry points ***)

      fun errorDetail msg details () =
         (
         print msg;
         print "\n";
         details ();
         print "\n"
         )

      fun inferDetail dir m aopt () =
         (
         showPrefixed "in: " dir m;
         
         (case aopt of
             NONE => ()

           | SOME a =>
                (
                print "principal subterm has type:\n";
                showPrefixed "    " dir a
                ))
         )

      fun inferPriority em symopt =
         let
            do (goal as (jud, dir)) = withgoal

            val m = ETerm.withdir dir em
         in
            (case
                (try
                    Sum.INL (Infer.infer (J.context jud) m (fns _ _ => idtac))
                 with
                    Infer.Mismatch (m', aopt, msg) =>
                       Sum.INR (m', aopt, msg)

                  | Infer.NotPath msg =>
                       Sum.INR (m, NONE, "not a path: " ^ msg)

                  | Infer.Ambiguous (m', a, _) =>
                       Sum.INR (m', SOME a, "a prefix of the path has an evar head"))
             of
                Sum.INL (a, tac) =>
                   refine (Rule.assert (T.apply2 Prim.ov a m) (T.evar ()))
                   >>> [
                       (* G |- M : A *)
                       tac >> idtacM Secondary,
                       
                       chdir (D.bindh dir symopt) >> idtacM Primary
                       ]

              | Sum.INR (m', aopt, msg) =>
                   (
                   Message.message 20 0
                      (errorDetail ("Type error: inference failed: " ^ msg)
                          (inferDetail dir m' aopt));

                   fail "type error"
                   ))
         end

      fun inferRaw em symopt = inferPriority em symopt >> idtac

      fun infer em symopt = withTypecheckSnd $ inferPriority em symopt


      val zilch = Symbol.fromValue ""

      fun inferSpinePriority i en symopt =
         let
            do (goal as (jud, dir)) = withgoal
            val n = ETerm.withdir dir en
         in
            goalHypnCaseT i
            /| $tm \Prim.ov\ ? ? =>
               \(fnc a m =>
                    termCaseT n
                    /| ($marker \zilch\) @ ? =>
                       \(fnc spine =>
                            (case
                                (try
                                    Sum.INL (Infer.inferFrom (J.context jud) m a spine
                                                (refine (Rule.hypothesis i))
                                                (fns _ _ => idtac))
                                 with
                                    Infer.Mismatch (m', aopt, msg) =>
                                       Sum.INR (m', aopt, msg)
                
                                  | Infer.NotPath msg =>
                                       Sum.INR (n, NONE, "not a path: " ^ msg)

                                  | Infer.Ambiguous (m', a, _) =>
                                       Sum.INR (m', SOME a, "a prefix of the spine has an evar head"))
                             of
                                Sum.INL (b, tac) =>
                                   refine (Rule.assert (T.apply2 Prim.ov b (T.Elim (m, spine))) (T.evar ()))
                                   >>> [
                                       (* G |- M @ spine : B *)
                                       tac >> idtacM Secondary,
                                       
                                       chdir (D.bindh dir symopt) >> idtacM Primary
                                       ]
                
                              | Sum.INR (m', bopt, msg) =>
                                   (
                                   Message.message 20 0
                                      (errorDetail ("Type error: inference failed: " ^ msg)
                                          (inferDetail dir m' bopt));
                
                                   fail "type error"
                                   )))\

                     | _ =>
                       \(fnc =>
                            fail "expecting a path with __ at head")\
                    /)\

             | _ =>
               \(fnc =>
                    fail (Symbol.toValue (D.name dir i) ^ " is not a typing hypothesis"))\
            /
         end



      val trivializePriority =
         goalCaseT
         /| const? @ _ =>
            \(fnc const =>
                 (case H.find TypecheckTables.trivialIntroTactics const of
                     SOME tac =>
                        refine (Rule.inhabitant (T.evar ()) T.Triv)
                        >>+
                        tac
 
                   | NONE =>
                        (case H.find TypecheckTables.semitrivialIntroTactics const of
                            SOME (m, tac) =>
                               refine (Rule.inhabitant (T.evar ()) m)
                               >>+
                               tac

                          | NONE =>
                               fail "conclusion is not known to be computationally trivial")))\

          | _ =>
            \(fnc =>
                 fail "conclusion is not known to be computationally trivial")\
         /

      val trivializeRaw = trivializePriority >> idtac

      val trivialize = withTypecheckSnd trivializePriority

   end


structure Typecheck :> TYPECHECK = TypecheckInternal


signature TYPECHECK_SELECT =
   sig

      val select : unit -> unit

   end


structure TypecheckDefault :> TYPECHECK_SELECT =
   struct

      structure CR = CheckpointedRef
      structure I = TypecheckInternal.Indirection
      structure M = TypecheckMain

      fun select () =
         (
         CR.assign I.isTypecheckGoal M.isTypecheckGoal;
         CR.assign I.masterTypecheck M.masterTypecheck;
         CR.assign I.trace M.trace;
         print "[Typechecker selected: default]\n"
         )

   end
