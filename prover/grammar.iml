
structure ParseLTerm =
   struct

      structure T = Term
      structure P = Prim


      fun id x = x

      fun app m1 m2 = T.Elim (m1, [T.App m2])
      fun app2 m1 m2 m3 = T.Elim (m1, [T.App m2, T.App m3])
      fun app3 m1 m2 m3 m4 = T.Elim (m1, [T.App m2, T.App m3, T.App m4])



      (* Ident/AndIdent *)

      fun ident str = Symbol.fromValue str



      (* LTerm 0 *)

      fun lam m = T.Lam (NONE, m)



      (* LTerm 30 *)

      val kEq = T.Const P.eq
      fun eq m n a = app3 kEq a m n

      val kEqtp = T.Const P.eqtp
      fun eqtp a b = app2 kEqtp a b



      (* LTerm 90 *)

      fun pi1 m = T.pi1 m

      fun pi2 m = T.pi2 m

      fun prev m = T.prev m

      fun next m = T.Next m



      (* LTerm 99 *)

      fun sub m s = T.Sub (m, s)



      (* LTerm 100 *)

      fun pair m1 m2 = T.Pair (m1, m2)

      val triv = T.Triv

      val univ = T.Const P.univ

      fun var i = T.Var i

      fun integer n =
         T.Native (T.Integer (IntInf.fromInt n))

      fun integerEmbed x =
         T.Native (T.Integer x)

      fun shortConstant sym = T.Const (Namespace.resolve [sym])

      fun longConstant strs = T.Const (Namespace.resolve (map Symbol.fromValue strs))

      val zilch = Symbol.fromValue ""
      val hole = T.Marker zilch



      (* Sub *)

      val compose = T.compose

      fun dot m s = T.Dot (m, s)

      fun idot i s = T.Idot (i, s)

      val shift = T.Shift

      val shift0 = T.Shift 0

   end


structure ParseTerm =
   struct

      structure T = ETerm

      exception Syntax = SyntaxError.Syntax


      fun id x = x
      val none = NONE
      val some = SOME
      val null = []
      fun sing x = [x]
      fun duo x y = [x, y]
      fun cons x y = x :: y
      fun append x y = x @ y



      (* Longident *)

      fun longid strs = map Symbol.fromValue strs



      (* Binding *)

      fun bindingBare x = [(x, NONE)]

      fun bindingAnnot xl a = map (fn x => (x, SOME a)) xl



      (* Bindings *)

      fun appendBlanks n l =
         (case Int.compare n 0 of
             LESS =>
                raise (Syntax "negative repetition in bindings")

           | EQUAL =>
                l

           | GREATER =>
                appendBlanks (n-1) ((NONE, NONE) :: l))



      (* Level *)

      fun level_plus n m =
         if n = 0 then
            m
         else
            T.apply1 Prim.lsucc (level_plus (n-1) m)

      fun level_max l =
         (case l of
             [] => raise (Syntax "bad level")

           | [m] => m

           | m1 :: rest =>
                T.apply2 Prim.lmax m1 (level_max rest))

      fun level_lit n =
         if n = 0 then
            T.const Prim.lzero
         else
            T.apply1 Prim.lsucc (level_lit (n-1))

      fun var pos sym = T.withloc pos (T.var sym)



      (* Term *)

      fun lam x a m =
         (case a of
             NONE => T.lam x m
           | SOME a' => T.lamann x a' m)

      fun lams xl m = foldr (fns (x, a) n => lam x a n) m xl

      fun instance b =
         (case b of
             NONE => T.evar
           | SOME a => a)

      fun forall x a b = T.apply2 Prim.forall (instance a) (T.lam x b)
      fun foralls al b = foldr (fns (x, a) b => forall x a b) b al

      fun exists x a b = T.apply2 Prim.exists (instance a) (T.lam x b)
      fun existss al b = foldr (fns (x, a) b => exists x a b) b al

      fun iforall x a b = T.apply3 Prim.iforall T.evar (instance a) (T.lam x b)
      fun iforalls al b = foldr (fns (x, a) b => iforall x a b) b al

      fun iexists x a b = T.apply3 Prim.iexists T.evar (instance a) (T.lam x b)
      fun iexistss al b = foldr (fns (x, a) b => iexists x a b) b al

      fun intersect x a b = T.apply2 Prim.intersect (instance a) (T.lam x b)
      fun intersects al b = foldr (fns (x, a) b => intersect x a b) b al

      fun union x a b = T.apply2 Prim.union (instance a) (T.lam x b)
      fun unions al b = foldr (fns (x, a) b => union x a b) b al

      fun foralltp x b = T.apply1 Prim.foralltp (T.lam x b)
      fun foralltps xl b = foldr foralltp b xl

      fun iset x a b = T.apply2 Prim.iset a (T.lam (SOME x) b)

      fun rec x a = T.apply1 Prim.rec (T.lam (SOME x) a)

      fun mu x a = T.apply1 Prim.mu (T.lam (SOME x) a)

      fun quotient x y a b = T.apply2 Prim.quotient a (T.lam (SOME x) (T.lam (SOME y) b))

      val arrow = T.apply2 Prim.arrow

      val tarrow = T.apply2 Prim.tarrow

      val karrow = T.apply2 Prim.karrow

      val guard = T.apply2 Prim.guard

      fun lett x m n = T.apply2 Prim.lett m (T.lam (SOME x) n)

      fun letnext x m n = T.apply2 Prim.letnext m (T.lam (SOME x) n)

      fun seq x m n = T.apply2 Prim.seq m (T.lam (SOME x) n)

      fun sumcase m x n y p = T.apply3 Prim.sum_case m (T.lam x n) (T.lam y p)

      fun ov m a = T.apply2 Prim.ov a m

      val istp = T.apply1 Prim.istp



      (* Term 2 *)

      fun ite b x y = T.apply3 Prim.ite b x y



      (* Term 15 *)

      val sum = T.apply2 Prim.sum



      (* Term 20 *)

      val prod = T.apply2 Prim.prod
      val coguard = T.apply2 Prim.coguard



      (* Term 30 *)

      fun eq m n a = T.apply3 Prim.eq a m n

      val eqtp = T.apply2 Prim.eqtp

      val subtype = T.apply2 Prim.subtype

      val eeqtp = T.apply2 Prim.eeqtp

      val lleq = T.apply2 Prim.lleq



      (* Term 90 *)

      val app = T.app

      val pi1 = T.pi1

      val pi2 = T.pi2

      val prev = T.prev

      fun proj m n =
         if n = 0 then
            T.pi1 m
         else
            proj (T.pi2 m) (n-1)

      val next = T.next

      fun inl m = T.apply1 Prim.inl m

      fun inr m = T.apply1 Prim.inr m

      fun univ m = T.apply1 Prim.univ m

      fun kind m = T.apply1 Prim.kind m

      fun ann m a = T.apply2 Prim.ann a m

      fun ap m n = T.apply2 Prim.ap m n

      fun appEvars m n =
         (case Int.compare n 0 of
             LESS =>
                raise (Syntax "negative repetition in apply to evars")

           | EQUAL =>
                m

           | GREATER =>
                appEvars (T.app m T.evar) (n-1))

      val zilch = Symbol.fromValue ""
      val hole = T.marker zilch

      fun appHoles m n =
         (case Int.compare n 0 of
             LESS =>
                raise (Syntax "negative repetition in apply to holes")

           | EQUAL =>
                m

           | GREATER =>
                appHoles (T.app m hole) (n-1))



      (* Term 100 *)

      fun tuple ms =
         (case ms of
             [] => raise (Fail "precondition")

           | [m] => m

           | m :: rest =>
                T.pair m (tuple rest))

      fun set x a b = T.apply2 Prim.set a (T.lam (SOME x) b)

      val squash = T.apply1 Prim.squash

      val literal = T.literal

      fun literalVariable i = T.literal (Term.Var i)

      fun short pos sym = T.withloc pos (T.short sym)

      fun shortExplicit pos sym = T.withloc pos (T.explicit (T.short sym))

      fun long strs = T.long (map Symbol.fromValue strs)

      fun longExplicit strs = T.explicit (T.long (map Symbol.fromValue strs))

      fun nat n =
         if n <= 0 then
            T.const Prim.zero
         else
            T.apply1 Prim.succ (nat (n-1))

      fun integer n =
         T.integer (IntInf.fromInt n)

      val integerEmbed = T.integer

      fun symbol str =
         T.symbol (Symbol.fromValue str)

      val symbolEmbed = T.symbol

      val evar = T.evar

      val triv = T.triv

      fun explicit m = T.explicit m

      val additional = T.additional 

      val exclude = T.exclude

      fun longConstant address = Namespace.resolve address

   end


structure UnparseTerm =
   struct

      structure CR = CheckpointedRef
      structure U = Show.Unparsing


      fun idents args =
         U.box $
         U.append $
         (case args of
             [] =>
                (* shouldn't happen *)
                []

           | arg :: rest =>
                U.string arg
                ::
                List.foldr
                   (fns argi l => U.string " " :: U.string argi :: l)
                   []
                   rest)


      fun binderContent str (doms, cod) =
         U.box $
         U.append
            [
            U.box $
            U.append
               [
               U.string str,
               U.append
                  (map 
                      (fn (args, dom, _) => 
                         U.append
                            [
                            U.break 1,
                            U.string "(",
                            U.box $ 
                               U.append
                               [
                               idents args,
                               U.break 1,
                               U.string ": ",
                               U.box $ dom 0
                               ],
                            U.string ")"
                            ])
                      doms),
               U.string " ."
               ],
            U.break 1,
            cod 0,
            ]


      fun letContent str var m n =
         U.boxi 0 $
         U.append
            [
            U.box $ U.append
               [
               U.string str,
               var,
               U.string " =",
               U.break 1,
               U.box (m 1)
               ],
            U.break 1,
            U.string "in",
            U.break 1,
            U.box (n 0)
            ]


      fun register k arity prec unp =
         ConstantTable.insert U.unparsingTable k (arity, prec, ref true, unp)


      fun registerBinder const str =
         register const 2 0
         (U.wrap
             (U.fix
                 (fn unp =>
                     U.alt
                        [
                        U.wrap
                           (U.apply2 const U.showterm (U.lam unp))
                           (fn ((dom1, domt1), (arg, (doms, cod))) =>
                               (case doms of
                                   (args, dom2, domt2) :: rest =>
                                      if Simplify.same (Term.Sub (domt1, Term.shift1)) domt2 then
                                         ((arg :: args, dom2, domt1) :: rest, cod)
                                      else
                                         (([arg], dom1, domt1) :: doms, cod)

                                 | _ =>
                                      (([arg], dom1, domt1) :: doms, cod))),

                        U.wrap
                           U.show
                           (fn cod => ([], cod)),
                        ]))
             (binderContent str))


      fun registerIBinder const str =
         register const 3 0
         (U.ifNoImplicits $
          U.wrap
             (U.fix
                 (fn unp =>
                     U.alt
                        [
                        U.wrap
                           (U.apply3 const U.wild U.showterm (U.lam unp))
                           (fn ((), (dom1, domt1), (arg, (doms, cod))) =>
                               (case doms of
                                   (args, dom2, domt2) :: rest =>
                                      if Simplify.same (Term.Sub (domt1, Term.shift1)) domt2 then
                                         ((arg :: args, dom2, domt1) :: rest, cod)
                                      else
                                         (([arg], dom1, domt1) :: doms, cod)

                                 | _ =>
                                      (([arg], dom1, domt1) :: doms, cod))),

                        U.wrap
                           U.show
                           (fn cod => ([], cod)),
                        ]))
             (binderContent str))


      (* right associative *)
      fun registerBinary const str prec =
         register const 2 prec
         (U.wrap
             (U.fix
                 (fn unp =>
                     U.alt
                        [
                        U.wrap
                           (U.apply2 const U.show unp)
                           (fn (dom, (doms, cod)) => (dom :: doms, cod)),

                        U.wrap
                           U.show
                           (fn cod => ([], cod)),
                        ]))
             (fn (doms, cod) =>
                 U.boxi 0 $
                 U.append
                    [
                    U.append
                       (map
                           (fn dom =>
                               U.append
                                  [
                                  dom (prec+1),
                                  U.break 1,
                                  U.string str,
                                  U.string " "
                                  ])
                           doms),
                    cod prec
                    ]))

      fun registerLet const str =
         register const 2 0
         (U.wrap
             (U.apply2 const U.show (U.lam U.show))
             (fn (m, (x, n)) => letContent str (U.string x) m n))



      (* Level *)

      datatype level_exp =
         Literal of int
       | Plus of int * level_exp
       | Max of level_exp list
       | Misc of U.content

      fun lsucc e =
         (case e of
             Literal n => Literal (n+1)
           | Plus (n, e') => Plus (n+1, e')
           | _ => Plus (1, e))

      fun lmax (e1, e2) =
         (case e2 of
             Max l => Max (e1 :: l)

           | _ => Max [e1, e2])

      fun showLevel e prec =
         (case e of
             Literal n =>
                U.string (Int.toString n)

           | Plus (n, e) =>
                U.parens (prec > 0)
                   (U.append
                       [
                       U.string (Int.toString n),
                       U.break 1,
                       U.string "+ ",
                       showLevel e 0
                       ])

           | Max [] => raise (Fail "impossible")

           | Max (e0 :: l) =>
                U.append
                   (
                   U.string "[" ::
                   showLevel e0 1 ::

                   List.foldr
                      (fns e c =>
                          U.break 1 ::
                          showLevel e 1 ::
                          c)
                      [U.string "]"]
                      l
                   )

           | Misc c => c)

      val unparseLevel =
         U.wrap
            (U.fix
                (fn unp =>
                    U.alt
                       [
                       U.wrap
                          (U.constant Prim.lzero)
                          (fn () => Literal 0),

                       U.wrap
                          (U.apply1 Prim.lsucc unp)
                          lsucc,

                       U.wrap
                          (U.apply2 Prim.lmax unp unp)
                          lmax,

                       U.wrap
                          U.show
                          (fn c => Misc (c 100))
                       ]))
            (fns e prec =>
                showLevel e (if prec > 0 then 1 else 0))



      (* Term 0 *)

      val () = registerBinder Prim.fnann "fn"

      val () = registerBinder Prim.forall "forall"

      val () = registerBinder Prim.exists "exists"

      val () = registerIBinder Prim.iforall "iforall"

      val () = registerIBinder Prim.iexists "iexists"

      val () = registerBinder Prim.intersect "intersect"

      val () = registerBinder Prim.union "union"

      val () =
         register Prim.foralltp 1 0
         (U.wrap
             (U.fix
                 (fn unp =>
                     U.alt
                        [
                        U.wrap
                           (U.apply1 Prim.foralltp (U.lam unp))
                           (fn (arg, (args, cod)) => (arg :: args, cod)),

                        U.wrap
                           U.show
                           (fn cod => ([], cod))
                        ]))
             (fns (doms, cod) =>
                 U.box $
                 U.append
                    [
                    U.box $
                    U.append
                       [
                       U.string "foralltp",
                       U.append
                          (map 
                              (fn arg => 
                                 U.append
                                    [
                                    U.break 1,
                                    U.string arg
                                    ])
                              doms),
                       U.string " ."
                       ],
                    U.break 1,
                    cod 0
                    ]))

      val () =
         register Prim.iset 2 0
         (U.wrap
             (U.apply2 Prim.iset U.show (U.lam U.show))
             (fn (a, (arg, b)) =>
                 U.box $
                 U.append
                    [
                    U.string "iset",
                    U.break 1,
                    U.string "(",
                    U.string arg,
                    U.break 1,
                    U.string ": ",
                    U.box $ a 0,
                    U.string ") .",
                    U.break 1,
                    b 0
                    ]))

      val () =
         register Prim.rec 1 0
         (U.wrap
             (U.apply1 Prim.rec (U.lam U.show))
             (fn (arg, body) =>
                 U.append [U.string "rec ", U.string arg, U.string " .", U.break 1, body 1]))

      val () =
         register Prim.mu 1 0
         (U.wrap
             (U.apply1 Prim.mu (U.lam U.show))
             (fn (arg, body) =>
                 U.append [U.string "mu ", U.string arg, U.string " .", U.break 1, body 1]))

      val () =
         register Prim.quotient 2 0
         (U.wrap
             (U.apply2 Prim.quotient U.show (U.lam (U.lam U.show)))
             (fn (a, (x, (y, b))) =>
                 U.append [
                          U.string "quotient (",
                          U.box $ U.append
                             [
                             U.string x,
                             U.string " ",
                             U.string y,
                             U.break 1,
                             U.string ": ",
                             a 0,
                             ],
                          U.string ") .",
                          U.break 1,
                          b 1
                          ]))

      val () = registerBinary Prim.arrow "->" 0

      val () = registerBinary Prim.tarrow "-t>" 0

      val () = registerBinary Prim.karrow "-k>" 0

      val () = registerBinary Prim.guard "-g>" 0

      val () = registerLet Prim.lett "let "

      val () = registerLet Prim.letnext "let next "

      val () = registerLet Prim.seq "seq "

      val () =
         register Prim.sum_case 3 100
         (U.wrap
             (U.apply3 Prim.sum_case U.show (U.lam U.show) (U.lam U.show))
             (fn (m, (x, n), (y, p)) =>
                 U.append
                    [
                    U.string "(",

                    U.boxi 0 $
                    U.append [
                             U.string "case ",
                             U.box (m 1),
                             U.string " of",
                             U.break 1,
                             U.string "| ",

                             U.box $
                                U.append
                                   [
                                   U.string "inl ",
                                   U.string x,
                                   U.string " .",
                                   U.break 1,
                                   U.box (n 0)
                                   ],

                             U.break 1,
                             U.string "| ",

                             U.box $
                                U.append
                                   [
                                   U.string "inr ",
                                   U.string y,
                                   U.string " .",
                                   U.break 1,
                                   U.box (p 0)
                                   ],

                             U.string ")"
                             ]
                    ]))

      val () =
         register Prim.ov 2 0
         (U.wrap
             (U.apply2 Prim.ov U.show U.show)
             (fn (a, m) => U.append [m 1,
                                     U.break 1, U.string ": ", a 0]))

      val () =
         register Prim.istp 1 0
         (U.wrap
             (U.apply1 Prim.istp U.show)
             (fn a => U.append [a 1,
                                U.break 1, U.string ": type"]))



      (* Term 2 *)

      val () =
         register Prim.ite 3 2
         (U.wrap
             (U.apply3 Prim.ite U.show U.show U.show)
             (fn (m, n, p) =>
                 U.boxi 0 $
                 U.append
                    [
                    U.string "if ",
                    U.box (m 2),
                    U.break 1,
                    U.string "then ",
                    U.box (n 2),
                    U.break 1,
                    U.string "else ",
                    U.box (p 3)
                    ]))



      (* Term 15 *)

      val () = registerBinary Prim.sum "%" 15



      (* Term 20 *)

      val () = registerBinary Prim.prod "&" 20
      val () = registerBinary Prim.coguard "&g" 20



      (* Term 30 *)

      val () =
         register Prim.eq 3 30
         (U.wrap
             (U.apply3 Prim.eq U.show U.show U.show)
             (fn (a, m, n) => U.append [m 31, 
                                        U.break 1, U.string "= ", n 31, 
                                        U.break 1, U.string ": ", a 31]))

      val () =
         register Prim.eqtp 2 30
         (U.wrap
             (U.apply2 Prim.eqtp U.show U.show)
             (fn (a, b) => U.append [a 31, 
                                     U.break 1, U.string "= ", b 31, 
                                     U.break 1, U.string ": type"]))

      val () =
         register Prim.subtype 2 30
         (U.wrap
             (U.apply2 Prim.subtype U.show U.show)
             (fn (a, b) => U.append [a 31, 
                                     U.break 1, U.string "<: ", b 31]))

      val () =
         register Prim.eeqtp 2 30
         (U.wrap
             (U.apply2 Prim.eeqtp U.show U.show)
             (fn (a, b) => U.append [a 31, 
                                     U.break 1, U.string "<:> ", b 31]))

      val () =
         register Prim.lleq 2 30
         (U.wrap
             (U.apply2 Prim.lleq unparseLevel unparseLevel)
             (fn (c, d) => U.append [c 31, 
                                     U.break 1, U.string "<l= ", d 31]))



      (* Term 90 *)

      val () =
         register Prim.inl 1 90
         (U.wrap
             (U.apply1 Prim.inl U.show)
             (fn m => U.append [U.string "inl ", m 91]))
   
      val () =
         register Prim.inr 1 90
         (U.wrap
             (U.apply1 Prim.inr U.show)
             (fn m => U.append [U.string "inr ", m 91]))

      val () =
         register Prim.univ 1 90
         (U.wrap
             (U.apply1 Prim.univ unparseLevel)
             (fn c =>
                 U.append
                    [
                    U.string "U",
                    U.break 1,
                    c 91
                    ]))

      val () =
         register Prim.kind 1 90
         (U.wrap
             (U.apply1 Prim.kind unparseLevel)
             (fn c =>
                 U.append
                    [
                    U.string "Kind",
                    U.break 1,
                    c 91
                    ]))

      val () =
         register Prim.ann 2 90
         (U.wrap
             (U.apply2 Prim.ann U.show U.show)
             (fn (a, m) =>
                 U.append [U.box (m 90), U.break 1, U.string ":> ", U.box (a 91)]))
   
      val () =
         register Prim.ap 2 90
         (U.wrap
             (U.apply2 Prim.ap U.show U.show)
             (fn (f, a) =>
                 (U.append
                     [
                     f 90,
                     U.break 1,
                     U.string "ap ",
                     U.box (a 91)
                     ])))



      (* Term 100 *)

      val () =
         register Prim.set 2 100
         (U.wrap
             (U.apply2 Prim.set U.show (U.lam U.show))
             (fn (a, (arg, b)) =>
                 U.boxi 0
                    (U.append
                        [
                        U.string "{ ",
                        U.box 
                           (U.append
                               [
                               U.string arg,
                               U.string " :",
                               U.break 1,
                               a 0
                               ]),
                        U.break 1,
                        U.string "| ",
                        U.box (b 0),
                        U.string " }"
                        ])))

      val () =
         register Prim.squash 1 100
         (U.wrap
             (U.apply1 Prim.squash U.show)
             (fn a => U.append [
                               U.string "{ ",
                               a 0,
                               U.string " }"
                               ]))

      val natSym = Symbol.fromValue "nat"

      val () =
         register Prim.zero 0 100
         (U.wrap
             (U.constant Prim.zero)
             (fn () => 
                 if Symbol.eq (CR.deref Show.arithmetic, natSym) then
                    U.string "0"
                 else
                    U.string "n`0"))

      val () =
         register Prim.succ 1 100
         (U.wrap
             (U.fix
                 (fn unp =>
                     U.alt
                        [
                        U.wrap
                           (U.constant Prim.zero)
                           (fn () => 0),

                        U.wrap
                           (U.apply1 Prim.succ unp)
                           (fn n => n + 1)
                        ]))
             (fn n =>
                 if Symbol.eq (CR.deref Show.arithmetic, natSym) then
                    U.string (Int.toString n)
                 else
                    U.append
                       [
                       U.string "n`",
                       U.string (Int.toString n)
                       ]))


      (* quote these constants if they appear unmatched by an unparsing rule *)
      val () =
         U.reserved :=
         List.foldl
            (fns str set => SymbolSet.insert set (Symbol.fromValue str))
            SymbolSet.empty
            ["Kind", "U", "ap", "case", "exists", "fn", "forall", "iexists", "iforall", "if", "in", "inl", "inr", "let", "mu", "next", "pi1", "pi2", "prev", "quotient", "rec", "then", "else"]

   end




(* Term depends on Ident and AnyIdent from LTerm. *)
grammardef LTerm

   open ParseLTerm
   
   rule Ident      ::= IDENT => ident   (* excludes reserved words *)
   rule AnyIdent   ::= IDENT => ident   (* allows reserved words *)

   rule LTerm(0)   ::= "fn" "." LTerm (0) => lam

   rule LTerm(30)  ::= LTerm(31) "=" LTerm(31) ":" LTerm(31) => eq
   rule LTerm(30)  ::= LTerm(31) "=" LTerm(31) ":" "type" => eqtp

   rule LTerm(90)  ::= LTerm(90) LTerm(91) => app
   rule LTerm(90)  ::= LTerm(90) "#1" => pi1
   rule LTerm(90)  ::= LTerm(90) "#2" => pi2
   rule LTerm(90)  ::= LTerm(90) "#prev" => prev
   rule LTerm(90)  ::= "next" LTerm(91) => next

   rule LTerm(99)  ::= LTerm(99) "[" Sub "]" => sub

   rule LTerm(100) ::= "(" LTerm ")" => id
   rule LTerm(100) ::= "(" LTerm "," LTerm ")" => pair
   rule LTerm(100) ::= "(" ")" => triv
   rule LTerm(100) ::= "U" => univ

   rule LTerm(100) ::= NUMBER => var

   rule LTerm(100) ::= "z`" NUMBER => integer
   rule LTerm(100) ::= "z`" EMBED => integerEmbed

   rule LTerm(100) ::= EMBED => id
   rule LTerm(100) ::= Ident => shortConstant
   rule LTerm(100) ::= "`" AnyIdent => shortConstant
   rule LTerm(100) ::= LONGID => longConstant
   rule LTerm(100) ::= "`" LONGID => longConstant     (* never any need for the tick, but allow it *)
   rule LTerm(100) ::= "__" => hole

   rule Sub        ::= Sub "o" Sub(1) => compose

   rule Sub(1)     ::= LTerm "." Sub(1) => dot
   rule Sub(1)     ::= NUMBER "." Sub(1) => idot
   rule Sub(1)     ::= "^" NUMBER => shift
   rule Sub(1)     ::= "id" => shift0
   rule Sub(1)     ::= "(" Sub(0) ")" => id

end


(* Makes LTerm the default instead of Term. *)
grammardef LTermDefault

   default LTerm

end


grammardef Term

   open ParseTerm

   rule Longident  ::= AnyIdent => sing
   rule Longident  ::= LONGID => longid

   rule Numbers    ::= => null
   rule Numbers    ::= NUMBER Numbers => cons
   rule Numbersn   ::= NUMBER Numbers => cons

   rule Idents     ::= => null
   rule Idents     ::= Ident Idents => cons

   rule Longidents ::= => null
   rule Longidents ::= Longident Longidents => cons

   rule OIdent     ::= Ident => some
   rule OIdent     ::= "_" => none

   rule IdentPat   ::= Ident => some
   rule IdentPat   ::= "?" => none

   rule OIdents    ::= => null
   rule OIdents    ::= OIdent OIdents => cons

   rule OIdentsn   ::= OIdent OIdents => cons

   rule Binding    ::= OIdent => bindingBare
   rule Binding    ::= "(" OIdents ":" Term ")" => bindingAnnot

   rule Bindings   ::= => null
   rule Bindings   ::= Binding Bindings => append
   rule Bindings   ::= "_#" NUMBER Bindings => appendBlanks

   rule Bindingsn  ::= Binding Bindings => append
   rule Bindingsn  ::= "_#" NUMBER Bindings => appendBlanks

   rule Level(0)   ::= NUMBER "+" Level(0) => level_plus
   rule Level(1)   ::= "[" Levels "]" => level_max
   rule Level(1)   ::= NUMBER => level_lit
   rule Level(1)   ::= LOCATION Ident => var
   rule Level(1)   ::= "(" Level(0) ")" => id
   rule Level(1)   ::= EMBED => id

   rule Levels     ::= Level(1) => sing
   rule Levels     ::= Level(1) Levels => cons

   rule Term(0)    ::= "fn" Bindingsn "." Term(0) => lams
   rule Term(0)    ::= "forall" Bindings "." Term(0) => foralls
   rule Term(0)    ::= "exists" Bindings "." Term(0) => existss
   rule Term(0)    ::= "iforall" Bindings "." Term(0) => iforalls
   rule Term(0)    ::= "iexists" Bindings "." Term(0) => iexistss
   rule Term(0)    ::= "intersect" Bindings "." Term(0) => intersects
   rule Term(0)    ::= "union" Bindings "." Term(0) => unions
   rule Term(0)    ::= "foralltp" OIdents "." Term(0) => foralltps

   rule Term(0)    ::= "iset" "(" Ident ":" Term(0) ")" "." Term(0) => iset
   rule Term(0)    ::= "rec" Ident "." Term(0) => rec
   rule Term(0)    ::= "mu" Ident "." Term(0) => mu
   rule Term(0)    ::= "quotient" "(" Ident Ident ":" Term(0) ")" "." Term(0) => quotient

   rule Term(0)    ::= Term(1) "->" Term(0) => arrow
   rule Term(0)    ::= Term(1) "-t>" Term(0) => tarrow
   rule Term(0)    ::= Term(1) "-k>" Term(0) => karrow
   rule Term(0)    ::= Term(1) "-g>" Term(0) => guard

   rule Term(0)    ::= "let" Ident "=" Term(1) "in" Term(0) => lett
   rule Term(0)    ::= "let" "next" Ident "=" Term(1) "in" Term(0) => letnext
   rule Term(0)    ::= "seq" Ident "=" Term(1) "in" Term(0) => seq

   rule Term(0)    ::= "case" Term(1) "of" "|" "inl" OIdent "." Term(0) "|" "inr" OIdent "." Term(0) => sumcase

   (* NB: lower precedence than equality *)
   rule Term(0)    ::= Term(1) ":" Term(0) => ov
   rule Term(0)    ::= Term(1) ":" "type" => istp

   rule Term(2)    ::= "if" Term(2) "then" Term(2) "else" Term(2) => ite

   rule Term(15)   ::= Term(16) "%" Term(15) => sum

   rule Term(20)   ::= Term(21) "&" Term(20) => prod
   rule Term(20)   ::= Term(21) "&g" Term(20) => coguard

   rule Term(30)   ::= Term(31) "=" Term(31) ":" Term(31) => eq
   rule Term(30)   ::= Term(31) "=" Term(31) ":" "type" => eqtp
   rule Term(30)   ::= Term(31) "<:" Term(31) => subtype
   rule Term(30)   ::= Term(31) "<:>" Term(31) => eeqtp
   rule Term(30)   ::= Term(31) "<l=" Term(31) => lleq

   rule Term(90)   ::= Term(90) Term(91) => app
   rule Term(90)   ::= Term(90) "#1" => pi1
   rule Term(90)   ::= Term(90) "#2" => pi2
   rule Term(90)   ::= Term(90) "#prev" => prev
   rule Term(90)   ::= Term(90) "##" NUMBER => proj
   rule Term(90)   ::= "pi1" Term(91) => pi1
   rule Term(90)   ::= "pi2" Term(91) => pi2
   rule Term(90)   ::= "prev" Term(91) => prev
   rule Term(90)   ::= "next" Term(91) => next
   rule Term(90)   ::= "inl" Term(91) => inl
   rule Term(90)   ::= "inr" Term(91) => inr
   rule Term(90)   ::= "U" Level(1) => univ
   rule Term(90)   ::= "Kind" Level(1) => kind

   rule Term(90)   ::= Term(90) ":>" Term(91) => ann
   rule Term(90)   ::= Term(90) "ap" Term(91) => ap
   rule Term(90)   ::= Term(90) "_#" NUMBER => appEvars
   rule Term(90)   ::= Term(90) "__#" NUMBER => appHoles

   rule Term(100)  ::= "(" Term ")" => id
   rule Term(100)  ::= "(" TermList ")" => tuple
   rule TermList   ::= Term(1) "," Term(1) => duo
   rule TermList   ::= Term(1) "," TermList => cons

   rule Term(100)  ::= "{" Ident ":" Term "|" Term "}" => set
   rule Term(100)  ::= "{" Term "}" => squash

   rule Term(100)  ::= EMBED => literal
   rule Term(100)  ::= "e`" EMBED => id
   rule Term(100)  ::= "l`" LTerm => literal
   rule Term(100)  ::= "lv`" NUMBER => literalVariable
   rule Term(100)  ::= "lv`" EMBED => literalVariable
   rule Term(100)  ::= LOCATION Ident => short
   rule Term(100)  ::= "`" LOCATION AnyIdent => shortExplicit
   rule Term(100)  ::= LONGID => long
   rule Term(100)  ::= "`" LONGID => longExplicit
   rule Term(100)  ::= "n`" NUMBER => nat
   rule Term(100)  ::= "z`" NUMBER => integer
   rule Term(100)  ::= "z`" NNUMBER => integer
   rule Term(100)  ::= "z`" EMBED => integerEmbed
   rule Term(100)  ::= "sym`" STRING => symbol
   rule Term(100)  ::= "sym`" EMBED => symbolEmbed
   rule Term(100)  ::= "_" => evar
   rule Term(100)  ::= "__" => hole
   rule Term(100)  ::= "(" ")" => triv
   rule Term(100)  ::= "level`" Level(1) => id
   rule Term(100)  ::= "explicit`" Term(100) => explicit

   rule Term(0)    ::= "additional`" OIdents "." Term(0) => additional
   rule Term(0)    ::= "exclude`" Ident "in" Term(0) => exclude

   rule Terms      ::= => null
   rule Terms      ::= Term(100) Terms => cons

   rule Constant   ::= Longident => longConstant

   rule Constants  ::= => null
   rule Constants  ::= Constant Constants => cons

   reserved "Kind" "U" "and" "ap" "case" "else" "exists" "fn" "forall" "iexists" "iforall" "if" "in" "inl" "inr" "let" "mu" "next" "pi1" "pi2" "prev" "quotient" "rec" "seq" "then" "type" : Ident

   default Term

end


grammaron LTerm
grammaron Term
