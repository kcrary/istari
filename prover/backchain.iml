
signature BACKCHAIN =
   sig

      type tactic = Tactic.tactic
      type 'a tacticm = 'a Tactic.tacticm
      type priority = Tactic.priority

      val soPriority : ETerm.eterm -> IntroPattern.ipattern -> priority tacticm
      val soRaw : ETerm.eterm -> IntroPattern.ipattern -> tactic
      val so : ETerm.eterm -> IntroPattern.ipattern -> tactic

      val applyPriority : ETerm.eterm -> priority tacticm
      val applyRaw : ETerm.eterm -> tactic
      val apply : ETerm.eterm -> tactic

      val exploitPriority : ETerm.eterm -> IntroPattern.ipattern -> priority tacticm
      val exploitRaw : ETerm.eterm -> IntroPattern.ipattern -> tactic
      val exploit : ETerm.eterm -> IntroPattern.ipattern -> tactic

      val eexploitPriority : ETerm.eterm -> IntroPattern.ipattern -> priority tacticm
      val eexploitRaw : ETerm.eterm -> IntroPattern.ipattern -> tactic
      val eexploit : ETerm.eterm -> IntroPattern.ipattern -> tactic

      val witnessPriority : ETerm.eterm -> priority tacticm
      val witnessRaw : ETerm.eterm -> tactic
      val witness : ETerm.eterm -> tactic

   end


signature BACKCHAIN_INTERNAL =
   sig

      include BACKCHAIN



      (* soMain G M fk sk

         calls  sk (B, tac)
         where  G |- M' : B  (for some M' that is M with markers filled in)
         and    tac partially proves G |- B (marking typing subgoals Secondary)
         or     calls fk <message>
      *)
      val soMain : Judgement.context -> Term.term -> (string -> 'a) -> (Term.term * priority tacticm -> 'a) -> 'a
      

      (* exploitMain dep A tac sk

         if    tac partially proves G |- A (marking typing subgoals with true)
         then  calls sk (B, tac')
               where tac' partially proves G |- B (marking typing subgoals Secondary)
               and B arises from A using arrow elimination (or forall elim if dep=true)
      *)
      val exploitMain : bool -> Term.term -> priority tacticm -> (Term.term * priority tacticm -> 'a) -> 'a

   end


structure BackchainInternal :> BACKCHAIN_INTERNAL =
   struct

      structure J = Judgement
      structure N = Normalize
      structure T = Term
      structure D = Directory
      structure DE = DestructInternal
      structure TC = Typecheck
      structure I = Irrelevance

      open Tactic
      open CasePervasive



      (* soSpine A spine tac fk sk

         if    tac partially proves G |- A (marking typing subgoals Secondary)
         then  calls sk (B, tac')
               where tac' partially proves G |- B (marking typing subgoals Secondary)
               and B arises from using spine on A
         or    calls fk <message>
      *)
      fun soSpine a spine tac fk sk =
         (case spine of
             [] =>
                sk (a, tac)

           | T.App (T.Marker _) :: rest =>
                termCase (N.whnf a)
                /| \Prim.arrow\ ? ? =>
                   \(fnc dom cod =>
                        soSpine cod rest
                           (refine (Rule.arrowElim dom cod) >>>
                            [tac, idtacM Primary])
                           fk sk)\

                 | \Prim.tarrow\ ? ? =>
                   \(fnc dom cod =>
                        soSpine cod rest
                           (refine (Rule.tarrowElim dom cod) >>>
                            [tac, idtacM Primary])
                           fk sk)\

                 | \Prim.karrow\ ? ? =>
                   \(fnc dom cod =>
                        soSpine cod rest
                           (refine (Rule.karrowElim dom cod) >>>
                            [tac, idtacM Primary])
                           fk sk)\

                 | (\Prim.forall\ _ _ | \Prim.parametric\ _ _ | \Prim.forallfut\ _ _ | \Prim.parametricfut\ _ _) =>
                   \(fnc =>
                        fk "marker used for dependent argument")\

                 | const? @ ? =>
                   \(fnc const aspine =>
                        soSpineRetry "type error in marker application" const aspine spine tac fk sk)\

                 | _ =>
                   \(fnc =>
                        fk "type error in marker application")\
                /

           | T.App n :: rest =>
                termCase (N.whnf a)
                /| \Prim.forall\ ? (fn . ?) =>
                   \(fnc dom cod =>
                        soSpine
                           (T.Sub (cod, T.Dot (n, T.id)))
                           rest
                           (refine (Rule.forallElim dom cod n) >>>
                            [tac, idtacM Secondary])
                           fk sk)\

                 | \Prim.arrow\ ? ? =>
                   \(fnc dom cod =>
                        soSpine cod rest
                           (refine (Rule.arrowElim dom cod) >>>
                               [
                               tac,
                               I.inhabitant n >> idtacM Secondary
                               ])
                           fk sk)\

                 | \Prim.parametric\ ? (fn . ?) =>
                   \(fnc dom cod =>
                        soSpine
                           (T.Sub (cod, T.Dot (n, T.id)))
                           rest
                           (refine (Rule.parametricElim dom cod n) >>>
                            [tac, idtacM Secondary])
                           fk sk)\

                 | \Prim.forallfut\ ? (fn . ?) =>
                   \(fnc dom cod =>
                        soSpine
                           (T.Sub (cod, T.Dot (n, T.id)))
                           rest
                           (refine (Rule.forallfutElim dom cod n) >>>
                            [tac, idtacM Secondary])
                           fk sk)\

                 | \Prim.tarrow\ ? ? =>
                   \(fnc dom cod =>
                        soSpine cod rest
                           (refine (Rule.tarrowElim dom cod) >>>
                               [
                               tac,
                               I.inhabitant n >> idtacM Secondary
                               ])
                           fk sk)\
                        
                 | \Prim.karrow\ ? ? =>
                   \(fnc dom cod =>
                        soSpine cod rest
                           (refine (Rule.karrowElim dom cod) >>>
                               [
                               tac,
                               I.inhabitant n >> idtacM Secondary
                               ])
                           fk sk)\

                 | const? @ ? =>
                   \(fnc const aspine =>
                        soSpineRetry "type error in application" const aspine spine tac fk sk)\

                 | _ =>
                   \(fnc =>
                        fk "type error in application")\
                /

           | T.Pi1 :: rest =>
                termCase (N.whnf a)
                /| \Prim.exists\ ? (fn . ?) =>
                   \(fnc a1 a2 =>
                        soSpine a1 rest
                           (refine (Rule.existsElim1 a1 a2) >> tac)
                           fk sk)\

                 | \Prim.prod\ ? ? =>
                   \(fnc a1 a2 =>
                        soSpine a1 rest
                           (refine (Rule.prodElim1 a1 a2) >> tac)
                           fk sk)\

                 | const? @ ? =>
                   \(fnc const aspine =>
                        soSpineRetry "type error in #1" const aspine spine tac fk sk)\

                 | _ =>
                   \(fnc =>
                        fk "type error in #1")\
                /

           | T.Pi2 :: rest =>
                termCase (N.whnf a)
                /| \Prim.exists\ _ _ =>
                   \(fnc =>
                        fk "#2 from exists after marker")\

                 | \Prim.prod\ ? ? =>
                   \(fnc a1 a2 =>
                        soSpine a2 rest
                           (refine (Rule.prodElim2 a1 a2) >> tac)
                           fk sk)\

                 | const? @ ? =>
                   \(fnc const aspine =>
                        soSpineRetry "type error in #2" const aspine spine tac fk sk)\

                 | _ =>
                   \(fnc =>
                        fk "type error in #2")\
                /

           | T.Prev :: _ =>
                (* Cannot typecheck a prev in isolation. *)
                fk "isolated #prev")


      and soSpineRetry msg const aspine spine tac fk sk =
         if Constant.eq (const, Prim.paramapp) then
            (* If we handle paramapp by unfolding it, we see unavailables. *)
            (case aspine of
                T.App func :: T.App n :: aspine' =>
                   (case N.whnf func of
                       T.Lam (_, m) =>
                          (case I.irrelevanceApp m of
                              SOME (red1, red2) =>
                                 let
                                    val res = T.Elim (T.Lam (NONE, m), T.App n :: aspine')

                                    val tac' =
                                       (* (fn . M) N aspine' *)
                                       refine (Rule.assert'
                                                  (T.Elim (T.Const Prim.paramapp, aspine))
                                                  res)
                                       >>> [
                                           (* paramapp func N aspine' *)
                                           tac,

                                           (* paramapp func N aspine' |- ((fn . M) N aspine')[^] *)
                                           refine (Rule.whnfHypAt 0 [1])
                                           >>+
                                           (* paramapp (fn . M) N aspine' |- ((fn . M) N aspine')[^] *)
                                           refine (Rule.reduceHyp 0 red1)
                                           >>+
                                           (* P aspine' |- ((fn . M) N aspine')[^] *)
                                           refine (Rule.reduce red2)
                                           >>+
                                           (* P aspine' |- (P aspine')[^] *)
                                           refine (Rule.hypothesis 0)
                                           >> done
                                           ]
                                 in
                                    soSpine res spine tac' fk sk
                                 end

                            | NONE => fk msg)

                     | _ =>
                          fk msg)

              | _ => fk msg)
         else
            (case Constant.definition const of
                NONE =>
                   fk msg
   
              | SOME n =>
                   let
                      val tac' =
                         (* G |- N @ aspine *)
                         refine (Rule.unreduce
                                    (T.Elim (T.Const const, aspine))
                                    Reduction.unfold)
                         >>+
                         (* G |- const @ aspine *)
                         tac
                   in
                      soSpine (T.Elim (n, aspine)) spine tac' fk sk
                   end)         

                          

      (* comment in signature *)
      fun soMain ctx m fk sk =
         (case
             (try
                 Sum.INL (Infer.inferPartial ctx m (fns _ _ => idtac))
              with
                 Infer.Mismatch (_, _, msg) =>
                    Sum.INR ("inference failed: " ^ msg)

               | Infer.NotPath msg =>
                    Sum.INR ("inference failed: " ^ msg)

               | Infer.Ambiguous _ =>
                    Sum.INR ("inference failed: a prefix of the path has an evar head"))
          of
             Sum.INL (a, tac, m', remainder) =>
                (case remainder of
                    [] =>
                       sk (a,
                           I.inhabitant m >> tac >> idtacM Secondary)

                  | spine =>
                       soSpine a spine
                          (I.inhabitant m' >> tac >> idtacM Secondary)
                          fk sk)

           | Sum.INR msg => fk msg)
         


      fun priorityOrder (pri1, _) (pri2, _) =
         (case pri1 of
             Primary => true

           | _ =>
                (case pri2 of
                    Secondary => true

                  | _ => false))


      fun soPriority em pat =
         let
            do (jud, dir) = withgoal
            val m = ETerm.withdir dir em

            do (a, tac) =
               soMain (J.context jud) m fail
         in
            Reorder.reorder
               (refine (Rule.assert a (J.concl jud)) >>>
                   [
                   tac,
                   DE.destruct0 pat (idtacM Primary)
                   ])
               (Reorder.sort priorityOrder)
         end

      fun soRaw em pat = soPriority em pat >> idtac

      fun so em pat = Typecheck.withTypecheckSnd $ soPriority em pat



      (* applyMain seen A C tac fk sk

         if    tac partially proves G |- A (marking typing subgoals secondary)
         then  if    C can backchain through A
               then  calls sk (tac', seen, fk')
               where tac' partially proves G |- C (marking typing subgoals secondary)
                     tac' raises Rule.HiddenVariable if it fails due to hidden variables
                     fk' is used to backtrack
               else  calls fk seen

         Note fk and sk have codomain answer.  Seen is used to remember if a refinement
         has failed due to hidden variables.  Both tac and tac' take an extra continuation
         that is invoked if a refinement fails due to hidden variables.
      *)
      fun applyMain seen a c tac fk sk =
         if Unify.unify1 a c then
            sk (tac, seen, fk)
         else
            termCase (N.whnfHard a)
            /| \Prim.forall\ ? (fn . ?) =>
               \(fnc dom cod =>
                    let
                       val e = T.evar ()
                    in
                       applyMain seen (T.Sub (cod, T.Dot (e, T.id))) c
                          (fn hvk =>
                              refineHV (Rule.forallElim dom cod e) hvk
                              >>> [tac hvk, idtacM Secondary])
                          fk sk
                    end)\
 
             | \Prim.arrow\ ? ? =>
               \(fnc dom cod =>
                    applyMain seen cod c
                       (fn hvk =>
                           refineHV (Rule.arrowElim dom cod) hvk
                           >>> [tac hvk, idtacM Primary])
                       fk sk)\
 
             | \Prim.intersect\ ? (fn . ?) =>
               \(fnc dom cod =>
                    let
                       val e = T.evar ()
                    in
                       applyMain seen (T.Sub (cod, T.Dot (e, T.id))) c
                          (fn hvk =>
                              refineHV (Rule.intersectElim dom cod e) hvk
                              >>> [tac hvk, idtacM Secondary])
                          fk sk
                    end)\
 
             | \Prim.parametric\ ? (fn . ?) =>
               \(fnc dom cod =>
                    let
                       val e = T.evar ()
                    in
                       applyMain seen (T.Sub (cod, T.Dot (e, T.id))) c
                          (fn hvk =>
                              refineHV (Rule.parametricElim' dom cod e) hvk
                              >>> [tac hvk, idtacM Secondary])
                          fk sk
                    end)\
 
             | \Prim.forallfut\ ? (fn . ?) =>
               \(fnc dom cod =>
                    let
                       val e = T.evar ()
                    in
                       applyMain seen (T.Sub (cod, T.Dot (e, T.id))) c
                          (fn hvk =>
                              refineHV (Rule.forallfutElim dom cod e) hvk
                              >>> [tac hvk, idtacM Secondary])
                          fk sk
                    end)\
 
             | \Prim.intersectfut\ ? (fn . ?) =>
               \(fnc dom cod =>
                    let
                       val e = T.evar ()
                    in
                       applyMain seen (T.Sub (cod, T.Dot (e, T.id))) c
                          (fn hvk =>
                              refineHV (Rule.intersectfutElim dom cod e) hvk
                              >>> [tac hvk, idtacM Secondary])
                          fk sk
                    end)\
 
             | \Prim.parametricfut\ ? (fn . ?) =>
               \(fnc dom cod =>
                    let
                       val e = T.evar ()
                    in
                       applyMain seen (T.Sub (cod, T.Dot (e, T.id))) c
                          (fn hvk =>
                              refineHV (Rule.parametricfutElim' dom cod e) hvk
                              >>> [tac hvk, idtacM Secondary])
                          fk sk
                    end)\
 
             | \Prim.iforall\ ? ? (fn ? . ?) =>
               \(fnc lev dom binder cod =>
                    let
                       val e = T.evar ()
                    in
                       applyMain seen (T.Sub (cod, T.Dot (e, T.id))) c
                          (fn hvk =>
                              refineHV (Rule.iforallElim cod lev dom e) hvk
                              >>> [
                                  let
                                     do (_, dir) = withgoal
                                  in
                                     chdir (D.bindVary dir binder)
                                     >> idtacM Secondary
                                  end,
      
                                  tac hvk,
      
                                  idtacM Secondary
                                  ])
                          fk sk
                    end)\

             | \Prim.foralltp\ (fn ? . ?) =>
               \(fnc binder cod =>
                    let
                       val e = T.evar ()
                    in
                       applyMain seen (T.Sub (cod, T.Dot (e, T.id))) c
                          (fn hvk =>
                              refineHV (Rule.foralltpElim cod e) hvk
                              >>> [
                                  let
                                     do (_, dir) = withgoal
                                  in
                                     chdir (D.bindVary dir binder)
                                     >> idtacM Secondary
                                  end,
      
                                  tac hvk,
      
                                  idtacM Secondary
                                  ])
                          fk sk
                    end)\

             | \Prim.tarrow\ ? ? =>
               \(fnc dom cod =>
                    applyMain seen cod c
                       (fn hvk =>
                           refineHV (Rule.tarrowElim dom cod) hvk
                           >>> [tac hvk, idtacM Primary])
                       fk sk)\
 
             | \Prim.karrow\ ? ? =>
               \(fnc dom cod =>
                    applyMain seen cod c
                       (fn hvk =>
                           refineHV (Rule.karrowElim dom cod) hvk
                           >>> [tac hvk, idtacM Primary])
                       fk sk)\
 
             | \Prim.prod\ ? ? =>
               \(fnc a1 a2 =>
                    applyMain seen a1 c
                       (fn hvk =>
                           refineHV (Rule.prodElim1 a1 a2) hvk >>+ tac hvk)
                       (fn seen' =>
                           applyMain seen' a2 c
                           (fn hvk => refineHV (Rule.prodElim2 a1 a2) hvk >>+ tac hvk)
                           fk sk)
                       sk)\
 
             | _ => \(fnc => fk seen)\
            /

      fun applyPriority em =
         let
            do (jud, dir) = withgoal
            val m = ETerm.withdir dir em

            do (a, atac) =
               soMain (J.context jud) m
               (fn msg => fail msg)

            (* atac partially proves G |- A *)

            val c = J.concl jud

            val mark = Trail.mark ()

            fun tac goal fk sk =
               applyMain false a c
                  (fn _ => atac)
                  (fn seen => 
                      if seen then
                         fk "lemma does not match goal (matches rejected for hidden variables)"
                      else
                         fk "lemma does not match goal")
                  (fn (ctac, seen, fk') =>
                      let
                         fun fk'' _ = (Trail.rewind mark; fk' seen)
                         fun hvk () = (Trail.rewind mark; fk' true)
                      in
                         ctac hvk goal fk'' sk
                      end)
         in
            Reorder.reorder
               (* applyMain has to return answer *)
               tac
               (Reorder.sort priorityOrder)
         end

      fun applyRaw em = applyPriority em >> idtac

      fun apply em = Typecheck.withTypecheckSnd $ applyPriority em



      (* comment in signature *)
      fun exploitMain dep a tac sk =
         termCase (N.whnfHard a)
         /| \Prim.arrow\ ? ? =>
            \(fnc dom cod =>
                 exploitMain dep cod
                 (refine (Rule.arrowElim dom cod)
                  >>> [tac, idtacM Primary])
                 sk)\

          | \Prim.tarrow\ ? ? =>
            \(fnc dom cod =>
                 exploitMain dep cod
                 (refine (Rule.tarrowElim dom cod)
                  >>> [tac, idtacM Primary])
                 sk)\

          | \Prim.karrow\ ? ? =>
            \(fnc dom cod =>
                 exploitMain dep cod
                 (refine (Rule.karrowElim dom cod)
                  >>> [tac, idtacM Primary])
                 sk)\

          | _ =!>
            \(fnc =>
                 if dep then
                    raise Case.Backtrack
                 else
                    sk (a, tac))\

          | \Prim.forall\ ? (fn . ?) =>
            \(fnc dom cod =>
                 let
                    val e = T.evar ()
                 in
                    exploitMain dep (T.Sub (cod, T.Dot (e, T.id)))
                    (refine (Rule.forallElim dom cod e)
                     >>> [tac, idtacM Secondary])
                    sk
                 end)\

          | \Prim.intersect\ ? (fn . ?) =>
            \(fnc dom cod =>
                 let
                    val e = T.evar ()
                 in
                    exploitMain dep (T.Sub (cod, T.Dot (e, T.id)))
                    (refine (Rule.intersectElim dom cod e)
                     >>> [tac, idtacM Secondary])
                    sk
                 end)\

          | \Prim.forallfut\ ? (fn . ?) =>
            \(fnc dom cod =>
                 let
                    val e = T.evar ()
                 in
                    exploitMain dep (T.Sub (cod, T.Dot (e, T.id)))
                    (refine (Rule.forallfutElim dom cod e)
                     >>> [tac, idtacM Secondary])
                    sk
                 end)\

          | \Prim.intersectfut\ ? (fn . ?) =>
            \(fnc dom cod =>
                 let
                    val e = T.evar ()
                 in
                    exploitMain dep (T.Sub (cod, T.Dot (e, T.id)))
                    (refine (Rule.intersectfutElim dom cod e)
                     >>> [tac, idtacM Secondary])
                    sk
                 end)\

          | \Prim.parametricfut\ ? (fn . ?) =>
            \(fnc dom cod =>
                 let
                    val e = T.evar ()
                 in
                    exploitMain dep (T.Sub (cod, T.Dot (e, T.id)))
                    (refine (Rule.parametricfutElim dom cod e)
                     >>> [tac, idtacM Secondary])
                    sk
                 end)\

          | \Prim.iforall\ ? ? (fn ? . ?) =>
            \(fnc lev dom binder cod =>
                 let
                    val e = T.evar ()
                 in
                    exploitMain dep (T.Sub (cod, T.Dot (e, T.id)))
                    (refine (Rule.iforallElim cod lev dom e)
                     >>> [
                         let
                            do (_, dir) = withgoal
                         in
                            chdir (D.bindVary dir binder)
                            >> idtacM Secondary
                         end,

                         tac,

                         idtacM Secondary
                         ])
                    sk
                 end)\

          | \Prim.foralltp\ (fn ? . ?) =>
            \(fnc binder cod =>
                 let
                    val e = T.evar ()
                 in
                    exploitMain dep (T.Sub (cod, T.Dot (e, T.id)))
                    (refine (Rule.foralltpElim cod e)
                     >>> [
                         let
                            do (_, dir) = withgoal
                         in
                            chdir (D.bindVary dir binder)
                            >> idtacM Secondary
                         end,

                         tac,

                         idtacM Secondary
                         ])
                    sk
                 end)\

          | _ =>
            \(fnc =>
                 sk (a, tac))\
         /


      fun exploitGen dep em pat =
         let
            do (jud, dir) = withgoal
            val m = ETerm.withdir dir em

            do (a, atac) =
               soMain (J.context jud) m
               (fn "" => fail "type inference failed"
                 | msg => fail ("type inference failed: " ^ msg))

            (* atac partially proves G |- A *)

            do (b, btac) = exploitMain dep a atac

            (* btac partially proves G |- B *)
         in
            Reorder.reorder
               (refine (Rule.assert b (J.concl jud)) >>>
                   [
                   btac,
                   DE.destruct0 pat (idtacM Primary)
                   ])
               (Reorder.sort priorityOrder)
         end

      fun exploitPriority em pat = exploitGen false em pat
         
      fun eexploitPriority em pat = exploitGen true em pat

      fun exploitRaw em pat = exploitGen false em pat >> idtac

      fun eexploitRaw em pat = exploitGen true em pat >> idtac

      fun exploit em pat = Typecheck.withTypecheckSnd $ exploitGen false em pat

      fun eexploit em pat = Typecheck.withTypecheckSnd $ exploitGen true em pat



      
      fun witnessPriority em =
         let
            do (jud, dir) = withgoal
            val m = ETerm.withdir dir em
            
            do (a, atac) =
               soMain (J.context jud) m
               (fn "" => fail "type inference failed"
                 | msg => fail ("type inference failed: " ^ msg))

            (* atac partially proves G |- A *)
         in
            (* checking the match ourselves allows us to produce a better error message *)
            if Unify.unify1 a (J.concl jud) then
               Reorder.reorder
                  atac
                  (Reorder.sort priorityOrder)
            else
               fail "witness does not match goal"
         end

      fun witnessRaw em = witnessPriority em >> idtac

      fun witness em = Typecheck.withTypecheckSnd $ witnessPriority em

   end


structure Backchain :> BACKCHAIN = BackchainInternal
