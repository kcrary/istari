
signature DEBUGGER =
   sig

      val start : (unit -> unit) -> unit

      val step : unit -> unit
      val goto : int -> unit
      val run : unit -> unit
      val break : unit -> unit

      val last : Tactic.goal ref

   end



structure Debugger :> DEBUGGER =
   struct

      structure T = TacticInternal

      val last = ref (Judgement.make Seq.empty Term.Triv, Directory.empty)

      val bogusCont : unit Cont.cont =
         Cont.callcc (fn k => (
                              Cont.callcc (fn k' => Cont.throw k k') : unit;
                              raise (Fail "don't throw to this")
                              ))

      val count = ref 0
      val desired = ref 0
      val breakpoint : unit Cont.cont ref = ref bogusCont
      val resume : unit Cont.cont option ref = ref NONE

      fun interrupt rule goal =
         Cont.callcc
         (fn ktac =>
             (
             count := !count + 1;

             if !count = !desired then
                (
                resume := SOME ktac;
                last := goal;
                print "========================================\n";
                Show.showGoal goal;
                print "----------------------------------------\n";
                print "break ";
                print (Int.toString (!count));
                print "\n[applying ";
                print (Rule.name rule);
                print "]\n";
                Cont.throw (!breakpoint) ()
                )
             else
                Cont.throw ktac ()
             ))

      fun break () = 
         (
         desired := !count + 1;
         T.interrupt := interrupt
         )

      fun start f =
         (
         resume := NONE;

         Cont.callcc
            (fn kdebug =>
                (
                breakpoint := kdebug;
                T.interrupt := interrupt;
                count := 0;
                desired := 1;
                f ();
                Prover.show ();
                print "[done]\n";
                
                (* SML doesn't like you to re-enter an old top-level interaction,
                   so throw back to whoever went last.
                *)
                Cont.throw (!breakpoint) ()
                ));

         T.interrupt := (fns _ _ => ())
         )

      fun goto n =
         (case !resume of
             NONE =>
                print "No tactic underway.\n"

           | SOME ktac =>
                (
                resume := NONE;
                desired := n;

                Cont.callcc
                   (fn kdebug =>
                       (
                       breakpoint := kdebug;
                       T.interrupt := interrupt;
                       Cont.throw ktac ()
                       ));

                T.interrupt := (fns _ _ => ())
                ))

      fun step () = goto (!count + 1)

      fun run () =
         (case !resume of
             NONE =>
                print "No tactic underway.\n"

           | SOME ktac =>
                (
                resume := NONE;

                Cont.callcc
                   (fn kdebug =>
                       (
                       breakpoint := kdebug;
                       T.interrupt := (fns _ _ => ());
                       Cont.throw ktac ()
                       ))
                ))

   end


signature SHOW_REDUCTION =
   sig

      val show : Reduction.reduction -> unit

   end

structure ShowReduction :> SHOW_REDUCTION =
   struct

      structure D = ReductionInternal.Detail
      structure PP = PrettyPrint

      val indent = 0
      val width = 80

      
      fun appList pp f l =
         (case l of
             [] => ()
             
           | [x] => f x

           | h :: t =>
                (
                f h;
                PP.print pp ",";
                PP.break pp 1;
                appList pp f t
                ))


      fun showMain pp red =
         (case red of
             D.Trans [] =>
                PP.print pp "refl"

           | D.Trans l =>
                (
                PP.print pp "Trans [";
                PP.openBox pp PP.Consistent 0;
                appList pp (showMain pp) l;
                PP.closeBox pp;
                PP.print pp "]"
                )

           | D.Unfold =>
                PP.print pp "unfold"

           | D.Beta (SOME n) =>
                (
                PP.print pp "beta ";
                PP.print pp (Int.toString n)
                )

           | D.Beta NONE =>
                PP.print pp "betas"

           | D.Within (l, r) =>
                (
                PP.print pp "within [";
                PP.openBox pp PP.Consistent 0;
                appList pp (fn i => PP.print pp (Int.toString i)) l;
                PP.closeBox pp;
                PP.print pp "] (";
                showMain pp r;
                PP.print pp ")"
                )

           | D.Compat l =>
                (
                PP.print pp "compat [";
                PP.openBox pp PP.Consistent 0;
                appList pp (showMain pp);
                PP.print pp "]";
                PP.closeBox pp
                )

           | D.Nativered =>
                PP.print pp "native"

           | D.ReflNative =>
                PP.print pp "reflNative"

           | D.Seq =>
                PP.print pp "seq"

           | D.User1 (const, i, m) =>
                (
                PP.print pp "user1 (";
                PP.print pp (Namespace.toString const);
                PP.print pp ", ";
                PP.print pp (Int.toString i);
                PP.print pp ", ";
                PP.openBox pp PP.Consistent 0;
                Show.showLiteralPP pp m;
                PP.closeBox pp;
                PP.print pp ")"
                )

           | D.User2 (const1, i, j, const2, k, m) =>
                (
                PP.print pp "user2 (";
                PP.openBox pp PP.Freestyle 0;
                PP.print pp (Namespace.toString const1);
                PP.print pp ", ";
                PP.print pp (Int.toString i);
                PP.print pp ", ";
                PP.print pp (Int.toString j);
                PP.print pp ", ";
                PP.print pp (Namespace.toString const2);
                PP.print pp ", ";
                PP.print pp (Int.toString k);
                PP.print pp ",";
                PP.break pp 1;
                PP.openBox pp PP.Consistent 0;
                Show.showLiteralPP pp m;
                PP.closeBox pp;
                PP.closeBox pp;
                PP.print pp ")"
                ))

      fun show red =
         let
            val pp = PP.makeStreamIndent TextIO.stdOut width indent
         in
            PP.openBox pp PP.Consistent indent;

            showMain pp (ReductionInternal.detail red);

            PP.closeBox pp;
            PP.flush pp;
            print "\n"
         end

   end