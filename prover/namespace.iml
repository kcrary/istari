
signature NAMESPACE =
   sig

      type constant = Constant.constant
      type symbol = Symbol.symbol
      type address = symbol list  (* nonempty *)

      (* raised if a term to be defined is open or not ground *)
      exception Unclean of Term.problem * Term.term

      (* raised for any other error *)
      exception Namespace of string

      val declare : symbol -> Term.term option -> constant

      val resolve : address -> constant
      val resolveOpt : address -> constant option

      val name : constant -> address
      val lastname : constant -> symbol  (* last symbol in the name *)
      val toString : constant -> string
      val dump : address -> (address * constant * Term.term option) list

      val moduleExists : address -> bool
      val currentModule : unit -> address

      val beginModule : string -> unit
      val beginModuleSym : symbol -> unit
      val endModule : unit -> unit
      val openModule : address -> unit

      val alias : symbol -> constant -> unit
      val aliasModule : symbol -> address -> unit
      val aliasExport : symbol -> constant -> unit  (* an alias to be exported *)

   end


signature NAMESPACE_INTERNAL =
   sig

      include NAMESPACE


      (* reify sym v

         If     J is |- A  and  v validates J
         then   declares a constant (const) using v's extract as its definition
                (if extracts are supported), and sym as its name
         and    returns (const, J', v')
         where  J' is |- const : A  and  v' validates J'
      *)
      val reify : Symbol.symbol -> Judgement.judgement -> Refine.validation -> Term.constant * Judgement.judgement * Refine.validation

      
      (* Apply to all exportable namespace entries. *)
      val appExport : (address * constant -> unit) -> unit

      (* Remove module from exportable entities. *)
      val makeModuleLocal : symbol -> unit

   end


structure NamespaceInternal :> NAMESPACE_INTERNAL =
   struct

      structure C = ConstantInternal
      structure D = SymbolDict
      structure R = CheckpointedRef
      structure T = Term

      structure CD = RedBlackDict (structure Key = Constant.Ordered)

      type constant = C.constant
      type symbol = Symbol.symbol
      type address = symbol list

      exception Namespace of string

      fun signalError str = raise (Namespace (String.concat ["Error: ", str, ".\n"]))

      val () = 
         Handler.customHandler
         (fn Namespace str => (print str; true)
           | _ => false)


      val zilch = Symbol.fromValue ""

      datatype group = G of constant D.dict * group D.dict
      
      val empty = G (D.empty, D.empty)

      datatype state =
         ST of
         {
         (* the current module's name (this field is meaningless at the top level) *)
         current : symbol,

         (* the full path to the current module, reversed *)
         path : symbol list,

         (* everything in scope *)
         env : group,               

         (* the current working module: the contents of this will appear in the module when
            the module is closed, and at the top level the contents will be exported
         *)
         working : group,

         (* lookup table to give names to constants, returns address in reverse,
            the resulting address cannot be empty
         *)
         reverse : symbol list CD.dict
         }
           
      val initialEnv =
         G (List.foldl
               (fns (sym, const) d => D.insert d sym const)
               D.empty
               PrimInternal.primitives,
            D.empty)

      val initialReverse =
         List.foldl
            (fns (sym, const) d => CD.insert d const [sym])
            CD.empty
            PrimInternal.primitives

      val theState : state R.cref =
         R.new $
         ST {
            current = zilch,
            path = [],
            env = initialEnv,
            working = empty,
            reverse = initialReverse
            }
            
      val theStack : state list R.cref = R.new []



      (* the handler is in Prover *)
      exception Unclean of Term.problem * Term.term

      fun declare sym def =
         let
            val ST { current, path, env = G (envConsts, envMods), working = G (workingConsts, workingMods), reverse } = R.deref theState

            val opac =
               (case def of
                   NONE => C.OPAQUE

                 | SOME _ => C.HARD)
         in
            if D.member workingConsts sym then
               signalError (String.concat
                               [
                               "the name ",
                               Symbol.toValue sym,
                               " is already used in the current module"
                               ])
            else
               let
                  val const = 
                     try
                        C.declare false def (sym :: path) opac
                     with
                        ConstantInternal.DeclareUnclean prob =>
                           (case def of
                               NONE => raise (Fail "impossible")

                             | SOME m => raise (Unclean (prob, m)))
               in
                  R.assign theState
                     (ST {
                         current = current,
                         path = path,
                         env = G (D.insert envConsts sym const, envMods),
                         working = G (D.insert workingConsts sym const, workingMods),
                         reverse = CD.insert reverse const [sym]
                         });

                  const
               end
         end



      fun reify sym jud v =
         let
            val ST { current, path, env = G (envConsts, envMods), working = G (workingConsts, workingMods), reverse } = R.deref theState
         in
            if D.member workingConsts sym then
               signalError (String.concat
                               [
                               "the name ",
                               Symbol.toValue sym,
                               " is already used in the current module"
                               ])
            else
               let
                  val result as (const, _, _) = Refine.reify jud v (sym :: path)
               in
                  R.assign theState
                     (ST {
                         current = current,
                         path = path,
                         env = G (D.insert envConsts sym const, envMods),
                         working = G (D.insert workingConsts sym const, workingMods),
                         reverse = CD.insert reverse const [sym]
                         });

                  result
               end
         end




      fun resolveMain (group as G (_, d)) address =
         (case address of
             nil => signalError "empty address"

           | [sym] => SOME (group, sym)

           | sym :: rest =>
                (case D.find d sym of
                    NONE => NONE

                  | SOME group' => resolveMain group' rest))

      fun resolveMod group address =
         (case resolveMain group address of
             NONE => NONE

           | SOME (G (_, d), sym) => D.find d sym)

      fun resolveConst group address =
         (case resolveMain group address of
             NONE => NONE

           | SOME (G (d, _), sym) => D.find d sym)



      fun resolveOpt addr =
         let
            val ST { env } = R.deref theState
         in
            resolveConst env addr
         end

      fun resolve addr =
         (case resolveOpt addr of
             SOME const => const

           | NONE =>
                signalError (String.concat
                                [
                                "no constant ",
                                String.concatWith "." (map Symbol.toValue addr),
                                " exists"
                                ]))



      val question = Symbol.fromValue "?"

      fun name const =
         let
            val ST { reverse } = R.deref theState
         in
            (case CD.find reverse const of
                NONE => question :: List.rev (C.path const)
                
              | SOME name => List.rev name)
         end

      fun lastname const =
         let
            val ST { reverse } = R.deref theState
         in
            (case CD.find reverse const of
                NONE => 
                   (case C.path const of
                       [] =>
                          (* This shouldn't happen unless the user is misusing internal operations. *)
                          raise (Fail "empty path in constant metadata")

                     | name :: _ => name)
                
              | SOME [] => raise (Fail "invariant")

              | SOME (name :: _) => name)
         end

      fun toString const = String.concatWith "." (map Symbol.toValue (name const))



      fun dumpGroup (G (defs, mods)) path acc =
         let
            val acc =
               D.foldl
                  (fn (sym, md, acc) => dumpGroup md (sym :: path) acc)
                  acc
                  mods

            val acc =
               D.foldl
                  (fn (sym, const, acc) =>
                      (List.rev (sym :: path), const, C.definition const) :: acc)
                  acc
                  defs
         in
            acc
         end

      fun dump address =
         let
            val ST { env } = R.deref theState

            val group =
               (case address of
                   [] => env

                 | _ =>
                      (case resolveMod env address of
                          SOME group => group

                        | NONE => signalError "no such address"))
         in
            dumpGroup group [] []
         end
         


      fun moduleExists address =
         let
            val ST { env } = R.deref theState
         in
            (case resolveMod env address of
                SOME _ => true

              | NONE => false)
         end

      fun currentModule () =
         let
            val ST { path } = R.deref theState
         in
            List.rev path
         end



      fun beginModuleSym sym =
         let
            val st as ST { current, path, env, working = working as G (_, workingMods), reverse } = R.deref theState
         in
            if Symbol.eq (sym, zilch) then
               signalError "bad module name"

            else if D.member workingMods sym then
               signalError (String.concat
                               [
                               "the module name ",
                               Symbol.toValue sym,
                               " is already used in the current module"
                               ])

            else
               (
               R.assign theStack (st :: R.deref theStack);
               R.assign theState
                  (ST {
                      current = sym,
                      path = sym :: path,
                      env = env,
                      working = empty,
                      reverse = reverse
                      })
               )
         end

      fun beginModule str = beginModuleSym (Symbol.fromValue str)

      

      (* populate prefer reverse revaddr group

         Populate the reverse-lookup table.
         prefer: true if new names should be preferred to the old
      *)
      fun populate prefer reverse path (G (consts, mods)) =
         let
            val reverse =
               D.foldl 
                  (fn (name, group, reverse) =>
                      populate prefer reverse (name :: path) group)
                  reverse
                  mods

            val reverse =
               D.foldl
                  (fn (name, const, reverse) =>
                      let
                         val newpath = name :: path
                      in
                         CD.insertMerge reverse const newpath
                            (fn oldpath =>
                                if prefer then
                                   newpath
                                else
                                   oldpath)
                      end)
                  reverse
                  consts
         in
            reverse
         end



      fun endModuleMain closingName closingGroup state =
         let
            val ST { current, path, env = G (envConst, envMod), working = G (workingConst, workingMod), reverse } = state

            val envMod' = D.insert envMod closingName closingGroup
            val workingMod' = D.insert workingMod closingName closingGroup
            val reverse' = populate false reverse [closingName] closingGroup
         in
            ST { 
               current = current,
               path = path,
               env = G (envConst, envMod'),
               working = G (workingConst, workingMod'),
               reverse = reverse'
               }
         end

      fun endModule () =
         (case R.deref theStack of
             [] =>
               signalError "not in module"

           | state :: rest =>
                let
                   val ST { current=closingName, working=closingGroup } = R.deref theState

                   val state' = endModuleMain closingName closingGroup state
                in
                   R.assign theStack rest;
                   R.assign theState state'
                end)



      (* always prefers the latter *)
      fun union (G (consts1, mods1)) (G (consts2, mods2)) =
         G (D.union consts1 consts2 (fn (_, _, x) => x),
            D.union mods1 mods2 (fn (_, _, x) => x))



      fun openModule addr =
         let
            val ST { current, path, env, working, reverse } = R.deref theState
         in
            (case resolveMod env addr of
                NONE =>
                   signalError (String.concat
                                   [
                                   "module ",
                                   String.concatWith "." (map Symbol.toValue addr),
                                   " does not exist"
                                   ])

              | SOME group =>
                   let
                      val env' = union env group
                      val reverse' = populate true reverse [] group
                   in
                      R.assign theState
                         (ST {
                             current = current,
                             path = path,
                             env = env',
                             working = working,
                             reverse = reverse'
                             })
                   end)
         end



      fun alias sym const =
         let
            val ST { current, path, env = G (envConsts, envMods), working = working as G (workingConsts, _), reverse } = R.deref theState
         in
            if D.member workingConsts sym then
               signalError (String.concat
                               [
                               "the name ",
                               Symbol.toValue sym,
                               " is already used in the current module"
                               ])
            else
               R.assign theState
                  (ST {
                      current = current,
                      path = path,
                      env = G (D.insert envConsts sym const, envMods),
                      working = working,
                      reverse = CD.insert reverse const [sym],
                      })
         end



      fun aliasExport sym const =
         let
            val ST { current, path, env = G (envConsts, envMods), working = working as G (workingConsts, workingMods), reverse } = R.deref theState
         in
            if D.member workingConsts sym then
               signalError (String.concat
                               [
                               "the name ",
                               Symbol.toValue sym,
                               " is already used in the current module"
                               ])
            else
               R.assign theState
                  (ST {
                      current = current,
                      path = path,
                      env = G (D.insert envConsts sym const, envMods),
                      working = G (D.insert workingConsts sym const, workingMods),
                      reverse = CD.insert reverse const [sym]
                      })
         end



      fun aliasModule sym addr =
         let
            val ST { current, path, env = env as G (envConsts, envMods), working = working as G (_, workingMods), reverse } = R.deref theState
         in
            (case resolveMod env addr of
                NONE =>
                   signalError (String.concat
                                   [
                                   "module ",
                                   String.concatWith "." (map Symbol.toValue addr),
                                   " does not exist"
                                   ])

              | SOME group =>
                   if D.member workingMods sym then
                      signalError (String.concat
                                      [
                                      "the module name ",
                                      Symbol.toValue sym,
                                      " is already used in the current module"
                                      ])
                   else
                      R.assign theState
                         (ST {
                             current = current,
                             path = path,
                             env = G (envConsts, D.insert envMods sym group),
                             working = working,
                             reverse = populate true reverse [sym] group
                             }))
         end



      (* closeStack f g l

         if    l = [state]
         then  returns  f state

         if    l = stack @ [state]
         then  returns  g name group state
               where    name is the oldest module name in stack
               and      group is the group obtained by closing all of stack
      *)

      fun closeStackLoop g name group l =
         (case l of
             [] =>
                raise (Fail "invariant")

           | [state] =>
                g name group state

           | ST { current, working = G (consts, mods) } :: rest =>
                closeStackLoop g current (G (consts, D.insert mods name group)) rest)

      fun closeStack f g l =
         (case l of
             [] =>
                raise (Fail "precondition")

           | [state] => f state

           | ST { current, working } :: rest =>
                closeStackLoop g current working rest)
                   
             
         
      fun endAllModules () =
         let
            val newstate =
               closeStack 
                  (fn st => st)
                  endModuleMain
                  (R.deref theState :: R.deref theStack)
         in
            R.assign theState newstate;
            R.assign theStack []
         end



      fun appGroup f (G (defs, mods)) path =
         (
         D.app
            (fn (sym, md) => appGroup f md (sym :: path))
            mods;

         D.app
            (fn (sym, const) => f (List.rev (sym :: path), const))
            defs
         )

      fun appExport f =
         let
            val group =
               closeStack
                  (fn (ST { working }) => working)
                  (fns name group (ST { working = G (consts, mods) }) =>
                      G (consts, D.insert mods name group))
                  (R.deref theState :: R.deref theStack)
         in
            appGroup f group []
         end



      fun makeModuleLocal sym =
         let
            val ST { current, path, env, working = G (workingConst, workingMod), reverse } = R.deref theState
         in
            if D.member workingMod sym then
               R.assign theState
                  (ST {
                      current = current,
                      path = path,
                      env = env,
                      reverse = reverse,
                      working = G (workingConst, D.remove workingMod sym)
                      })
            else
               raise (Fail "module absent in makeModuleLocal")
         end

   end


structure Namespace :> NAMESPACE = NamespaceInternal
