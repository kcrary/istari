
signature NAMESPACE =
   sig

      type constant = Constant.constant
      type symbol = Symbol.symbol
      type address = symbol list  (* nonempty *)

      (* raised if a term to be defined is open or not ground *)
      exception Unclean of Term.problem * Term.term

      (* raised for any other error *)
      exception Namespace of string

      val declare : symbol -> Term.term option -> constant

      val resolve : address -> constant
      val resolveOpt : address -> constant option

      val definable : symbol -> bool

      val name : constant -> address
      val lastname : constant -> symbol  (* last symbol in the name *)
      val toString : constant -> string
      val dump : address -> (address * constant * Term.term option) list

      val moduleExists : address -> bool
      val currentModule : unit -> address

      val beginModule : string -> unit
      val beginModuleSym : symbol -> unit
      val endModule : unit -> unit
      val openModule : address -> unit

      val alias : symbol -> constant -> unit
      val aliasModule : symbol -> address -> unit
      val aliasExport : symbol -> constant -> unit  (* an alias to be exported *)

      (* Remove module from exportable entities. *)
      val hideModule : symbol -> unit

      (* Resolve address as if all modules were closed. *)
      val resolveGlobal : address -> constant
      val resolveGlobalOpt : address -> constant option

   end


signature NAMESPACE_INTERNAL =
   sig

      include NAMESPACE


      (* reify sym J v

         If     J is |- A  and  v validates J
         then   declares a constant (const) using v's extract as its definition
                (if extracts are supported), and sym as its name
         and    returns (const, J', v')
         where  J' is |- const : A  and  v' validates J'
      *)
      val reify : Symbol.symbol -> Judgement.judgement -> Refine.validation -> Term.constant * Judgement.judgement * Refine.validation

      
      (* Apply to all exportable namespace entries. *)
      val appExport : (address * constant -> unit) -> unit

   end


structure NamespaceInternal :> NAMESPACE_INTERNAL =
   struct

      structure C = ConstantInternal
      structure D = SymbolDict
      structure R = CheckpointedRef
      structure T = Term

      structure CD = RedBlackDict (structure Key = Constant.Ordered)

      type constant = C.constant
      type symbol = Symbol.symbol
      type address = symbol list

      exception Namespace of string

      fun signalError str = raise (Namespace (String.concat ["Error: ", str, ".\n"]))

      fun signalErrorOverlap sym =
         signalError (String.concat
                         [
                         "the name ",
                         Symbol.toValue sym,
                         " is already used in the current module"
                         ])

      val () = 
         Handler.customHandler
         (fn Namespace str => (print str; true)
           | _ => false)


      val zilch = Symbol.fromValue ""

      datatype group = G of constant D.dict * group D.dict
      
      val empty = G (D.empty, D.empty)

      datatype state =
         ST of
         {
         (* the current module's name (this field is meaningless at the top level) *)
         current : symbol,

         (* the full path to the current module, reversed *)
         path : symbol list,

         (* everything in scope *)
         env : group,               

         (* the current working module: the contents of this will appear in the module when
            the module is closed, and at the top level the contents will be exported
         *)
         working : group,

         (* lookup table to give names to constants

            It maps a constant to a path, and a lists of paths.  All the paths are nonempty
            and given in reverse.  The first path is a good path to the constant.  The list
            is a history of old paths that might map to the constant, but must be checked.
         *)
         reverse : (symbol list * symbol list list) CD.dict
         }
           
      val initialEnv =
         G (List.foldl
               (fns (sym, const) d => D.insert d sym const)
               D.empty
               PrimInternal.primitives,
            D.empty)

      val initialReverse : (symbol list * symbol list list) CD.dict =
         List.foldl
            (fns (sym, const) d => CD.insert d const ([sym], []))
            CD.empty
            PrimInternal.primitives

      val theState : state R.cref =
         R.new $
         ST {
            current = zilch,
            path = [],
            env = initialEnv,
            working = empty,
            reverse = initialReverse
            }
            
      val theStack : state list R.cref = R.new []



      (* the handler is in Prover *)
      exception Unclean of Term.problem * Term.term



      fun resolveMain (group as G (_, d)) address =
         (case address of
             nil => signalError "empty address"

           | [sym] => SOME (group, sym)

           | sym :: rest =>
                (case D.find d sym of
                    NONE => NONE

                  | SOME group' => resolveMain group' rest))

      fun resolveMod group address =
         (case resolveMain group address of
             NONE => NONE

           | SOME (G (_, d), sym) => D.find d sym)

      fun resolveConst group address =
         (case resolveMain group address of
             NONE => NONE

           | SOME (G (d, _), sym) => D.find d sym)



      fun resolveOpt addr =
         let
            val ST { env } = R.deref theState
         in
            resolveConst env addr
         end

      fun resolve addr =
         (case resolveOpt addr of
             SOME const => const

           | NONE =>
                signalError (String.concat
                                [
                                "no constant ",
                                String.concatWith "." (map Symbol.toValue addr),
                                " exists"
                                ]))


      fun definable sym =
         let
            val ST { working = G (workingConsts, _) } = R.deref theState
         in
            not (D.member workingConsts sym)
         end



      val question = Symbol.fromValue "?"

      fun name const =
         let
            val ST { reverse } = R.deref theState
         in
            (case CD.find reverse const of
                NONE => question :: List.rev (C.path const)
                
              | SOME (name, _) => List.rev name)
         end

      fun lastname const =
         let
            val ST { reverse } = R.deref theState
         in
            (case CD.find reverse const of
                NONE => 
                   (case C.path const of
                       [] =>
                          (* This shouldn't happen unless the user is misusing internal operations. *)
                          raise (Fail "empty path in constant metadata")

                     | name :: _ => name)
                
              | SOME ([], _) => raise (Fail "invariant")

              | SOME ((name :: _), _) => name)
         end

      fun toString const = String.concatWith "." (map Symbol.toValue (name const))



      (* the mapping for const in reverse is probably broken, fix it *)
      fun correctReverse env const reverse =
         (case CD.find reverse const of
             NONE =>
                reverse

           | SOME (path, history) =>
                let
                   fun loop l =
                      (case l of
                          [] => NONE
       
                        | path :: rest =>
                             (case resolveConst env (List.rev path) of
                                 NONE =>
                                    loop rest
       
                               | SOME const' =>
                                    if Constant.eq (const, const') then
                                       SOME (path, rest)
                                    else
                                       loop rest))
                in
                   (case loop (path :: history) of
                       NONE =>
                          CD.remove reverse const
       
                     | SOME (path, rest) =>
                          CD.insert reverse const (path, rest))
                end)


      (* the mappings in the group are probably broken, fix them *)
      fun correctReverseGroup env (G (consts, mods)) oldReverse =
         D.foldl
            (fn (_, group, reverse) => correctReverseGroup env group reverse)
            (D.foldl
                (fn (_, const, reverse) => correctReverse env const reverse)
                oldReverse
                consts)
            mods



      fun insertEnvConst (G (envConsts, envMods)) reverse sym const =
         let
            val (old, _, envConsts') =
               D.operate envConsts sym (fn () => const) (fn _ => const)
               
            val env' = G (envConsts', envMods)

            val reverse' =
               (case old of
                   NONE =>
                      reverse

                 | SOME oldconst =>
                      correctReverse env' oldconst reverse)
         in
            (env', reverse')
         end


      fun insertEnvMod (G (envConsts, envMods)) reverse sym group =
         let
            val (old, _, envMods') =
               D.operate envMods sym (fn () => group) (fn _ => group)

            val env' = G (envConsts, envMods')

            val reverse' =
               (case old of
                   NONE =>
                      reverse

                 | SOME oldgroup =>
                      correctReverseGroup env' oldgroup reverse)
         in
            (env', reverse')
         end



      fun declare sym def =
         let
            val ST { current, path, env, working = G (workingConsts, workingMods), reverse } = R.deref theState

            val opac =
               (case def of
                   NONE => C.OPAQUE

                 | SOME _ => C.HARD)
         in
            if D.member workingConsts sym then
               signalErrorOverlap sym
            else
               let
                  val const = 
                     try
                        C.declare false def (sym :: path) opac
                     with
                        ConstantInternal.DeclareUnclean prob =>
                           (case def of
                               NONE => raise (Fail "impossible")

                             | SOME m => raise (Unclean (prob, m)))

                  val (env', reverse') = insertEnvConst env reverse sym const
               in
                  R.assign theState
                     (ST {
                         current = current,
                         path = path,
                         env = env',
                         working = G (D.insert workingConsts sym const, workingMods),
                         reverse = CD.insert reverse' const ([sym], [])
                         });

                  const
               end
         end



      fun reify sym jud v =
         let
            val ST { current, path, env, working = G (workingConsts, workingMods), reverse } = R.deref theState
         in
            if D.member workingConsts sym then
               signalErrorOverlap sym
            else
               let
                  val result as (const, _, _) = Refine.reify jud v (sym :: path)

                  val (env', reverse') = insertEnvConst env reverse sym const
               in
                  R.assign theState
                     (ST {
                         current = current,
                         path = path,
                         env = env',
                         working = G (D.insert workingConsts sym const, workingMods),
                         reverse = CD.insert reverse' const ([sym], [])
                         });

                  result
               end
         end



      fun dumpGroup (G (defs, mods)) path acc =
         let
            val acc =
               D.foldl
                  (fn (sym, md, acc) => dumpGroup md (sym :: path) acc)
                  acc
                  mods

            val acc =
               D.foldl
                  (fn (sym, const, acc) =>
                      (List.rev (sym :: path), const, C.definition const) :: acc)
                  acc
                  defs
         in
            acc
         end

      fun dump address =
         let
            val ST { env } = R.deref theState

            val group =
               (case address of
                   [] => env

                 | _ =>
                      (case resolveMod env address of
                          SOME group => group

                        | NONE => signalError "no such address"))
         in
            dumpGroup group [] []
         end
         


      fun moduleExists address =
         let
            val ST { env } = R.deref theState
         in
            (case resolveMod env address of
                SOME _ => true

              | NONE => false)
         end

      fun currentModule () =
         let
            val ST { path } = R.deref theState
         in
            List.rev path
         end



      fun beginModuleSym sym =
         let
            val st as ST { current, path, env, working = working as G (_, workingMods), reverse } = R.deref theState
         in
            if Symbol.eq (sym, zilch) then
               signalError "bad module name"

            else if D.member workingMods sym then
               signalErrorOverlap sym
            else
               (
               R.assign theStack (st :: R.deref theStack);
               R.assign theState
                  (ST {
                      current = sym,
                      path = sym :: path,
                      env = env,
                      working = empty,
                      reverse = reverse
                      })
               )
         end

      fun beginModule str = beginModuleSym (Symbol.fromValue str)

      

      (* populate prefer reverse revaddr group

         Populate the reverse-lookup table.
         prefer: true if new names should be preferred to the old
      *)
      fun populate prefer reverse path (G (consts, mods)) =
         let
            val reverse =
               D.foldl 
                  (fn (name, group, reverse) =>
                      populate prefer reverse (name :: path) group)
                  reverse
                  mods

            val reverse =
               D.foldl
                  (fn (name, const, reverse) =>
                      let
                         val newpath = name :: path
                      in
                         CD.insertMerge reverse const (newpath, [])
                            (fn (oldpath, history) =>
                                if prefer then
                                   (newpath, oldpath :: history)
                                else
                                   (oldpath, newpath :: history))
                      end)
                  reverse
                  consts
         in
            reverse
         end



      (* precondition: no collision adding closingName to state *)
      fun endModuleMain closingName closingGroup state =
         let
            val ST { current, path, env, working = G (workingConst, workingMod), reverse } = state

            val (env', reverse') = insertEnvMod env reverse closingName closingGroup

            val workingMod' = D.insert workingMod closingName closingGroup

            val reverse' = populate false reverse' [closingName] closingGroup
         in
            ST { 
               current = current,
               path = path,
               env = env',
               working = G (workingConst, workingMod'),
               reverse = reverse'
               }
         end

      fun endModule () =
         (case R.deref theStack of
             [] =>
               signalError "not in module"

           | state :: rest =>
                let
                   (* state is the state that prevailed before the module was opened *)

                   val ST { current=closingName, working=closingGroup } = R.deref theState

                   (* no collision adding current to state, otherwise wouldn't have opened in the first place *)

                   val state' = endModuleMain closingName closingGroup state
                in
                   R.assign theStack rest;
                   R.assign theState state'
                end)



      fun openModule addr =
         let
            val ST { current, path, env, working, reverse } = R.deref theState
         in
            (case resolveMod env addr of
                NONE =>
                   signalError (String.concat
                                   [
                                   "module ",
                                   String.concatWith "." (map Symbol.toValue addr),
                                   " does not exist"
                                   ])

              | SOME group =>
                   let
                      val G (oldConsts, oldMods) = env
                      val G (useConsts, useMods) = group

                      val constCollisions : constant list ref = ref nil
                      val modCollisions : group list ref = ref nil

                      val newEnv =
                         G (D.union oldConsts useConsts
                               (fn (_, old, new) =>
                                   (
                                   constCollisions := old :: !constCollisions;
                                   new
                                   )),
                            D.union oldMods useMods
                               (fn (_, old, new) =>
                                   (
                                   modCollisions := old :: !modCollisions;
                                   new
                                   )))

                      val newReverse = populate true reverse [] group

                      val newReverse =
                         List.foldl
                            (fns const reverse =>
                                correctReverse newEnv const reverse)
                            newReverse
                            (!constCollisions)

                      val newReverse =
                         List.foldl
                            (fns group reverse =>
                                correctReverseGroup newEnv group reverse)
                            newReverse
                            (!modCollisions)
                   in
                      R.assign theState
                         (ST {
                             current = current,
                             path = path,
                             env = newEnv,
                             working = working,
                             reverse = newReverse
                             })
                   end)
         end



      fun alias sym const =
         let
            val ST { current, path, env, working = working as G (workingConsts, _), reverse } = R.deref theState
         in
            if D.member workingConsts sym then
               signalErrorOverlap sym
            else
               let
                  val (env', reverse') = insertEnvConst env reverse sym const
               in
                  R.assign theState
                     (ST {
                         current = current,
                         path = path,
                         env = env',
                         working = working,
                         reverse = 
                            CD.insertMerge reverse' const 
                               ([sym], [])
                               (fn (path, history) => ([sym], path :: history))
                         })
               end
         end



      fun aliasExport sym const =
         let
            val ST { current, path, env, working = working as G (workingConsts, workingMods), reverse } = R.deref theState
         in
            if D.member workingConsts sym then
               signalErrorOverlap sym
            else
               let
                  val (env', reverse') = insertEnvConst env reverse sym const
               in
                  R.assign theState
                     (ST {
                         current = current,
                         path = path,
                         env = env',
                         working = G (D.insert workingConsts sym const, workingMods),
                         reverse = 
                            CD.insertMerge reverse' const 
                               ([sym], [])
                               (fn (path, history) => ([sym], path :: history))
                         })
               end
         end



      fun aliasModule sym addr =
         let
            val ST { current, path, env = env, working = working as G (_, workingMods), reverse } = R.deref theState
         in
            (case resolveMod env addr of
                NONE =>
                   signalError (String.concat
                                   [
                                   "module ",
                                   String.concatWith "." (map Symbol.toValue addr),
                                   " does not exist"
                                   ])

              | SOME group =>
                   if D.member workingMods sym then
                      signalError (String.concat
                                      [
                                      "the module name ",
                                      Symbol.toValue sym,
                                      " is already used in the current module"
                                      ])
                   else
                      let
                         val (env', reverse') = insertEnvMod env reverse sym group
                      in
                         R.assign theState
                            (ST {
                                current = current,
                                path = path,
                                env = env',
                                working = working,
                                reverse = populate true reverse' [sym] group
                                })
                      end)
         end



      (* closeStack f g l

         if    l = [state]
         then  returns  f state

         if    l = stack @ [state]
         then  returns  g name group state
               where    name is the oldest module name in stack
               and      group is the group obtained by closing all of stack
      *)

      fun closeStackLoop g name group l =
         (case l of
             [] =>
                raise (Fail "invariant")

           | [state] =>
                g name group state

           | ST { current, working = G (consts, mods) } :: rest =>
                closeStackLoop g current (G (consts, D.insert mods name group)) rest)

      fun closeStack f g l =
         (case l of
             [] =>
                raise (Fail "precondition")

           | [state] => f state

           | ST { current, working } :: rest =>
                closeStackLoop g current working rest)
                   
             
         
      fun endAllModules () =
         let
            val newstate =
               closeStack 
                  (fn st => st)
                  endModuleMain
                  (R.deref theState :: R.deref theStack)
         in
            R.assign theState newstate;
            R.assign theStack []
         end



      fun appGroup f (G (defs, mods)) path =
         (
         D.app
            (fn (sym, md) => appGroup f md (sym :: path))
            mods;

         D.app
            (fn (sym, const) => f (List.rev (sym :: path), const))
            defs
         )

      fun appExport f =
         let
            val group =
               closeStack
                  (fn (ST { working }) => working)
                  (fns name group (ST { working = G (consts, mods) }) =>
                      G (consts, D.insert mods name group))
                  (R.deref theState :: R.deref theStack)
         in
            appGroup f group []
         end



      fun hideModule sym =
         let
            val ST { current, path, env, working = G (workingConst, workingMod), reverse } = R.deref theState
         in
            if D.member workingMod sym then
               R.assign theState
                  (ST {
                      current = current,
                      path = path,
                      env = env,
                      reverse = reverse,
                      working = G (workingConst, D.remove workingMod sym)
                      })
            else
               raise (Fail "module absent in hideModule")
         end


      (* addr nonempty, |path| = |states| *)
      fun resolveGlobalLoop addr path group states =
         (case (addr, path) of
             (nil, _) =>
                raise (Fail "precondition")

           | ([sym], _) =>
                resolveConst group addr

           | (_, nil) =>
                resolveConst group addr

           | (asym :: addr', psym :: path') =>
                if Symbol.eq (asym, psym) then
                   (case states of
                       ST { working } :: rest =>
                          resolveGlobalLoop addr' path' working rest

                     | _ =>
                          raise (Fail "precondition"))
                else
                   resolveConst group addr)

      fun resolveGlobalOpt addr =
         if List.null addr then
            signalError "empty address"
         else
            let
               (* the stack and the current path have the same length *)

               val state as (ST { path=revpath }) = R.deref theState
               val states = List.rev (state :: R.deref theStack)
               val path = List.rev revpath
            in
               (case states of
                   ST { env } :: rest =>
                      resolveGlobalLoop addr path env rest
   
                 | _ =>
                      raise (Fail "impossible"))
            end

      fun resolveGlobal addr =
         (case resolveGlobalOpt addr of
             SOME const => const

           | NONE =>
                signalError (String.concat
                                [
                                "no constant with global address ",
                                String.concatWith "." (map Symbol.toValue addr),
                                " exists"
                                ]))

   end


structure Namespace :> NAMESPACE = NamespaceInternal
