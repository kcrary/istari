
typedef
/
  datatype
    intersect (i : level) .
    forall (a : U i) .
    U i
  of
    tree : nat -> type =
    | Empty : tree 0
    | Node : forall (n : nat) . a -> forest n -> tree (succ n)
    and
    forest : nat -> type =
    | Nil : forest 0
    | Cons : forall (m n : nat) . tree m -> forest n -> forest (m + n)
/;



defineInd /a/
/
  treesize : tree [a] _ -> nat of
  | Empty . 0
  | Node _ _ f . succ (forestsize f)

  and forestsize : forest _ -> nat of
  | Nil . 0
  | Cons _ _ t f . treesize t + forestsize f
//
  intersect (i : level) . forall (a : U i) (n : nat) . tree a n -> nat
  and
  intersect (i : level) . forall (a : U i) (n : nat) . forest a n -> nat
/;



lemma "treesize_id"
/
  forall i (a : U i) (n : nat) (t : tree a n) .
    treesize a n t = n : nat
/;

inference.
intro /i a/.
assert 
/
  forall (s : tree_skel a) .
    (forall (n : nat) (t : tree a n) .
       tree_strip t = s : tree_skel a 
       -> treesize a n t = n : nat)
    & (forall (n : nat) (f : forest a n) . 
         forest_strip f = s : tree_skel a 
         -> forestsize a n f = n : nat)
/ /H/.
1:{
  intro /n t/.
  apply /H (tree_strip t)/.
  reflexivity.
  }
intro /s/.
so /tree_subterm_well_founded _ a s/ /Hwf/.
sinduction /Hwf/.
reintro /IH/.
split.
  {
  intro /n t Heq/.
  subst /s/.
  destruct /t/ /{ Heq | n' x f Heq }/.
    {
    reduce //.
    subst /n/.
    auto.
    }

    {
    reduce //.
    subst /n/.
    compat.
    apply /IH (forest_strip f)/ >> auto.
    apply /Node_subterm/.
    }
  }

  {
  intro /n f Heq/.
  subst /s/.
  destruct /f/ /{ Heq | m' n' t f Heq }/.
    {
    reduce //.
    subst /n/.
    auto.
    }

    {
    reduce //.
    subst /n/.
    compat.
      {
      apply /IH (tree_strip t)/ >> auto.
      apply /Cons_subterm/.
      }

      {
      apply /IH (forest_strip f)/ >> auto.
      apply /Cons_subterm/.
      }
    }
  }
qed ();
